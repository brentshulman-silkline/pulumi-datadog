// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog screenboard resource. This can be used to create and manage Datadog screenboards.
    /// 
    /// &gt; **Note:** This resource is outdated. Use the new `datadog..Dashboard` resource instead.
    /// 
    /// 
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-datadog/blob/master/website/docs/r/screenboard.html.markdown.
    /// </summary>
    public partial class ScreenBoard : Pulumi.CustomResource
    {
        /// <summary>
        /// Height of the screenboard
        /// </summary>
        [Output("height")]
        public Output<string?> Height { get; private set; } = null!;

        [Output("readOnly")]
        public Output<bool?> ReadOnly { get; private set; } = null!;

        /// <summary>
        /// Whether the screenboard is shared or not
        /// </summary>
        [Output("shared")]
        public Output<bool?> Shared { get; private set; } = null!;

        /// <summary>
        /// A list of template variables for using Dashboard templating.
        /// </summary>
        [Output("templateVariables")]
        public Output<ImmutableArray<Outputs.ScreenBoardTemplateVariables>> TemplateVariables { get; private set; } = null!;

        /// <summary>
        /// Name of the screenboard
        /// </summary>
        [Output("title")]
        public Output<string> Title { get; private set; } = null!;

        /// <summary>
        /// A list of widget definitions.
        /// </summary>
        [Output("widgets")]
        public Output<ImmutableArray<Outputs.ScreenBoardWidgets>> Widgets { get; private set; } = null!;

        /// <summary>
        /// Width of the screenboard
        /// </summary>
        [Output("width")]
        public Output<string?> Width { get; private set; } = null!;


        /// <summary>
        /// Create a ScreenBoard resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ScreenBoard(string name, ScreenBoardArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/screenBoard:ScreenBoard", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ScreenBoard(string name, Input<string> id, ScreenBoardState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/screenBoard:ScreenBoard", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ScreenBoard resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ScreenBoard Get(string name, Input<string> id, ScreenBoardState? state = null, CustomResourceOptions? options = null)
        {
            return new ScreenBoard(name, id, state, options);
        }
    }

    public sealed class ScreenBoardArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Height of the screenboard
        /// </summary>
        [Input("height")]
        public Input<string>? Height { get; set; }

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        /// <summary>
        /// Whether the screenboard is shared or not
        /// </summary>
        [Input("shared")]
        public Input<bool>? Shared { get; set; }

        [Input("templateVariables")]
        private InputList<Inputs.ScreenBoardTemplateVariablesArgs>? _templateVariables;

        /// <summary>
        /// A list of template variables for using Dashboard templating.
        /// </summary>
        public InputList<Inputs.ScreenBoardTemplateVariablesArgs> TemplateVariables
        {
            get => _templateVariables ?? (_templateVariables = new InputList<Inputs.ScreenBoardTemplateVariablesArgs>());
            set => _templateVariables = value;
        }

        /// <summary>
        /// Name of the screenboard
        /// </summary>
        [Input("title", required: true)]
        public Input<string> Title { get; set; } = null!;

        [Input("widgets", required: true)]
        private InputList<Inputs.ScreenBoardWidgetsArgs>? _widgets;

        /// <summary>
        /// A list of widget definitions.
        /// </summary>
        public InputList<Inputs.ScreenBoardWidgetsArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.ScreenBoardWidgetsArgs>());
            set => _widgets = value;
        }

        /// <summary>
        /// Width of the screenboard
        /// </summary>
        [Input("width")]
        public Input<string>? Width { get; set; }

        public ScreenBoardArgs()
        {
        }
    }

    public sealed class ScreenBoardState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Height of the screenboard
        /// </summary>
        [Input("height")]
        public Input<string>? Height { get; set; }

        [Input("readOnly")]
        public Input<bool>? ReadOnly { get; set; }

        /// <summary>
        /// Whether the screenboard is shared or not
        /// </summary>
        [Input("shared")]
        public Input<bool>? Shared { get; set; }

        [Input("templateVariables")]
        private InputList<Inputs.ScreenBoardTemplateVariablesGetArgs>? _templateVariables;

        /// <summary>
        /// A list of template variables for using Dashboard templating.
        /// </summary>
        public InputList<Inputs.ScreenBoardTemplateVariablesGetArgs> TemplateVariables
        {
            get => _templateVariables ?? (_templateVariables = new InputList<Inputs.ScreenBoardTemplateVariablesGetArgs>());
            set => _templateVariables = value;
        }

        /// <summary>
        /// Name of the screenboard
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("widgets")]
        private InputList<Inputs.ScreenBoardWidgetsGetArgs>? _widgets;

        /// <summary>
        /// A list of widget definitions.
        /// </summary>
        public InputList<Inputs.ScreenBoardWidgetsGetArgs> Widgets
        {
            get => _widgets ?? (_widgets = new InputList<Inputs.ScreenBoardWidgetsGetArgs>());
            set => _widgets = value;
        }

        /// <summary>
        /// Width of the screenboard
        /// </summary>
        [Input("width")]
        public Input<string>? Width { get; set; }

        public ScreenBoardState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ScreenBoardTemplateVariablesArgs : Pulumi.ResourceArgs
    {
        [Input("default")]
        public Input<string>? Default { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        public ScreenBoardTemplateVariablesArgs()
        {
        }
    }

    public sealed class ScreenBoardTemplateVariablesGetArgs : Pulumi.ResourceArgs
    {
        [Input("default")]
        public Input<string>? Default { get; set; }

        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("prefix")]
        public Input<string>? Prefix { get; set; }

        public ScreenBoardTemplateVariablesGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsArgs : Pulumi.ResourceArgs
    {
        [Input("alertId")]
        public Input<int>? AlertId { get; set; }

        [Input("autoRefresh")]
        public Input<bool>? AutoRefresh { get; set; }

        [Input("bgcolor")]
        public Input<string>? Bgcolor { get; set; }

        [Input("check")]
        public Input<string>? Check { get; set; }

        [Input("color")]
        public Input<string>? Color { get; set; }

        [Input("colorPreference")]
        public Input<string>? ColorPreference { get; set; }

        [Input("columns")]
        public Input<string>? Columns { get; set; }

        [Input("displayFormat")]
        public Input<string>? DisplayFormat { get; set; }

        [Input("env")]
        public Input<string>? Env { get; set; }

        [Input("eventSize")]
        public Input<string>? EventSize { get; set; }

        [Input("fontSize")]
        public Input<string>? FontSize { get; set; }

        [Input("group")]
        public Input<string>? Group { get; set; }

        [Input("groupBies")]
        private InputList<string>? _groupBies;
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        [Input("grouping")]
        public Input<string>? Grouping { get; set; }

        [Input("height")]
        public Input<int>? Height { get; set; }

        [Input("hideZeroCounts")]
        public Input<bool>? HideZeroCounts { get; set; }

        [Input("html")]
        public Input<string>? Html { get; set; }

        [Input("layoutVersion")]
        public Input<string>? LayoutVersion { get; set; }

        [Input("legend")]
        public Input<bool>? Legend { get; set; }

        [Input("legendSize")]
        public Input<string>? LegendSize { get; set; }

        [Input("logset")]
        public Input<string>? Logset { get; set; }

        [Input("manageStatusShowTitle")]
        public Input<bool>? ManageStatusShowTitle { get; set; }

        [Input("manageStatusTitleAlign")]
        public Input<string>? ManageStatusTitleAlign { get; set; }

        [Input("manageStatusTitleSize")]
        public Input<string>? ManageStatusTitleSize { get; set; }

        [Input("manageStatusTitleText")]
        public Input<string>? ManageStatusTitleText { get; set; }

        [Input("margin")]
        public Input<string>? Margin { get; set; }

        [Input("monitor")]
        private InputMap<string>? _monitor;
        public InputMap<string> Monitor
        {
            get => _monitor ?? (_monitor = new InputMap<string>());
            set => _monitor = value;
        }

        [Input("mustShowBreakdown")]
        public Input<bool>? MustShowBreakdown { get; set; }

        [Input("mustShowDistribution")]
        public Input<bool>? MustShowDistribution { get; set; }

        [Input("mustShowErrors")]
        public Input<bool>? MustShowErrors { get; set; }

        [Input("mustShowHits")]
        public Input<bool>? MustShowHits { get; set; }

        [Input("mustShowLatency")]
        public Input<bool>? MustShowLatency { get; set; }

        [Input("mustShowResourceList")]
        public Input<bool>? MustShowResourceList { get; set; }

        [Input("params")]
        private InputMap<string>? _params;
        public InputMap<string> Params
        {
            get => _params ?? (_params = new InputMap<string>());
            set => _params = value;
        }

        [Input("precision")]
        public Input<string>? Precision { get; set; }

        [Input("query")]
        public Input<string>? Query { get; set; }

        [Input("rules")]
        private InputList<ScreenBoardWidgetsRulesArgs>? _rules;
        public InputList<ScreenBoardWidgetsRulesArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<ScreenBoardWidgetsRulesArgs>());
            set => _rules = value;
        }

        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        [Input("serviceService")]
        public Input<string>? ServiceService { get; set; }

        [Input("showLastTriggered")]
        public Input<bool>? ShowLastTriggered { get; set; }

        [Input("sizeVersion")]
        public Input<string>? SizeVersion { get; set; }

        [Input("sizing")]
        public Input<string>? Sizing { get; set; }

        [Input("summaryType")]
        public Input<string>? SummaryType { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("text")]
        public Input<string>? Text { get; set; }

        [Input("textAlign")]
        public Input<string>? TextAlign { get; set; }

        [Input("textSize")]
        public Input<string>? TextSize { get; set; }

        [Input("tick")]
        public Input<bool>? Tick { get; set; }

        [Input("tickEdge")]
        public Input<string>? TickEdge { get; set; }

        [Input("tickPos")]
        public Input<string>? TickPos { get; set; }

        [Input("tileDeves")]
        private InputList<ScreenBoardWidgetsTileDevesArgs>? _tileDeves;
        public InputList<ScreenBoardWidgetsTileDevesArgs> TileDeves
        {
            get => _tileDeves ?? (_tileDeves = new InputList<ScreenBoardWidgetsTileDevesArgs>());
            set => _tileDeves = value;
        }

        [Input("time")]
        private InputMap<string>? _time;
        public InputMap<string> Time
        {
            get => _time ?? (_time = new InputMap<string>());
            set => _time = value;
        }

        [Input("timeframes")]
        private InputList<string>? _timeframes;
        public InputList<string> Timeframes
        {
            get => _timeframes ?? (_timeframes = new InputList<string>());
            set => _timeframes = value;
        }

        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("titleAlign")]
        public Input<string>? TitleAlign { get; set; }

        [Input("titleSize")]
        public Input<int>? TitleSize { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("unit")]
        public Input<string>? Unit { get; set; }

        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("vizType")]
        public Input<string>? VizType { get; set; }

        [Input("width")]
        public Input<int>? Width { get; set; }

        [Input("x", required: true)]
        public Input<int> X { get; set; } = null!;

        [Input("y", required: true)]
        public Input<int> Y { get; set; } = null!;

        public ScreenBoardWidgetsArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsGetArgs : Pulumi.ResourceArgs
    {
        [Input("alertId")]
        public Input<int>? AlertId { get; set; }

        [Input("autoRefresh")]
        public Input<bool>? AutoRefresh { get; set; }

        [Input("bgcolor")]
        public Input<string>? Bgcolor { get; set; }

        [Input("check")]
        public Input<string>? Check { get; set; }

        [Input("color")]
        public Input<string>? Color { get; set; }

        [Input("colorPreference")]
        public Input<string>? ColorPreference { get; set; }

        [Input("columns")]
        public Input<string>? Columns { get; set; }

        [Input("displayFormat")]
        public Input<string>? DisplayFormat { get; set; }

        [Input("env")]
        public Input<string>? Env { get; set; }

        [Input("eventSize")]
        public Input<string>? EventSize { get; set; }

        [Input("fontSize")]
        public Input<string>? FontSize { get; set; }

        [Input("group")]
        public Input<string>? Group { get; set; }

        [Input("groupBies")]
        private InputList<string>? _groupBies;
        public InputList<string> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<string>());
            set => _groupBies = value;
        }

        [Input("grouping")]
        public Input<string>? Grouping { get; set; }

        [Input("height")]
        public Input<int>? Height { get; set; }

        [Input("hideZeroCounts")]
        public Input<bool>? HideZeroCounts { get; set; }

        [Input("html")]
        public Input<string>? Html { get; set; }

        [Input("layoutVersion")]
        public Input<string>? LayoutVersion { get; set; }

        [Input("legend")]
        public Input<bool>? Legend { get; set; }

        [Input("legendSize")]
        public Input<string>? LegendSize { get; set; }

        [Input("logset")]
        public Input<string>? Logset { get; set; }

        [Input("manageStatusShowTitle")]
        public Input<bool>? ManageStatusShowTitle { get; set; }

        [Input("manageStatusTitleAlign")]
        public Input<string>? ManageStatusTitleAlign { get; set; }

        [Input("manageStatusTitleSize")]
        public Input<string>? ManageStatusTitleSize { get; set; }

        [Input("manageStatusTitleText")]
        public Input<string>? ManageStatusTitleText { get; set; }

        [Input("margin")]
        public Input<string>? Margin { get; set; }

        [Input("monitor")]
        private InputMap<string>? _monitor;
        public InputMap<string> Monitor
        {
            get => _monitor ?? (_monitor = new InputMap<string>());
            set => _monitor = value;
        }

        [Input("mustShowBreakdown")]
        public Input<bool>? MustShowBreakdown { get; set; }

        [Input("mustShowDistribution")]
        public Input<bool>? MustShowDistribution { get; set; }

        [Input("mustShowErrors")]
        public Input<bool>? MustShowErrors { get; set; }

        [Input("mustShowHits")]
        public Input<bool>? MustShowHits { get; set; }

        [Input("mustShowLatency")]
        public Input<bool>? MustShowLatency { get; set; }

        [Input("mustShowResourceList")]
        public Input<bool>? MustShowResourceList { get; set; }

        [Input("params")]
        private InputMap<string>? _params;
        public InputMap<string> Params
        {
            get => _params ?? (_params = new InputMap<string>());
            set => _params = value;
        }

        [Input("precision")]
        public Input<string>? Precision { get; set; }

        [Input("query")]
        public Input<string>? Query { get; set; }

        [Input("rules")]
        private InputList<ScreenBoardWidgetsRulesGetArgs>? _rules;
        public InputList<ScreenBoardWidgetsRulesGetArgs> Rules
        {
            get => _rules ?? (_rules = new InputList<ScreenBoardWidgetsRulesGetArgs>());
            set => _rules = value;
        }

        [Input("serviceName")]
        public Input<string>? ServiceName { get; set; }

        [Input("serviceService")]
        public Input<string>? ServiceService { get; set; }

        [Input("showLastTriggered")]
        public Input<bool>? ShowLastTriggered { get; set; }

        [Input("sizeVersion")]
        public Input<string>? SizeVersion { get; set; }

        [Input("sizing")]
        public Input<string>? Sizing { get; set; }

        [Input("summaryType")]
        public Input<string>? SummaryType { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("text")]
        public Input<string>? Text { get; set; }

        [Input("textAlign")]
        public Input<string>? TextAlign { get; set; }

        [Input("textSize")]
        public Input<string>? TextSize { get; set; }

        [Input("tick")]
        public Input<bool>? Tick { get; set; }

        [Input("tickEdge")]
        public Input<string>? TickEdge { get; set; }

        [Input("tickPos")]
        public Input<string>? TickPos { get; set; }

        [Input("tileDeves")]
        private InputList<ScreenBoardWidgetsTileDevesGetArgs>? _tileDeves;
        public InputList<ScreenBoardWidgetsTileDevesGetArgs> TileDeves
        {
            get => _tileDeves ?? (_tileDeves = new InputList<ScreenBoardWidgetsTileDevesGetArgs>());
            set => _tileDeves = value;
        }

        [Input("time")]
        private InputMap<string>? _time;
        public InputMap<string> Time
        {
            get => _time ?? (_time = new InputMap<string>());
            set => _time = value;
        }

        [Input("timeframes")]
        private InputList<string>? _timeframes;
        public InputList<string> Timeframes
        {
            get => _timeframes ?? (_timeframes = new InputList<string>());
            set => _timeframes = value;
        }

        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("titleAlign")]
        public Input<string>? TitleAlign { get; set; }

        [Input("titleSize")]
        public Input<int>? TitleSize { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("unit")]
        public Input<string>? Unit { get; set; }

        [Input("url")]
        public Input<string>? Url { get; set; }

        [Input("vizType")]
        public Input<string>? VizType { get; set; }

        [Input("width")]
        public Input<int>? Width { get; set; }

        [Input("x", required: true)]
        public Input<int> X { get; set; } = null!;

        [Input("y", required: true)]
        public Input<int> Y { get; set; } = null!;

        public ScreenBoardWidgetsGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsRulesArgs : Pulumi.ResourceArgs
    {
        [Input("color")]
        public Input<string>? Color { get; set; }

        [Input("threshold")]
        public Input<double>? Threshold { get; set; }

        [Input("timeframe")]
        public Input<string>? Timeframe { get; set; }

        public ScreenBoardWidgetsRulesArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsRulesGetArgs : Pulumi.ResourceArgs
    {
        [Input("color")]
        public Input<string>? Color { get; set; }

        [Input("threshold")]
        public Input<double>? Threshold { get; set; }

        [Input("timeframe")]
        public Input<string>? Timeframe { get; set; }

        public ScreenBoardWidgetsRulesGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesArgs : Pulumi.ResourceArgs
    {
        [Input("autoscale")]
        public Input<bool>? Autoscale { get; set; }

        [Input("customUnit")]
        public Input<string>? CustomUnit { get; set; }

        [Input("events")]
        private InputList<ScreenBoardWidgetsTileDevesEventsArgs>? _events;
        public InputList<ScreenBoardWidgetsTileDevesEventsArgs> Events
        {
            get => _events ?? (_events = new InputList<ScreenBoardWidgetsTileDevesEventsArgs>());
            set => _events = value;
        }

        [Input("groups")]
        private InputList<string>? _groups;
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        [Input("markers")]
        private InputList<ScreenBoardWidgetsTileDevesMarkersArgs>? _markers;
        public InputList<ScreenBoardWidgetsTileDevesMarkersArgs> Markers
        {
            get => _markers ?? (_markers = new InputList<ScreenBoardWidgetsTileDevesMarkersArgs>());
            set => _markers = value;
        }

        [Input("noGroupHosts")]
        public Input<bool>? NoGroupHosts { get; set; }

        [Input("noMetricHosts")]
        public Input<bool>? NoMetricHosts { get; set; }

        [Input("nodeType")]
        public Input<string>? NodeType { get; set; }

        [Input("precision")]
        public Input<string>? Precision { get; set; }

        [Input("requests", required: true)]
        private InputList<ScreenBoardWidgetsTileDevesRequestsArgs>? _requests;
        public InputList<ScreenBoardWidgetsTileDevesRequestsArgs> Requests
        {
            get => _requests ?? (_requests = new InputList<ScreenBoardWidgetsTileDevesRequestsArgs>());
            set => _requests = value;
        }

        [Input("scopes")]
        private InputList<string>? _scopes;
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("style")]
        private InputMap<object>? _style;
        public InputMap<object> Style
        {
            get => _style ?? (_style = new InputMap<object>());
            set => _style = value;
        }

        [Input("textAlign")]
        public Input<string>? TextAlign { get; set; }

        [Input("viz", required: true)]
        public Input<string> Viz { get; set; } = null!;

        public ScreenBoardWidgetsTileDevesArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesEventsArgs : Pulumi.ResourceArgs
    {
        [Input("q", required: true)]
        public Input<string> Q { get; set; } = null!;

        public ScreenBoardWidgetsTileDevesEventsArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesEventsGetArgs : Pulumi.ResourceArgs
    {
        [Input("q", required: true)]
        public Input<string> Q { get; set; } = null!;

        public ScreenBoardWidgetsTileDevesEventsGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesGetArgs : Pulumi.ResourceArgs
    {
        [Input("autoscale")]
        public Input<bool>? Autoscale { get; set; }

        [Input("customUnit")]
        public Input<string>? CustomUnit { get; set; }

        [Input("events")]
        private InputList<ScreenBoardWidgetsTileDevesEventsGetArgs>? _events;
        public InputList<ScreenBoardWidgetsTileDevesEventsGetArgs> Events
        {
            get => _events ?? (_events = new InputList<ScreenBoardWidgetsTileDevesEventsGetArgs>());
            set => _events = value;
        }

        [Input("groups")]
        private InputList<string>? _groups;
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        [Input("markers")]
        private InputList<ScreenBoardWidgetsTileDevesMarkersGetArgs>? _markers;
        public InputList<ScreenBoardWidgetsTileDevesMarkersGetArgs> Markers
        {
            get => _markers ?? (_markers = new InputList<ScreenBoardWidgetsTileDevesMarkersGetArgs>());
            set => _markers = value;
        }

        [Input("noGroupHosts")]
        public Input<bool>? NoGroupHosts { get; set; }

        [Input("noMetricHosts")]
        public Input<bool>? NoMetricHosts { get; set; }

        [Input("nodeType")]
        public Input<string>? NodeType { get; set; }

        [Input("precision")]
        public Input<string>? Precision { get; set; }

        [Input("requests", required: true)]
        private InputList<ScreenBoardWidgetsTileDevesRequestsGetArgs>? _requests;
        public InputList<ScreenBoardWidgetsTileDevesRequestsGetArgs> Requests
        {
            get => _requests ?? (_requests = new InputList<ScreenBoardWidgetsTileDevesRequestsGetArgs>());
            set => _requests = value;
        }

        [Input("scopes")]
        private InputList<string>? _scopes;
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("style")]
        private InputMap<object>? _style;
        public InputMap<object> Style
        {
            get => _style ?? (_style = new InputMap<object>());
            set => _style = value;
        }

        [Input("textAlign")]
        public Input<string>? TextAlign { get; set; }

        [Input("viz", required: true)]
        public Input<string> Viz { get; set; } = null!;

        public ScreenBoardWidgetsTileDevesGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesMarkersArgs : Pulumi.ResourceArgs
    {
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ScreenBoardWidgetsTileDevesMarkersArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesMarkersGetArgs : Pulumi.ResourceArgs
    {
        [Input("label")]
        public Input<string>? Label { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        [Input("value", required: true)]
        public Input<string> Value { get; set; } = null!;

        public ScreenBoardWidgetsTileDevesMarkersGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQueryArgs : Pulumi.ResourceArgs
    {
        [Input("compute", required: true)]
        public Input<ScreenBoardWidgetsTileDevesRequestsApmQueryComputeArgs> Compute { get; set; } = null!;

        [Input("groupBies")]
        private InputList<ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesArgs>? _groupBies;
        public InputList<ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesArgs> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesArgs>());
            set => _groupBies = value;
        }

        [Input("index", required: true)]
        public Input<string> Index { get; set; } = null!;

        [Input("search")]
        public Input<ScreenBoardWidgetsTileDevesRequestsApmQuerySearchArgs>? Search { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsApmQueryArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQueryComputeArgs : Pulumi.ResourceArgs
    {
        [Input("aggregation", required: true)]
        public Input<string> Aggregation { get; set; } = null!;

        [Input("facet")]
        public Input<string>? Facet { get; set; }

        [Input("interval")]
        public Input<string>? Interval { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsApmQueryComputeArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQueryComputeGetArgs : Pulumi.ResourceArgs
    {
        [Input("aggregation", required: true)]
        public Input<string> Aggregation { get; set; } = null!;

        [Input("facet")]
        public Input<string>? Facet { get; set; }

        [Input("interval")]
        public Input<string>? Interval { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsApmQueryComputeGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQueryGetArgs : Pulumi.ResourceArgs
    {
        [Input("compute", required: true)]
        public Input<ScreenBoardWidgetsTileDevesRequestsApmQueryComputeGetArgs> Compute { get; set; } = null!;

        [Input("groupBies")]
        private InputList<ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesGetArgs>? _groupBies;
        public InputList<ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesGetArgs> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesGetArgs>());
            set => _groupBies = value;
        }

        [Input("index", required: true)]
        public Input<string> Index { get; set; } = null!;

        [Input("search")]
        public Input<ScreenBoardWidgetsTileDevesRequestsApmQuerySearchGetArgs>? Search { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsApmQueryGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesArgs : Pulumi.ResourceArgs
    {
        [Input("facet", required: true)]
        public Input<string> Facet { get; set; } = null!;

        [Input("limit")]
        public Input<int>? Limit { get; set; }

        [Input("sort")]
        public Input<ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesSortArgs>? Sort { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesGetArgs : Pulumi.ResourceArgs
    {
        [Input("facet", required: true)]
        public Input<string> Facet { get; set; } = null!;

        [Input("limit")]
        public Input<int>? Limit { get; set; }

        [Input("sort")]
        public Input<ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesSortGetArgs>? Sort { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesSortArgs : Pulumi.ResourceArgs
    {
        [Input("aggregation", required: true)]
        public Input<string> Aggregation { get; set; } = null!;

        [Input("facet")]
        public Input<string>? Facet { get; set; }

        [Input("order", required: true)]
        public Input<string> Order { get; set; } = null!;

        public ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesSortArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesSortGetArgs : Pulumi.ResourceArgs
    {
        [Input("aggregation", required: true)]
        public Input<string> Aggregation { get; set; } = null!;

        [Input("facet")]
        public Input<string>? Facet { get; set; }

        [Input("order", required: true)]
        public Input<string> Order { get; set; } = null!;

        public ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesSortGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQuerySearchArgs : Pulumi.ResourceArgs
    {
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        public ScreenBoardWidgetsTileDevesRequestsApmQuerySearchArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQuerySearchGetArgs : Pulumi.ResourceArgs
    {
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        public ScreenBoardWidgetsTileDevesRequestsApmQuerySearchGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsArgs : Pulumi.ResourceArgs
    {
        [Input("aggregator")]
        public Input<string>? Aggregator { get; set; }

        [Input("apmQuery")]
        public Input<ScreenBoardWidgetsTileDevesRequestsApmQueryArgs>? ApmQuery { get; set; }

        [Input("changeType")]
        public Input<string>? ChangeType { get; set; }

        [Input("compareTo")]
        public Input<string>? CompareTo { get; set; }

        [Input("conditionalFormats")]
        private InputList<ScreenBoardWidgetsTileDevesRequestsConditionalFormatsArgs>? _conditionalFormats;
        public InputList<ScreenBoardWidgetsTileDevesRequestsConditionalFormatsArgs> ConditionalFormats
        {
            get => _conditionalFormats ?? (_conditionalFormats = new InputList<ScreenBoardWidgetsTileDevesRequestsConditionalFormatsArgs>());
            set => _conditionalFormats = value;
        }

        [Input("extraCol")]
        public Input<string>? ExtraCol { get; set; }

        [Input("increaseGood")]
        public Input<bool>? IncreaseGood { get; set; }

        [Input("limit")]
        public Input<int>? Limit { get; set; }

        [Input("logQuery")]
        public Input<ScreenBoardWidgetsTileDevesRequestsLogQueryArgs>? LogQuery { get; set; }

        [Input("metadataJson")]
        public Input<string>? MetadataJson { get; set; }

        [Input("metric")]
        public Input<string>? Metric { get; set; }

        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        [Input("orderDir")]
        public Input<string>? OrderDir { get; set; }

        [Input("processQuery")]
        public Input<ScreenBoardWidgetsTileDevesRequestsProcessQueryArgs>? ProcessQuery { get; set; }

        [Input("q")]
        public Input<string>? Q { get; set; }

        [Input("queryType")]
        public Input<string>? QueryType { get; set; }

        [Input("style")]
        private InputMap<object>? _style;
        public InputMap<object> Style
        {
            get => _style ?? (_style = new InputMap<object>());
            set => _style = value;
        }

        [Input("tagFilters")]
        private InputList<string>? _tagFilters;
        public InputList<string> TagFilters
        {
            get => _tagFilters ?? (_tagFilters = new InputList<string>());
            set => _tagFilters = value;
        }

        [Input("textFilter")]
        public Input<string>? TextFilter { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsConditionalFormatsArgs : Pulumi.ResourceArgs
    {
        [Input("color")]
        public Input<string>? Color { get; set; }

        [Input("comparator", required: true)]
        public Input<string> Comparator { get; set; } = null!;

        [Input("customBgColor")]
        public Input<string>? CustomBgColor { get; set; }

        [Input("invert")]
        public Input<bool>? Invert { get; set; }

        [Input("palette")]
        public Input<string>? Palette { get; set; }

        [Input("value")]
        public Input<string>? Value { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsConditionalFormatsArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsConditionalFormatsGetArgs : Pulumi.ResourceArgs
    {
        [Input("color")]
        public Input<string>? Color { get; set; }

        [Input("comparator", required: true)]
        public Input<string> Comparator { get; set; } = null!;

        [Input("customBgColor")]
        public Input<string>? CustomBgColor { get; set; }

        [Input("invert")]
        public Input<bool>? Invert { get; set; }

        [Input("palette")]
        public Input<string>? Palette { get; set; }

        [Input("value")]
        public Input<string>? Value { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsConditionalFormatsGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsGetArgs : Pulumi.ResourceArgs
    {
        [Input("aggregator")]
        public Input<string>? Aggregator { get; set; }

        [Input("apmQuery")]
        public Input<ScreenBoardWidgetsTileDevesRequestsApmQueryGetArgs>? ApmQuery { get; set; }

        [Input("changeType")]
        public Input<string>? ChangeType { get; set; }

        [Input("compareTo")]
        public Input<string>? CompareTo { get; set; }

        [Input("conditionalFormats")]
        private InputList<ScreenBoardWidgetsTileDevesRequestsConditionalFormatsGetArgs>? _conditionalFormats;
        public InputList<ScreenBoardWidgetsTileDevesRequestsConditionalFormatsGetArgs> ConditionalFormats
        {
            get => _conditionalFormats ?? (_conditionalFormats = new InputList<ScreenBoardWidgetsTileDevesRequestsConditionalFormatsGetArgs>());
            set => _conditionalFormats = value;
        }

        [Input("extraCol")]
        public Input<string>? ExtraCol { get; set; }

        [Input("increaseGood")]
        public Input<bool>? IncreaseGood { get; set; }

        [Input("limit")]
        public Input<int>? Limit { get; set; }

        [Input("logQuery")]
        public Input<ScreenBoardWidgetsTileDevesRequestsLogQueryGetArgs>? LogQuery { get; set; }

        [Input("metadataJson")]
        public Input<string>? MetadataJson { get; set; }

        [Input("metric")]
        public Input<string>? Metric { get; set; }

        [Input("orderBy")]
        public Input<string>? OrderBy { get; set; }

        [Input("orderDir")]
        public Input<string>? OrderDir { get; set; }

        [Input("processQuery")]
        public Input<ScreenBoardWidgetsTileDevesRequestsProcessQueryGetArgs>? ProcessQuery { get; set; }

        [Input("q")]
        public Input<string>? Q { get; set; }

        [Input("queryType")]
        public Input<string>? QueryType { get; set; }

        [Input("style")]
        private InputMap<object>? _style;
        public InputMap<object> Style
        {
            get => _style ?? (_style = new InputMap<object>());
            set => _style = value;
        }

        [Input("tagFilters")]
        private InputList<string>? _tagFilters;
        public InputList<string> TagFilters
        {
            get => _tagFilters ?? (_tagFilters = new InputList<string>());
            set => _tagFilters = value;
        }

        [Input("textFilter")]
        public Input<string>? TextFilter { get; set; }

        [Input("type")]
        public Input<string>? Type { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQueryArgs : Pulumi.ResourceArgs
    {
        [Input("compute", required: true)]
        public Input<ScreenBoardWidgetsTileDevesRequestsLogQueryComputeArgs> Compute { get; set; } = null!;

        [Input("groupBies")]
        private InputList<ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesArgs>? _groupBies;
        public InputList<ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesArgs> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesArgs>());
            set => _groupBies = value;
        }

        [Input("index", required: true)]
        public Input<string> Index { get; set; } = null!;

        [Input("search")]
        public Input<ScreenBoardWidgetsTileDevesRequestsLogQuerySearchArgs>? Search { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsLogQueryArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQueryComputeArgs : Pulumi.ResourceArgs
    {
        [Input("aggregation", required: true)]
        public Input<string> Aggregation { get; set; } = null!;

        [Input("facet")]
        public Input<string>? Facet { get; set; }

        [Input("interval")]
        public Input<string>? Interval { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsLogQueryComputeArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQueryComputeGetArgs : Pulumi.ResourceArgs
    {
        [Input("aggregation", required: true)]
        public Input<string> Aggregation { get; set; } = null!;

        [Input("facet")]
        public Input<string>? Facet { get; set; }

        [Input("interval")]
        public Input<string>? Interval { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsLogQueryComputeGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQueryGetArgs : Pulumi.ResourceArgs
    {
        [Input("compute", required: true)]
        public Input<ScreenBoardWidgetsTileDevesRequestsLogQueryComputeGetArgs> Compute { get; set; } = null!;

        [Input("groupBies")]
        private InputList<ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesGetArgs>? _groupBies;
        public InputList<ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesGetArgs> GroupBies
        {
            get => _groupBies ?? (_groupBies = new InputList<ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesGetArgs>());
            set => _groupBies = value;
        }

        [Input("index", required: true)]
        public Input<string> Index { get; set; } = null!;

        [Input("search")]
        public Input<ScreenBoardWidgetsTileDevesRequestsLogQuerySearchGetArgs>? Search { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsLogQueryGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesArgs : Pulumi.ResourceArgs
    {
        [Input("facet", required: true)]
        public Input<string> Facet { get; set; } = null!;

        [Input("limit")]
        public Input<int>? Limit { get; set; }

        [Input("sort")]
        public Input<ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesSortArgs>? Sort { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesGetArgs : Pulumi.ResourceArgs
    {
        [Input("facet", required: true)]
        public Input<string> Facet { get; set; } = null!;

        [Input("limit")]
        public Input<int>? Limit { get; set; }

        [Input("sort")]
        public Input<ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesSortGetArgs>? Sort { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesSortArgs : Pulumi.ResourceArgs
    {
        [Input("aggregation", required: true)]
        public Input<string> Aggregation { get; set; } = null!;

        [Input("facet")]
        public Input<string>? Facet { get; set; }

        [Input("order", required: true)]
        public Input<string> Order { get; set; } = null!;

        public ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesSortArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesSortGetArgs : Pulumi.ResourceArgs
    {
        [Input("aggregation", required: true)]
        public Input<string> Aggregation { get; set; } = null!;

        [Input("facet")]
        public Input<string>? Facet { get; set; }

        [Input("order", required: true)]
        public Input<string> Order { get; set; } = null!;

        public ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesSortGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQuerySearchArgs : Pulumi.ResourceArgs
    {
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        public ScreenBoardWidgetsTileDevesRequestsLogQuerySearchArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQuerySearchGetArgs : Pulumi.ResourceArgs
    {
        [Input("query", required: true)]
        public Input<string> Query { get; set; } = null!;

        public ScreenBoardWidgetsTileDevesRequestsLogQuerySearchGetArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsProcessQueryArgs : Pulumi.ResourceArgs
    {
        [Input("filterBies")]
        private InputList<string>? _filterBies;
        public InputList<string> FilterBies
        {
            get => _filterBies ?? (_filterBies = new InputList<string>());
            set => _filterBies = value;
        }

        [Input("limit")]
        public Input<int>? Limit { get; set; }

        [Input("metric", required: true)]
        public Input<string> Metric { get; set; } = null!;

        [Input("searchBy")]
        public Input<string>? SearchBy { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsProcessQueryArgs()
        {
        }
    }

    public sealed class ScreenBoardWidgetsTileDevesRequestsProcessQueryGetArgs : Pulumi.ResourceArgs
    {
        [Input("filterBies")]
        private InputList<string>? _filterBies;
        public InputList<string> FilterBies
        {
            get => _filterBies ?? (_filterBies = new InputList<string>());
            set => _filterBies = value;
        }

        [Input("limit")]
        public Input<int>? Limit { get; set; }

        [Input("metric", required: true)]
        public Input<string> Metric { get; set; } = null!;

        [Input("searchBy")]
        public Input<string>? SearchBy { get; set; }

        public ScreenBoardWidgetsTileDevesRequestsProcessQueryGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ScreenBoardTemplateVariables
    {
        public readonly string? Default;
        public readonly string Name;
        public readonly string? Prefix;

        [OutputConstructor]
        private ScreenBoardTemplateVariables(
            string? @default,
            string name,
            string? prefix)
        {
            Default = @default;
            Name = name;
            Prefix = prefix;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgets
    {
        public readonly int? AlertId;
        public readonly bool? AutoRefresh;
        public readonly string? Bgcolor;
        public readonly string? Check;
        public readonly string? Color;
        public readonly string? ColorPreference;
        public readonly string? Columns;
        public readonly string? DisplayFormat;
        public readonly string? Env;
        public readonly string? EventSize;
        public readonly string? FontSize;
        public readonly string? Group;
        public readonly ImmutableArray<string> GroupBies;
        public readonly string? Grouping;
        public readonly int? Height;
        public readonly bool? HideZeroCounts;
        public readonly string? Html;
        public readonly string? LayoutVersion;
        public readonly bool? Legend;
        public readonly string? LegendSize;
        public readonly string? Logset;
        public readonly bool? ManageStatusShowTitle;
        public readonly string? ManageStatusTitleAlign;
        public readonly string? ManageStatusTitleSize;
        public readonly string? ManageStatusTitleText;
        public readonly string? Margin;
        public readonly ImmutableDictionary<string, string>? Monitor;
        public readonly bool? MustShowBreakdown;
        public readonly bool? MustShowDistribution;
        public readonly bool? MustShowErrors;
        public readonly bool? MustShowHits;
        public readonly bool? MustShowLatency;
        public readonly bool? MustShowResourceList;
        public readonly ImmutableDictionary<string, string>? Params;
        public readonly string? Precision;
        public readonly string? Query;
        public readonly ImmutableArray<ScreenBoardWidgetsRules> Rules;
        public readonly string? ServiceName;
        public readonly string? ServiceService;
        public readonly bool? ShowLastTriggered;
        public readonly string? SizeVersion;
        public readonly string? Sizing;
        public readonly string? SummaryType;
        public readonly ImmutableArray<string> Tags;
        public readonly string? Text;
        public readonly string? TextAlign;
        public readonly string? TextSize;
        public readonly bool? Tick;
        public readonly string? TickEdge;
        public readonly string? TickPos;
        public readonly ImmutableArray<ScreenBoardWidgetsTileDeves> TileDeves;
        public readonly ImmutableDictionary<string, string>? Time;
        public readonly ImmutableArray<string> Timeframes;
        public readonly string? Title;
        public readonly string? TitleAlign;
        public readonly int? TitleSize;
        public readonly string Type;
        public readonly string? Unit;
        public readonly string? Url;
        public readonly string? VizType;
        public readonly int? Width;
        public readonly int X;
        public readonly int Y;

        [OutputConstructor]
        private ScreenBoardWidgets(
            int? alertId,
            bool? autoRefresh,
            string? bgcolor,
            string? check,
            string? color,
            string? colorPreference,
            string? columns,
            string? displayFormat,
            string? env,
            string? eventSize,
            string? fontSize,
            string? group,
            ImmutableArray<string> groupBies,
            string? grouping,
            int? height,
            bool? hideZeroCounts,
            string? html,
            string? layoutVersion,
            bool? legend,
            string? legendSize,
            string? logset,
            bool? manageStatusShowTitle,
            string? manageStatusTitleAlign,
            string? manageStatusTitleSize,
            string? manageStatusTitleText,
            string? margin,
            ImmutableDictionary<string, string>? monitor,
            bool? mustShowBreakdown,
            bool? mustShowDistribution,
            bool? mustShowErrors,
            bool? mustShowHits,
            bool? mustShowLatency,
            bool? mustShowResourceList,
            ImmutableDictionary<string, string>? @params,
            string? precision,
            string? query,
            ImmutableArray<ScreenBoardWidgetsRules> rules,
            string? serviceName,
            string? serviceService,
            bool? showLastTriggered,
            string? sizeVersion,
            string? sizing,
            string? summaryType,
            ImmutableArray<string> tags,
            string? text,
            string? textAlign,
            string? textSize,
            bool? tick,
            string? tickEdge,
            string? tickPos,
            ImmutableArray<ScreenBoardWidgetsTileDeves> tileDeves,
            ImmutableDictionary<string, string>? time,
            ImmutableArray<string> timeframes,
            string? title,
            string? titleAlign,
            int? titleSize,
            string type,
            string? unit,
            string? url,
            string? vizType,
            int? width,
            int x,
            int y)
        {
            AlertId = alertId;
            AutoRefresh = autoRefresh;
            Bgcolor = bgcolor;
            Check = check;
            Color = color;
            ColorPreference = colorPreference;
            Columns = columns;
            DisplayFormat = displayFormat;
            Env = env;
            EventSize = eventSize;
            FontSize = fontSize;
            Group = group;
            GroupBies = groupBies;
            Grouping = grouping;
            Height = height;
            HideZeroCounts = hideZeroCounts;
            Html = html;
            LayoutVersion = layoutVersion;
            Legend = legend;
            LegendSize = legendSize;
            Logset = logset;
            ManageStatusShowTitle = manageStatusShowTitle;
            ManageStatusTitleAlign = manageStatusTitleAlign;
            ManageStatusTitleSize = manageStatusTitleSize;
            ManageStatusTitleText = manageStatusTitleText;
            Margin = margin;
            Monitor = monitor;
            MustShowBreakdown = mustShowBreakdown;
            MustShowDistribution = mustShowDistribution;
            MustShowErrors = mustShowErrors;
            MustShowHits = mustShowHits;
            MustShowLatency = mustShowLatency;
            MustShowResourceList = mustShowResourceList;
            Params = @params;
            Precision = precision;
            Query = query;
            Rules = rules;
            ServiceName = serviceName;
            ServiceService = serviceService;
            ShowLastTriggered = showLastTriggered;
            SizeVersion = sizeVersion;
            Sizing = sizing;
            SummaryType = summaryType;
            Tags = tags;
            Text = text;
            TextAlign = textAlign;
            TextSize = textSize;
            Tick = tick;
            TickEdge = tickEdge;
            TickPos = tickPos;
            TileDeves = tileDeves;
            Time = time;
            Timeframes = timeframes;
            Title = title;
            TitleAlign = titleAlign;
            TitleSize = titleSize;
            Type = type;
            Unit = unit;
            Url = url;
            VizType = vizType;
            Width = width;
            X = x;
            Y = y;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsRules
    {
        public readonly string? Color;
        public readonly double? Threshold;
        public readonly string? Timeframe;

        [OutputConstructor]
        private ScreenBoardWidgetsRules(
            string? color,
            double? threshold,
            string? timeframe)
        {
            Color = color;
            Threshold = threshold;
            Timeframe = timeframe;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDeves
    {
        public readonly bool? Autoscale;
        public readonly string? CustomUnit;
        public readonly ImmutableArray<ScreenBoardWidgetsTileDevesEvents> Events;
        public readonly ImmutableArray<string> Groups;
        public readonly ImmutableArray<ScreenBoardWidgetsTileDevesMarkers> Markers;
        public readonly bool? NoGroupHosts;
        public readonly bool? NoMetricHosts;
        public readonly string? NodeType;
        public readonly string? Precision;
        public readonly ImmutableArray<ScreenBoardWidgetsTileDevesRequests> Requests;
        public readonly ImmutableArray<string> Scopes;
        public readonly ImmutableDictionary<string, object>? Style;
        public readonly string? TextAlign;
        public readonly string Viz;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDeves(
            bool? autoscale,
            string? customUnit,
            ImmutableArray<ScreenBoardWidgetsTileDevesEvents> events,
            ImmutableArray<string> groups,
            ImmutableArray<ScreenBoardWidgetsTileDevesMarkers> markers,
            bool? noGroupHosts,
            bool? noMetricHosts,
            string? nodeType,
            string? precision,
            ImmutableArray<ScreenBoardWidgetsTileDevesRequests> requests,
            ImmutableArray<string> scopes,
            ImmutableDictionary<string, object>? style,
            string? textAlign,
            string viz)
        {
            Autoscale = autoscale;
            CustomUnit = customUnit;
            Events = events;
            Groups = groups;
            Markers = markers;
            NoGroupHosts = noGroupHosts;
            NoMetricHosts = noMetricHosts;
            NodeType = nodeType;
            Precision = precision;
            Requests = requests;
            Scopes = scopes;
            Style = style;
            TextAlign = textAlign;
            Viz = viz;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesEvents
    {
        public readonly string Q;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesEvents(string q)
        {
            Q = q;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesMarkers
    {
        public readonly string? Label;
        public readonly string Type;
        public readonly string Value;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesMarkers(
            string? label,
            string type,
            string value)
        {
            Label = label;
            Type = type;
            Value = value;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesRequests
    {
        public readonly string? Aggregator;
        public readonly ScreenBoardWidgetsTileDevesRequestsApmQuery? ApmQuery;
        public readonly string? ChangeType;
        public readonly string? CompareTo;
        public readonly ImmutableArray<ScreenBoardWidgetsTileDevesRequestsConditionalFormats> ConditionalFormats;
        public readonly string? ExtraCol;
        public readonly bool? IncreaseGood;
        public readonly int? Limit;
        public readonly ScreenBoardWidgetsTileDevesRequestsLogQuery? LogQuery;
        public readonly string? MetadataJson;
        public readonly string? Metric;
        public readonly string? OrderBy;
        public readonly string? OrderDir;
        public readonly ScreenBoardWidgetsTileDevesRequestsProcessQuery? ProcessQuery;
        public readonly string? Q;
        public readonly string? QueryType;
        public readonly ImmutableDictionary<string, object>? Style;
        public readonly ImmutableArray<string> TagFilters;
        public readonly string? TextFilter;
        public readonly string? Type;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesRequests(
            string? aggregator,
            ScreenBoardWidgetsTileDevesRequestsApmQuery? apmQuery,
            string? changeType,
            string? compareTo,
            ImmutableArray<ScreenBoardWidgetsTileDevesRequestsConditionalFormats> conditionalFormats,
            string? extraCol,
            bool? increaseGood,
            int? limit,
            ScreenBoardWidgetsTileDevesRequestsLogQuery? logQuery,
            string? metadataJson,
            string? metric,
            string? orderBy,
            string? orderDir,
            ScreenBoardWidgetsTileDevesRequestsProcessQuery? processQuery,
            string? q,
            string? queryType,
            ImmutableDictionary<string, object>? style,
            ImmutableArray<string> tagFilters,
            string? textFilter,
            string? type)
        {
            Aggregator = aggregator;
            ApmQuery = apmQuery;
            ChangeType = changeType;
            CompareTo = compareTo;
            ConditionalFormats = conditionalFormats;
            ExtraCol = extraCol;
            IncreaseGood = increaseGood;
            Limit = limit;
            LogQuery = logQuery;
            MetadataJson = metadataJson;
            Metric = metric;
            OrderBy = orderBy;
            OrderDir = orderDir;
            ProcessQuery = processQuery;
            Q = q;
            QueryType = queryType;
            Style = style;
            TagFilters = tagFilters;
            TextFilter = textFilter;
            Type = type;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQuery
    {
        public readonly ScreenBoardWidgetsTileDevesRequestsApmQueryCompute Compute;
        public readonly ImmutableArray<ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBies> GroupBies;
        public readonly string Index;
        public readonly ScreenBoardWidgetsTileDevesRequestsApmQuerySearch? Search;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesRequestsApmQuery(
            ScreenBoardWidgetsTileDevesRequestsApmQueryCompute compute,
            ImmutableArray<ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBies> groupBies,
            string index,
            ScreenBoardWidgetsTileDevesRequestsApmQuerySearch? search)
        {
            Compute = compute;
            GroupBies = groupBies;
            Index = index;
            Search = search;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQueryCompute
    {
        public readonly string Aggregation;
        public readonly string? Facet;
        public readonly string? Interval;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesRequestsApmQueryCompute(
            string aggregation,
            string? facet,
            string? interval)
        {
            Aggregation = aggregation;
            Facet = facet;
            Interval = interval;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBies
    {
        public readonly string Facet;
        public readonly int? Limit;
        public readonly ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesSort? Sort;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBies(
            string facet,
            int? limit,
            ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesSort? sort)
        {
            Facet = facet;
            Limit = limit;
            Sort = sort;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesSort
    {
        public readonly string Aggregation;
        public readonly string? Facet;
        public readonly string Order;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesRequestsApmQueryGroupBiesSort(
            string aggregation,
            string? facet,
            string order)
        {
            Aggregation = aggregation;
            Facet = facet;
            Order = order;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesRequestsApmQuerySearch
    {
        public readonly string Query;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesRequestsApmQuerySearch(string query)
        {
            Query = query;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesRequestsConditionalFormats
    {
        public readonly string? Color;
        public readonly string Comparator;
        public readonly string? CustomBgColor;
        public readonly bool? Invert;
        public readonly string? Palette;
        public readonly string? Value;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesRequestsConditionalFormats(
            string? color,
            string comparator,
            string? customBgColor,
            bool? invert,
            string? palette,
            string? value)
        {
            Color = color;
            Comparator = comparator;
            CustomBgColor = customBgColor;
            Invert = invert;
            Palette = palette;
            Value = value;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQuery
    {
        public readonly ScreenBoardWidgetsTileDevesRequestsLogQueryCompute Compute;
        public readonly ImmutableArray<ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBies> GroupBies;
        public readonly string Index;
        public readonly ScreenBoardWidgetsTileDevesRequestsLogQuerySearch? Search;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesRequestsLogQuery(
            ScreenBoardWidgetsTileDevesRequestsLogQueryCompute compute,
            ImmutableArray<ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBies> groupBies,
            string index,
            ScreenBoardWidgetsTileDevesRequestsLogQuerySearch? search)
        {
            Compute = compute;
            GroupBies = groupBies;
            Index = index;
            Search = search;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQueryCompute
    {
        public readonly string Aggregation;
        public readonly string? Facet;
        public readonly string? Interval;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesRequestsLogQueryCompute(
            string aggregation,
            string? facet,
            string? interval)
        {
            Aggregation = aggregation;
            Facet = facet;
            Interval = interval;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBies
    {
        public readonly string Facet;
        public readonly int? Limit;
        public readonly ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesSort? Sort;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBies(
            string facet,
            int? limit,
            ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesSort? sort)
        {
            Facet = facet;
            Limit = limit;
            Sort = sort;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesSort
    {
        public readonly string Aggregation;
        public readonly string? Facet;
        public readonly string Order;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesRequestsLogQueryGroupBiesSort(
            string aggregation,
            string? facet,
            string order)
        {
            Aggregation = aggregation;
            Facet = facet;
            Order = order;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesRequestsLogQuerySearch
    {
        public readonly string Query;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesRequestsLogQuerySearch(string query)
        {
            Query = query;
        }
    }

    [OutputType]
    public sealed class ScreenBoardWidgetsTileDevesRequestsProcessQuery
    {
        public readonly ImmutableArray<string> FilterBies;
        public readonly int? Limit;
        public readonly string Metric;
        public readonly string? SearchBy;

        [OutputConstructor]
        private ScreenBoardWidgetsTileDevesRequestsProcessQuery(
            ImmutableArray<string> filterBies,
            int? limit,
            string metric,
            string? searchBy)
        {
            FilterBies = filterBies;
            Limit = limit;
            Metric = metric;
            SearchBy = searchBy;
        }
    }
    }
}
