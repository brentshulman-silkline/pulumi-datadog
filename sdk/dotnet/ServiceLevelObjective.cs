// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    /// <summary>
    /// Provides a Datadog service level objective resource. This can be used to create and manage Datadog service level objectives.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-datadog/blob/master/website/docs/r/service_level_objective.html.markdown.
    /// </summary>
    public partial class ServiceLevelObjective : Pulumi.CustomResource
    {
        /// <summary>
        /// A description of this service level objective.
        /// </summary>
        [Output("description")]
        public Output<string?> Description { get; private set; } = null!;

        /// <summary>
        /// A custom set of groups from the monitor(s) for which to use as the SLI instead of all the groups.
        /// </summary>
        [Output("groups")]
        public Output<ImmutableArray<string>> Groups { get; private set; } = null!;

        /// <summary>
        /// A list of numeric monitor IDs for which to use as SLIs. Their tags will be auto-imported into `monitor_tags` field in the API resource.
        /// </summary>
        [Output("monitorIds")]
        public Output<ImmutableArray<int>> MonitorIds { get; private set; } = null!;

        /// <summary>
        /// Name of Datadog service level objective
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// The metric query configuration to use for the SLI. This is a dictionary and requires both the `numerator` and `denominator` fields which should be `count` metrics using the `sum` aggregator.
        /// </summary>
        [Output("query")]
        public Output<Outputs.ServiceLevelObjectiveQuery?> Query { get; private set; } = null!;

        /// <summary>
        /// A list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<string>> Tags { get; private set; } = null!;

        /// <summary>
        /// - A list of thresholds and targets that define the service level objectives from the provided SLIs.
        /// </summary>
        [Output("thresholds")]
        public Output<ImmutableArray<Outputs.ServiceLevelObjectiveThresholds>> Thresholds { get; private set; } = null!;

        /// <summary>
        /// The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/?lang=python#create-a-service-level-objective) page. Available options to choose from are:
        /// * `metric`
        /// * `monitor`
        /// </summary>
        [Output("type")]
        public Output<string> Type { get; private set; } = null!;


        /// <summary>
        /// Create a ServiceLevelObjective resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ServiceLevelObjective(string name, ServiceLevelObjectiveArgs args, CustomResourceOptions? options = null)
            : base("datadog:index/serviceLevelObjective:ServiceLevelObjective", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private ServiceLevelObjective(string name, Input<string> id, ServiceLevelObjectiveState? state = null, CustomResourceOptions? options = null)
            : base("datadog:index/serviceLevelObjective:ServiceLevelObjective", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ServiceLevelObjective resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ServiceLevelObjective Get(string name, Input<string> id, ServiceLevelObjectiveState? state = null, CustomResourceOptions? options = null)
        {
            return new ServiceLevelObjective(name, id, state, options);
        }
    }

    public sealed class ServiceLevelObjectiveArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of this service level objective.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("groups")]
        private InputList<string>? _groups;

        /// <summary>
        /// A custom set of groups from the monitor(s) for which to use as the SLI instead of all the groups.
        /// </summary>
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        [Input("monitorIds")]
        private InputList<int>? _monitorIds;

        /// <summary>
        /// A list of numeric monitor IDs for which to use as SLIs. Their tags will be auto-imported into `monitor_tags` field in the API resource.
        /// </summary>
        public InputList<int> MonitorIds
        {
            get => _monitorIds ?? (_monitorIds = new InputList<int>());
            set => _monitorIds = value;
        }

        /// <summary>
        /// Name of Datadog service level objective
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The metric query configuration to use for the SLI. This is a dictionary and requires both the `numerator` and `denominator` fields which should be `count` metrics using the `sum` aggregator.
        /// </summary>
        [Input("query")]
        public Input<Inputs.ServiceLevelObjectiveQueryArgs>? Query { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("thresholds", required: true)]
        private InputList<Inputs.ServiceLevelObjectiveThresholdsArgs>? _thresholds;

        /// <summary>
        /// - A list of thresholds and targets that define the service level objectives from the provided SLIs.
        /// </summary>
        public InputList<Inputs.ServiceLevelObjectiveThresholdsArgs> Thresholds
        {
            get => _thresholds ?? (_thresholds = new InputList<Inputs.ServiceLevelObjectiveThresholdsArgs>());
            set => _thresholds = value;
        }

        /// <summary>
        /// The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/?lang=python#create-a-service-level-objective) page. Available options to choose from are:
        /// * `metric`
        /// * `monitor`
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public ServiceLevelObjectiveArgs()
        {
        }
    }

    public sealed class ServiceLevelObjectiveState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A description of this service level objective.
        /// </summary>
        [Input("description")]
        public Input<string>? Description { get; set; }

        [Input("groups")]
        private InputList<string>? _groups;

        /// <summary>
        /// A custom set of groups from the monitor(s) for which to use as the SLI instead of all the groups.
        /// </summary>
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        [Input("monitorIds")]
        private InputList<int>? _monitorIds;

        /// <summary>
        /// A list of numeric monitor IDs for which to use as SLIs. Their tags will be auto-imported into `monitor_tags` field in the API resource.
        /// </summary>
        public InputList<int> MonitorIds
        {
            get => _monitorIds ?? (_monitorIds = new InputList<int>());
            set => _monitorIds = value;
        }

        /// <summary>
        /// Name of Datadog service level objective
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The metric query configuration to use for the SLI. This is a dictionary and requires both the `numerator` and `denominator` fields which should be `count` metrics using the `sum` aggregator.
        /// </summary>
        [Input("query")]
        public Input<Inputs.ServiceLevelObjectiveQueryGetArgs>? Query { get; set; }

        [Input("tags")]
        private InputList<string>? _tags;

        /// <summary>
        /// A list of tags to associate with your service level objective. This can help you categorize and filter service level objectives in the service level objectives page of the UI. Note: it's not currently possible to filter by these tags when querying via the API
        /// </summary>
        public InputList<string> Tags
        {
            get => _tags ?? (_tags = new InputList<string>());
            set => _tags = value;
        }

        [Input("thresholds")]
        private InputList<Inputs.ServiceLevelObjectiveThresholdsGetArgs>? _thresholds;

        /// <summary>
        /// - A list of thresholds and targets that define the service level objectives from the provided SLIs.
        /// </summary>
        public InputList<Inputs.ServiceLevelObjectiveThresholdsGetArgs> Thresholds
        {
            get => _thresholds ?? (_thresholds = new InputList<Inputs.ServiceLevelObjectiveThresholdsGetArgs>());
            set => _thresholds = value;
        }

        /// <summary>
        /// The type of the service level objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/?lang=python#create-a-service-level-objective) page. Available options to choose from are:
        /// * `metric`
        /// * `monitor`
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public ServiceLevelObjectiveState()
        {
        }
    }

    namespace Inputs
    {

    public sealed class ServiceLevelObjectiveQueryArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// the sum of the `total` events
        /// * Example Usage:
        /// </summary>
        [Input("denominator", required: true)]
        public Input<string> Denominator { get; set; } = null!;

        /// <summary>
        /// the sum of all the `good` events
        /// </summary>
        [Input("numerator", required: true)]
        public Input<string> Numerator { get; set; } = null!;

        public ServiceLevelObjectiveQueryArgs()
        {
        }
    }

    public sealed class ServiceLevelObjectiveQueryGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// the sum of the `total` events
        /// * Example Usage:
        /// </summary>
        [Input("denominator", required: true)]
        public Input<string> Denominator { get; set; } = null!;

        /// <summary>
        /// the sum of all the `good` events
        /// </summary>
        [Input("numerator", required: true)]
        public Input<string> Numerator { get; set; } = null!;

        public ServiceLevelObjectiveQueryGetArgs()
        {
        }
    }

    public sealed class ServiceLevelObjectiveThresholdsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// the objective's target `[0,100]`
        /// </summary>
        [Input("target", required: true)]
        public Input<double> Target { get; set; } = null!;

        /// <summary>
        /// the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
        /// </summary>
        [Input("targetDisplay")]
        public Input<string>? TargetDisplay { get; set; }

        /// <summary>
        /// the time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/?lang=python#create-a-service-level-objective) page. Available options to choose from are:
        /// * `7d`
        /// * `30d`
        /// * `90d`
        /// </summary>
        [Input("timeframe", required: true)]
        public Input<string> Timeframe { get; set; } = null!;

        /// <summary>
        /// the objective's warning value `[0,100]`. This must be `&gt; target` value.
        /// </summary>
        [Input("warning")]
        public Input<double>? Warning { get; set; }

        /// <summary>
        /// the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
        /// </summary>
        [Input("warningDisplay")]
        public Input<string>? WarningDisplay { get; set; }

        public ServiceLevelObjectiveThresholdsArgs()
        {
        }
    }

    public sealed class ServiceLevelObjectiveThresholdsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// the objective's target `[0,100]`
        /// </summary>
        [Input("target", required: true)]
        public Input<double> Target { get; set; } = null!;

        /// <summary>
        /// the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
        /// </summary>
        [Input("targetDisplay")]
        public Input<string>? TargetDisplay { get; set; }

        /// <summary>
        /// the time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/?lang=python#create-a-service-level-objective) page. Available options to choose from are:
        /// * `7d`
        /// * `30d`
        /// * `90d`
        /// </summary>
        [Input("timeframe", required: true)]
        public Input<string> Timeframe { get; set; } = null!;

        /// <summary>
        /// the objective's warning value `[0,100]`. This must be `&gt; target` value.
        /// </summary>
        [Input("warning")]
        public Input<double>? Warning { get; set; }

        /// <summary>
        /// the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
        /// </summary>
        [Input("warningDisplay")]
        public Input<string>? WarningDisplay { get; set; }

        public ServiceLevelObjectiveThresholdsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class ServiceLevelObjectiveQuery
    {
        /// <summary>
        /// the sum of the `total` events
        /// * Example Usage:
        /// </summary>
        public readonly string Denominator;
        /// <summary>
        /// the sum of all the `good` events
        /// </summary>
        public readonly string Numerator;

        [OutputConstructor]
        private ServiceLevelObjectiveQuery(
            string denominator,
            string numerator)
        {
            Denominator = denominator;
            Numerator = numerator;
        }
    }

    [OutputType]
    public sealed class ServiceLevelObjectiveThresholds
    {
        /// <summary>
        /// the objective's target `[0,100]`
        /// </summary>
        public readonly double Target;
        /// <summary>
        /// the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
        /// </summary>
        public readonly string? TargetDisplay;
        /// <summary>
        /// the time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/?lang=python#create-a-service-level-objective) page. Available options to choose from are:
        /// * `7d`
        /// * `30d`
        /// * `90d`
        /// </summary>
        public readonly string Timeframe;
        /// <summary>
        /// the objective's warning value `[0,100]`. This must be `&gt; target` value.
        /// </summary>
        public readonly double? Warning;
        /// <summary>
        /// the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
        /// </summary>
        public readonly string? WarningDisplay;

        [OutputConstructor]
        private ServiceLevelObjectiveThresholds(
            double target,
            string? targetDisplay,
            string timeframe,
            double? warning,
            string? warningDisplay)
        {
            Target = target;
            TargetDisplay = targetDisplay;
            Timeframe = timeframe;
            Warning = warning;
            WarningDisplay = warningDisplay;
        }
    }
    }
}
