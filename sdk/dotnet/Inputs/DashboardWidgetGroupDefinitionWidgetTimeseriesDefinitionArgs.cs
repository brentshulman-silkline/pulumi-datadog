// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionArgs : Pulumi.ResourceArgs
    {
        [Input("events")]
        private InputList<Inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEventArgs>? _events;
        public InputList<Inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEventArgs> Events
        {
            get => _events ?? (_events = new InputList<Inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEventArgs>());
            set => _events = value;
        }

        [Input("legendSize")]
        public Input<string>? LegendSize { get; set; }

        [Input("markers")]
        private InputList<Inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarkerArgs>? _markers;

        /// <summary>
        /// Nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple marker blocks are allowed within a given tile_def block.
        /// - `title`: (Optional) The title of the widget.
        /// - `title_size`: (Optional) The size of the widget's title. Default is 16.
        /// - `title_align`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
        /// - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
        /// - `show_legend`: (Optional) Whether or not to show the legend on this widget.
        /// - `legend_size`: (Optional) The size of the legend displayed in the widget.
        /// - `event`: (Optional) The definition of the event to overlay on the graph. Includes the following structure:
        /// - `q`: (Required) The event query to use in the widget.
        /// - `tags_execution`: (Optional) The execution method for multi-value filters.
        /// - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
        /// - `toplist_definition`: The definition for a Toplist  widget. Exactly one nested block is allowed with the following structure:
        /// - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apm_query`, `log_query` or `process_query` is required within the request block):
        /// - `q`: (Optional) The metric query to use in the widget.
        /// - `apm_query`: (Optional) The APM query to use in the widget. The structure of this block is described below.
        /// - `log_query`: (Optional) The log query to use in the widget. The structure of this block is described below.
        /// - `process_query`: (Optional) The process query to use in the widget. The structure of this block is described below.
        /// </summary>
        public InputList<Inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarkerArgs> Markers
        {
            get => _markers ?? (_markers = new InputList<Inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarkerArgs>());
            set => _markers = value;
        }

        [Input("requests")]
        private InputList<Inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestArgs>? _requests;
        public InputList<Inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestArgs> Requests
        {
            get => _requests ?? (_requests = new InputList<Inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestArgs>());
            set => _requests = value;
        }

        [Input("showLegend")]
        public Input<bool>? ShowLegend { get; set; }

        [Input("time")]
        public Input<Inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionTimeArgs>? Time { get; set; }

        /// <summary>
        /// Title of the dashboard.
        /// </summary>
        [Input("title")]
        public Input<string>? Title { get; set; }

        [Input("titleAlign")]
        public Input<string>? TitleAlign { get; set; }

        [Input("titleSize")]
        public Input<string>? TitleSize { get; set; }

        [Input("yaxis")]
        public Input<Inputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxisArgs>? Yaxis { get; set; }

        public DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionArgs()
        {
        }
    }
}
