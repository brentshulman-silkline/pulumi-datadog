// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog.Inputs
{

    public sealed class ScreenBoardWidgetTileDefGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Boolean indicating whether to automatically scale the tile.
        /// </summary>
        [Input("autoscale")]
        public Input<bool>? Autoscale { get; set; }

        /// <summary>
        /// The unit for the value displayed in the widget
        /// </summary>
        [Input("customUnit")]
        public Input<string>? CustomUnit { get; set; }

        [Input("events")]
        private InputList<Inputs.ScreenBoardWidgetTileDefEventGetArgs>? _events;

        /// <summary>
        /// Nested block describing the event overlays to use when displaying the widget. The structure of this block is described below. At most one such block should be present in a given tile_def block.
        /// </summary>
        public InputList<Inputs.ScreenBoardWidgetTileDefEventGetArgs> Events
        {
            get => _events ?? (_events = new InputList<Inputs.ScreenBoardWidgetTileDefEventGetArgs>());
            set => _events = value;
        }

        [Input("groups")]
        private InputList<string>? _groups;

        /// <summary>
        /// The check group to use in the widget.
        /// </summary>
        public InputList<string> Groups
        {
            get => _groups ?? (_groups = new InputList<string>());
            set => _groups = value;
        }

        [Input("markers")]
        private InputList<Inputs.ScreenBoardWidgetTileDefMarkerGetArgs>? _markers;

        /// <summary>
        /// Nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple marker blocks are allowed within a given tile_def block.
        /// </summary>
        public InputList<Inputs.ScreenBoardWidgetTileDefMarkerGetArgs> Markers
        {
            get => _markers ?? (_markers = new InputList<Inputs.ScreenBoardWidgetTileDefMarkerGetArgs>());
            set => _markers = value;
        }

        /// <summary>
        /// Boolean indicating whether to show ungrouped nodes.
        /// </summary>
        [Input("noGroupHosts")]
        public Input<bool>? NoGroupHosts { get; set; }

        /// <summary>
        /// Boolean indicating whether to show nodes with no metrics.
        /// </summary>
        [Input("noMetricHosts")]
        public Input<bool>? NoMetricHosts { get; set; }

        /// <summary>
        /// The type of node used. Either "host" or "container".
        /// </summary>
        [Input("nodeType")]
        public Input<string>? NodeType { get; set; }

        /// <summary>
        /// The precision to use when displaying the value. Use "\*" for maximum precision.
        /// </summary>
        [Input("precision")]
        public Input<string>? Precision { get; set; }

        [Input("requests", required: true)]
        private InputList<Inputs.ScreenBoardWidgetTileDefRequestGetArgs>? _requests;

        /// <summary>
        /// Nested block describing the request to use when displaying the widget. The structure of this block is described below. Multiple request blocks are allowed within a given tile_def block.
        /// </summary>
        public InputList<Inputs.ScreenBoardWidgetTileDefRequestGetArgs> Requests
        {
            get => _requests ?? (_requests = new InputList<Inputs.ScreenBoardWidgetTileDefRequestGetArgs>());
            set => _requests = value;
        }

        [Input("scopes")]
        private InputList<string>? _scopes;

        /// <summary>
        /// The list of tags to filter nodes by.
        /// </summary>
        public InputList<string> Scopes
        {
            get => _scopes ?? (_scopes = new InputList<string>());
            set => _scopes = value;
        }

        [Input("style")]
        private InputMap<object>? _style;

        /// <summary>
        /// Nested block describing how to display the widget. The structure of this block is described below. At most one such block should be present in a given tile_def block.
        /// </summary>
        public InputMap<object> Style
        {
            get => _style ?? (_style = new InputMap<object>());
            set => _style = value;
        }

        /// <summary>
        /// The alignment of the text in the widget.
        /// </summary>
        [Input("textAlign")]
        public Input<string>? TextAlign { get; set; }

        /// <summary>
        /// Should be the same as the widget's type. One of "timeseries", "query_value", "hostmap", "change", "toplist", "process".
        /// </summary>
        [Input("viz", required: true)]
        public Input<string> Viz { get; set; } = null!;

        public ScreenBoardWidgetTileDefGetArgs()
        {
        }
    }
}
