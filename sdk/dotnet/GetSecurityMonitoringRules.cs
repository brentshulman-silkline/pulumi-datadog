// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Datadog
{
    public static class GetSecurityMonitoringRules
    {
        /// <summary>
        /// Use this data source to retrieve information about existing security monitoring rules for use in other resources.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Datadog = Pulumi.Datadog;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Datadog.GetSecurityMonitoringRules.InvokeAsync(new Datadog.GetSecurityMonitoringRulesArgs
        ///         {
        ///             DefaultOnlyFilter = true,
        ///             NameFilter = "attack",
        ///             TagsFilters = 
        ///             {
        ///                 "foo:bar",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSecurityMonitoringRulesResult> InvokeAsync(GetSecurityMonitoringRulesArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSecurityMonitoringRulesResult>("datadog:index/getSecurityMonitoringRules:getSecurityMonitoringRules", args ?? new GetSecurityMonitoringRulesArgs(), options.WithDefaults());

        /// <summary>
        /// Use this data source to retrieve information about existing security monitoring rules for use in other resources.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Datadog = Pulumi.Datadog;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Datadog.GetSecurityMonitoringRules.InvokeAsync(new Datadog.GetSecurityMonitoringRulesArgs
        ///         {
        ///             DefaultOnlyFilter = true,
        ///             NameFilter = "attack",
        ///             TagsFilters = 
        ///             {
        ///                 "foo:bar",
        ///             },
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSecurityMonitoringRulesResult> Invoke(GetSecurityMonitoringRulesInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSecurityMonitoringRulesResult>("datadog:index/getSecurityMonitoringRules:getSecurityMonitoringRules", args ?? new GetSecurityMonitoringRulesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSecurityMonitoringRulesArgs : Pulumi.InvokeArgs
    {
        [Input("defaultOnlyFilter")]
        public bool? DefaultOnlyFilter { get; set; }

        [Input("nameFilter")]
        public string? NameFilter { get; set; }

        [Input("tagsFilters")]
        private List<string>? _tagsFilters;
        public List<string> TagsFilters
        {
            get => _tagsFilters ?? (_tagsFilters = new List<string>());
            set => _tagsFilters = value;
        }

        [Input("userOnlyFilter")]
        public bool? UserOnlyFilter { get; set; }

        public GetSecurityMonitoringRulesArgs()
        {
        }
    }

    public sealed class GetSecurityMonitoringRulesInvokeArgs : Pulumi.InvokeArgs
    {
        [Input("defaultOnlyFilter")]
        public Input<bool>? DefaultOnlyFilter { get; set; }

        [Input("nameFilter")]
        public Input<string>? NameFilter { get; set; }

        [Input("tagsFilters")]
        private InputList<string>? _tagsFilters;
        public InputList<string> TagsFilters
        {
            get => _tagsFilters ?? (_tagsFilters = new InputList<string>());
            set => _tagsFilters = value;
        }

        [Input("userOnlyFilter")]
        public Input<bool>? UserOnlyFilter { get; set; }

        public GetSecurityMonitoringRulesInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSecurityMonitoringRulesResult
    {
        public readonly bool? DefaultOnlyFilter;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string? NameFilter;
        public readonly ImmutableArray<string> RuleIds;
        public readonly ImmutableArray<Outputs.GetSecurityMonitoringRulesRuleResult> Rules;
        public readonly ImmutableArray<string> TagsFilters;
        public readonly bool? UserOnlyFilter;

        [OutputConstructor]
        private GetSecurityMonitoringRulesResult(
            bool? defaultOnlyFilter,

            string id,

            string? nameFilter,

            ImmutableArray<string> ruleIds,

            ImmutableArray<Outputs.GetSecurityMonitoringRulesRuleResult> rules,

            ImmutableArray<string> tagsFilters,

            bool? userOnlyFilter)
        {
            DefaultOnlyFilter = defaultOnlyFilter;
            Id = id;
            NameFilter = nameFilter;
            RuleIds = ruleIds;
            Rules = rules;
            TagsFilters = tagsFilters;
            UserOnlyFilter = userOnlyFilter;
        }
    }
}
