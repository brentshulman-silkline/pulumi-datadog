// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Datadog [Logs Index API](https://docs.datadoghq.com/api/?lang=python#logs-indexes) resource. This can be used to manage the order of Datadog logs indexes.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-datadog/blob/master/website/docs/r/logs_index_order.html.markdown.
type LogsIndexOrder struct {
	s *pulumi.ResourceState
}

// NewLogsIndexOrder registers a new resource with the given unique name, arguments, and options.
func NewLogsIndexOrder(ctx *pulumi.Context,
	name string, args *LogsIndexOrderArgs, opts ...pulumi.ResourceOpt) (*LogsIndexOrder, error) {
	if args == nil || args.Indexes == nil {
		return nil, errors.New("missing required argument 'Indexes'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["indexes"] = nil
		inputs["name"] = nil
	} else {
		inputs["indexes"] = args.Indexes
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("datadog:index/logsIndexOrder:LogsIndexOrder", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogsIndexOrder{s: s}, nil
}

// GetLogsIndexOrder gets an existing LogsIndexOrder resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogsIndexOrder(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LogsIndexOrderState, opts ...pulumi.ResourceOpt) (*LogsIndexOrder, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["indexes"] = state.Indexes
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("datadog:index/logsIndexOrder:LogsIndexOrder", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogsIndexOrder{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LogsIndexOrder) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LogsIndexOrder) ID() pulumi.IDOutput {
	return r.s.ID()
}

// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
func (r *LogsIndexOrder) Indexes() pulumi.ArrayOutput {
	return (pulumi.ArrayOutput)(r.s.State["indexes"])
}

// The unique name of the index order resource. 
func (r *LogsIndexOrder) Name() pulumi.StringOutput {
	return (pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering LogsIndexOrder resources.
type LogsIndexOrderState struct {
	// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
	Indexes interface{}
	// The unique name of the index order resource. 
	Name interface{}
}

// The set of arguments for constructing a LogsIndexOrder resource.
type LogsIndexOrderArgs struct {
	// The index resource list. Logs are tested against the query filter of each index one by one following the order of the list.
	Indexes interface{}
	// The unique name of the index order resource. 
	Name interface{}
}
