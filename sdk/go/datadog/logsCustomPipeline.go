// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Datadog [Logs Pipeline API](https://docs.datadoghq.com/api/?lang=python#logs-pipelines) resource, which is used to create and manage Datadog logs custom pipelines.
// 
// 
// ## Important Notes
// 
// Each `.LogsCustomPipeline` resource defines a complete pipeline. The order of the pipelines is maintained in
// a different resource datadog_logs_pipeline_order.
// When creating a new pipeline, you need to **explicitly** add this pipeline to the `.LogsPipelineOrder` 
// resource to track the pipeline. Similarly, when a pipeline needs to be destroyed, remove its references from the 
// `.LogsPipelineOrder` resource.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-datadog/blob/master/website/docs/r/logs_custom_pipeline.html.markdown.
type LogsCustomPipeline struct {
	s *pulumi.ResourceState
}

// NewLogsCustomPipeline registers a new resource with the given unique name, arguments, and options.
func NewLogsCustomPipeline(ctx *pulumi.Context,
	name string, args *LogsCustomPipelineArgs, opts ...pulumi.ResourceOpt) (*LogsCustomPipeline, error) {
	if args == nil || args.Filters == nil {
		return nil, errors.New("missing required argument 'Filters'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["filters"] = nil
		inputs["isEnabled"] = nil
		inputs["name"] = nil
		inputs["processors"] = nil
	} else {
		inputs["filters"] = args.Filters
		inputs["isEnabled"] = args.IsEnabled
		inputs["name"] = args.Name
		inputs["processors"] = args.Processors
	}
	s, err := ctx.RegisterResource("datadog:index/logsCustomPipeline:LogsCustomPipeline", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogsCustomPipeline{s: s}, nil
}

// GetLogsCustomPipeline gets an existing LogsCustomPipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogsCustomPipeline(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LogsCustomPipelineState, opts ...pulumi.ResourceOpt) (*LogsCustomPipeline, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["filters"] = state.Filters
		inputs["isEnabled"] = state.IsEnabled
		inputs["name"] = state.Name
		inputs["processors"] = state.Processors
	}
	s, err := ctx.ReadResource("datadog:index/logsCustomPipeline:LogsCustomPipeline", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogsCustomPipeline{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LogsCustomPipeline) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LogsCustomPipeline) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Defines the nested pipeline filter. Only logs that match the filter criteria are processed by this pipeline.
func (r *LogsCustomPipeline) Filters() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["filters"])
}

// If the processor is enabled or not.
func (r *LogsCustomPipeline) IsEnabled() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["isEnabled"])
}

// Name of the processor
func (r *LogsCustomPipeline) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Processors. Nested pipeline can't take any other nested pipeline as its processor.
func (r *LogsCustomPipeline) Processors() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["processors"])
}

// Input properties used for looking up and filtering LogsCustomPipeline resources.
type LogsCustomPipelineState struct {
	// Defines the nested pipeline filter. Only logs that match the filter criteria are processed by this pipeline.
	Filters interface{}
	// If the processor is enabled or not.
	IsEnabled interface{}
	// Name of the processor
	Name interface{}
	// Processors. Nested pipeline can't take any other nested pipeline as its processor.
	Processors interface{}
}

// The set of arguments for constructing a LogsCustomPipeline resource.
type LogsCustomPipelineArgs struct {
	// Defines the nested pipeline filter. Only logs that match the filter criteria are processed by this pipeline.
	Filters interface{}
	// If the processor is enabled or not.
	IsEnabled interface{}
	// Name of the processor
	Name interface{}
	// Processors. Nested pipeline can't take any other nested pipeline as its processor.
	Processors interface{}
}
