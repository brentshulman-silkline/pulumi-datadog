// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides a Datadog screenboard resource. This can be used to create and manage Datadog screenboards.
//
// > **Note:** This resource is outdated. Use the new `Dashboard` resource instead.
//
// ## Import
//
// screenboards can be imported using their numeric ID, e.g.
//
// ```sh
//  $ pulumi import datadog:index/screenBoard:ScreenBoard my_service_screenboard 2081
// ```
type ScreenBoard struct {
	pulumi.CustomResourceState

	// Height of the screenboard
	Height pulumi.StringPtrOutput `pulumi:"height"`
	// The read-only status of the screenboard. Default is `false`.
	ReadOnly pulumi.BoolPtrOutput `pulumi:"readOnly"`
	// Whether the screenboard is shared or not
	Shared pulumi.BoolPtrOutput `pulumi:"shared"`
	// A list of template variables for using Dashboard templating.
	TemplateVariables ScreenBoardTemplateVariableArrayOutput `pulumi:"templateVariables"`
	// Name of the screenboard
	Title pulumi.StringOutput `pulumi:"title"`
	// A list of widget definitions.
	Widgets ScreenBoardWidgetArrayOutput `pulumi:"widgets"`
	// Width of the screenboard
	Width pulumi.StringPtrOutput `pulumi:"width"`
}

// NewScreenBoard registers a new resource with the given unique name, arguments, and options.
func NewScreenBoard(ctx *pulumi.Context,
	name string, args *ScreenBoardArgs, opts ...pulumi.ResourceOption) (*ScreenBoard, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Title == nil {
		return nil, errors.New("invalid value for required argument 'Title'")
	}
	if args.Widgets == nil {
		return nil, errors.New("invalid value for required argument 'Widgets'")
	}
	var resource ScreenBoard
	err := ctx.RegisterResource("datadog:index/screenBoard:ScreenBoard", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScreenBoard gets an existing ScreenBoard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScreenBoard(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScreenBoardState, opts ...pulumi.ResourceOption) (*ScreenBoard, error) {
	var resource ScreenBoard
	err := ctx.ReadResource("datadog:index/screenBoard:ScreenBoard", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScreenBoard resources.
type screenBoardState struct {
	// Height of the screenboard
	Height *string `pulumi:"height"`
	// The read-only status of the screenboard. Default is `false`.
	ReadOnly *bool `pulumi:"readOnly"`
	// Whether the screenboard is shared or not
	Shared *bool `pulumi:"shared"`
	// A list of template variables for using Dashboard templating.
	TemplateVariables []ScreenBoardTemplateVariable `pulumi:"templateVariables"`
	// Name of the screenboard
	Title *string `pulumi:"title"`
	// A list of widget definitions.
	Widgets []ScreenBoardWidget `pulumi:"widgets"`
	// Width of the screenboard
	Width *string `pulumi:"width"`
}

type ScreenBoardState struct {
	// Height of the screenboard
	Height pulumi.StringPtrInput
	// The read-only status of the screenboard. Default is `false`.
	ReadOnly pulumi.BoolPtrInput
	// Whether the screenboard is shared or not
	Shared pulumi.BoolPtrInput
	// A list of template variables for using Dashboard templating.
	TemplateVariables ScreenBoardTemplateVariableArrayInput
	// Name of the screenboard
	Title pulumi.StringPtrInput
	// A list of widget definitions.
	Widgets ScreenBoardWidgetArrayInput
	// Width of the screenboard
	Width pulumi.StringPtrInput
}

func (ScreenBoardState) ElementType() reflect.Type {
	return reflect.TypeOf((*screenBoardState)(nil)).Elem()
}

type screenBoardArgs struct {
	// Height of the screenboard
	Height *string `pulumi:"height"`
	// The read-only status of the screenboard. Default is `false`.
	ReadOnly *bool `pulumi:"readOnly"`
	// Whether the screenboard is shared or not
	Shared *bool `pulumi:"shared"`
	// A list of template variables for using Dashboard templating.
	TemplateVariables []ScreenBoardTemplateVariable `pulumi:"templateVariables"`
	// Name of the screenboard
	Title string `pulumi:"title"`
	// A list of widget definitions.
	Widgets []ScreenBoardWidget `pulumi:"widgets"`
	// Width of the screenboard
	Width *string `pulumi:"width"`
}

// The set of arguments for constructing a ScreenBoard resource.
type ScreenBoardArgs struct {
	// Height of the screenboard
	Height pulumi.StringPtrInput
	// The read-only status of the screenboard. Default is `false`.
	ReadOnly pulumi.BoolPtrInput
	// Whether the screenboard is shared or not
	Shared pulumi.BoolPtrInput
	// A list of template variables for using Dashboard templating.
	TemplateVariables ScreenBoardTemplateVariableArrayInput
	// Name of the screenboard
	Title pulumi.StringInput
	// A list of widget definitions.
	Widgets ScreenBoardWidgetArrayInput
	// Width of the screenboard
	Width pulumi.StringPtrInput
}

func (ScreenBoardArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*screenBoardArgs)(nil)).Elem()
}

type ScreenBoardInput interface {
	pulumi.Input

	ToScreenBoardOutput() ScreenBoardOutput
	ToScreenBoardOutputWithContext(ctx context.Context) ScreenBoardOutput
}

func (*ScreenBoard) ElementType() reflect.Type {
	return reflect.TypeOf((*ScreenBoard)(nil))
}

func (i *ScreenBoard) ToScreenBoardOutput() ScreenBoardOutput {
	return i.ToScreenBoardOutputWithContext(context.Background())
}

func (i *ScreenBoard) ToScreenBoardOutputWithContext(ctx context.Context) ScreenBoardOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScreenBoardOutput)
}

func (i *ScreenBoard) ToScreenBoardPtrOutput() ScreenBoardPtrOutput {
	return i.ToScreenBoardPtrOutputWithContext(context.Background())
}

func (i *ScreenBoard) ToScreenBoardPtrOutputWithContext(ctx context.Context) ScreenBoardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScreenBoardPtrOutput)
}

type ScreenBoardPtrInput interface {
	pulumi.Input

	ToScreenBoardPtrOutput() ScreenBoardPtrOutput
	ToScreenBoardPtrOutputWithContext(ctx context.Context) ScreenBoardPtrOutput
}

type screenBoardPtrType ScreenBoardArgs

func (*screenBoardPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ScreenBoard)(nil))
}

func (i *screenBoardPtrType) ToScreenBoardPtrOutput() ScreenBoardPtrOutput {
	return i.ToScreenBoardPtrOutputWithContext(context.Background())
}

func (i *screenBoardPtrType) ToScreenBoardPtrOutputWithContext(ctx context.Context) ScreenBoardPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScreenBoardPtrOutput)
}

// ScreenBoardArrayInput is an input type that accepts ScreenBoardArray and ScreenBoardArrayOutput values.
// You can construct a concrete instance of `ScreenBoardArrayInput` via:
//
//          ScreenBoardArray{ ScreenBoardArgs{...} }
type ScreenBoardArrayInput interface {
	pulumi.Input

	ToScreenBoardArrayOutput() ScreenBoardArrayOutput
	ToScreenBoardArrayOutputWithContext(context.Context) ScreenBoardArrayOutput
}

type ScreenBoardArray []ScreenBoardInput

func (ScreenBoardArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*ScreenBoard)(nil))
}

func (i ScreenBoardArray) ToScreenBoardArrayOutput() ScreenBoardArrayOutput {
	return i.ToScreenBoardArrayOutputWithContext(context.Background())
}

func (i ScreenBoardArray) ToScreenBoardArrayOutputWithContext(ctx context.Context) ScreenBoardArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScreenBoardArrayOutput)
}

// ScreenBoardMapInput is an input type that accepts ScreenBoardMap and ScreenBoardMapOutput values.
// You can construct a concrete instance of `ScreenBoardMapInput` via:
//
//          ScreenBoardMap{ "key": ScreenBoardArgs{...} }
type ScreenBoardMapInput interface {
	pulumi.Input

	ToScreenBoardMapOutput() ScreenBoardMapOutput
	ToScreenBoardMapOutputWithContext(context.Context) ScreenBoardMapOutput
}

type ScreenBoardMap map[string]ScreenBoardInput

func (ScreenBoardMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*ScreenBoard)(nil))
}

func (i ScreenBoardMap) ToScreenBoardMapOutput() ScreenBoardMapOutput {
	return i.ToScreenBoardMapOutputWithContext(context.Background())
}

func (i ScreenBoardMap) ToScreenBoardMapOutputWithContext(ctx context.Context) ScreenBoardMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScreenBoardMapOutput)
}

type ScreenBoardOutput struct {
	*pulumi.OutputState
}

func (ScreenBoardOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ScreenBoard)(nil))
}

func (o ScreenBoardOutput) ToScreenBoardOutput() ScreenBoardOutput {
	return o
}

func (o ScreenBoardOutput) ToScreenBoardOutputWithContext(ctx context.Context) ScreenBoardOutput {
	return o
}

func (o ScreenBoardOutput) ToScreenBoardPtrOutput() ScreenBoardPtrOutput {
	return o.ToScreenBoardPtrOutputWithContext(context.Background())
}

func (o ScreenBoardOutput) ToScreenBoardPtrOutputWithContext(ctx context.Context) ScreenBoardPtrOutput {
	return o.ApplyT(func(v ScreenBoard) *ScreenBoard {
		return &v
	}).(ScreenBoardPtrOutput)
}

type ScreenBoardPtrOutput struct {
	*pulumi.OutputState
}

func (ScreenBoardPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScreenBoard)(nil))
}

func (o ScreenBoardPtrOutput) ToScreenBoardPtrOutput() ScreenBoardPtrOutput {
	return o
}

func (o ScreenBoardPtrOutput) ToScreenBoardPtrOutputWithContext(ctx context.Context) ScreenBoardPtrOutput {
	return o
}

type ScreenBoardArrayOutput struct{ *pulumi.OutputState }

func (ScreenBoardArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ScreenBoard)(nil))
}

func (o ScreenBoardArrayOutput) ToScreenBoardArrayOutput() ScreenBoardArrayOutput {
	return o
}

func (o ScreenBoardArrayOutput) ToScreenBoardArrayOutputWithContext(ctx context.Context) ScreenBoardArrayOutput {
	return o
}

func (o ScreenBoardArrayOutput) Index(i pulumi.IntInput) ScreenBoardOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ScreenBoard {
		return vs[0].([]ScreenBoard)[vs[1].(int)]
	}).(ScreenBoardOutput)
}

type ScreenBoardMapOutput struct{ *pulumi.OutputState }

func (ScreenBoardMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ScreenBoard)(nil))
}

func (o ScreenBoardMapOutput) ToScreenBoardMapOutput() ScreenBoardMapOutput {
	return o
}

func (o ScreenBoardMapOutput) ToScreenBoardMapOutputWithContext(ctx context.Context) ScreenBoardMapOutput {
	return o
}

func (o ScreenBoardMapOutput) MapIndex(k pulumi.StringInput) ScreenBoardOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ScreenBoard {
		return vs[0].(map[string]ScreenBoard)[vs[1].(string)]
	}).(ScreenBoardOutput)
}

func init() {
	pulumi.RegisterOutputType(ScreenBoardOutput{})
	pulumi.RegisterOutputType(ScreenBoardPtrOutput{})
	pulumi.RegisterOutputType(ScreenBoardArrayOutput{})
	pulumi.RegisterOutputType(ScreenBoardMapOutput{})
}
