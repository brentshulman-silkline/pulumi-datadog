// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Datadog [Logs Index API](https://docs.datadoghq.com/api/?lang=python#logs-indexes) resource. This can be used to create and manage Datadog logs indexes.
// 
// ## Important Notes
// 
// The order of indexes is maintained in the separated resource datadog_logs_index_order. 
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-datadog/blob/master/website/docs/r/logs_index.html.markdown.
type LogsIndex struct {
	s *pulumi.ResourceState
}

// NewLogsIndex registers a new resource with the given unique name, arguments, and options.
func NewLogsIndex(ctx *pulumi.Context,
	name string, args *LogsIndexArgs, opts ...pulumi.ResourceOpt) (*LogsIndex, error) {
	if args == nil || args.Filters == nil {
		return nil, errors.New("missing required argument 'Filters'")
	}
	if args == nil || args.Name == nil {
		return nil, errors.New("missing required argument 'Name'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["exclusionFilters"] = nil
		inputs["filters"] = nil
		inputs["name"] = nil
	} else {
		inputs["exclusionFilters"] = args.ExclusionFilters
		inputs["filters"] = args.Filters
		inputs["name"] = args.Name
	}
	s, err := ctx.RegisterResource("datadog:index/logsIndex:LogsIndex", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogsIndex{s: s}, nil
}

// GetLogsIndex gets an existing LogsIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogsIndex(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LogsIndexState, opts ...pulumi.ResourceOpt) (*LogsIndex, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["exclusionFilters"] = state.ExclusionFilters
		inputs["filters"] = state.Filters
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("datadog:index/logsIndex:LogsIndex", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogsIndex{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LogsIndex) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LogsIndex) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// List of exclusion filters.
func (r *LogsIndex) ExclusionFilters() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["exclusionFilters"])
}

func (r *LogsIndex) Filters() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["filters"])
}

// The name of the exclusion filter.
func (r *LogsIndex) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering LogsIndex resources.
type LogsIndexState struct {
	// List of exclusion filters.
	ExclusionFilters interface{}
	Filters interface{}
	// The name of the exclusion filter.
	Name interface{}
}

// The set of arguments for constructing a LogsIndex resource.
type LogsIndexArgs struct {
	// List of exclusion filters.
	ExclusionFilters interface{}
	Filters interface{}
	// The name of the exclusion filter.
	Name interface{}
}
