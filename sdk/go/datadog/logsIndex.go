// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// ## Import
//
// ```sh
//  $ pulumi import datadog:index/logsIndex:LogsIndex The current Datadog Terraform provider version does not support the creation and deletion of indexes. To manage the existing indexes, do `<datadog_logs_index.name> <indexName>` to import them to Terraform. If you create a resource which does not match the name of any existing index, `terraform apply` will throw `Not Found` error code.
// ```
type LogsIndex struct {
	pulumi.CustomResourceState

	// List of exclusion filters.
	ExclusionFilters LogsIndexExclusionFilterArrayOutput `pulumi:"exclusionFilters"`
	// Logs filter
	Filters LogsIndexFilterArrayOutput `pulumi:"filters"`
	// The name of the index.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewLogsIndex registers a new resource with the given unique name, arguments, and options.
func NewLogsIndex(ctx *pulumi.Context,
	name string, args *LogsIndexArgs, opts ...pulumi.ResourceOption) (*LogsIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Filters == nil {
		return nil, errors.New("invalid value for required argument 'Filters'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	var resource LogsIndex
	err := ctx.RegisterResource("datadog:index/logsIndex:LogsIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogsIndex gets an existing LogsIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogsIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogsIndexState, opts ...pulumi.ResourceOption) (*LogsIndex, error) {
	var resource LogsIndex
	err := ctx.ReadResource("datadog:index/logsIndex:LogsIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogsIndex resources.
type logsIndexState struct {
	// List of exclusion filters.
	ExclusionFilters []LogsIndexExclusionFilter `pulumi:"exclusionFilters"`
	// Logs filter
	Filters []LogsIndexFilter `pulumi:"filters"`
	// The name of the index.
	Name *string `pulumi:"name"`
}

type LogsIndexState struct {
	// List of exclusion filters.
	ExclusionFilters LogsIndexExclusionFilterArrayInput
	// Logs filter
	Filters LogsIndexFilterArrayInput
	// The name of the index.
	Name pulumi.StringPtrInput
}

func (LogsIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*logsIndexState)(nil)).Elem()
}

type logsIndexArgs struct {
	// List of exclusion filters.
	ExclusionFilters []LogsIndexExclusionFilter `pulumi:"exclusionFilters"`
	// Logs filter
	Filters []LogsIndexFilter `pulumi:"filters"`
	// The name of the index.
	Name string `pulumi:"name"`
}

// The set of arguments for constructing a LogsIndex resource.
type LogsIndexArgs struct {
	// List of exclusion filters.
	ExclusionFilters LogsIndexExclusionFilterArrayInput
	// Logs filter
	Filters LogsIndexFilterArrayInput
	// The name of the index.
	Name pulumi.StringInput
}

func (LogsIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logsIndexArgs)(nil)).Elem()
}

type LogsIndexInput interface {
	pulumi.Input

	ToLogsIndexOutput() LogsIndexOutput
	ToLogsIndexOutputWithContext(ctx context.Context) LogsIndexOutput
}

func (*LogsIndex) ElementType() reflect.Type {
	return reflect.TypeOf((*LogsIndex)(nil))
}

func (i *LogsIndex) ToLogsIndexOutput() LogsIndexOutput {
	return i.ToLogsIndexOutputWithContext(context.Background())
}

func (i *LogsIndex) ToLogsIndexOutputWithContext(ctx context.Context) LogsIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogsIndexOutput)
}

type LogsIndexOutput struct {
	*pulumi.OutputState
}

func (LogsIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogsIndex)(nil))
}

func (o LogsIndexOutput) ToLogsIndexOutput() LogsIndexOutput {
	return o
}

func (o LogsIndexOutput) ToLogsIndexOutputWithContext(ctx context.Context) LogsIndexOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(LogsIndexOutput{})
}
