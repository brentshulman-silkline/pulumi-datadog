// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Datadog dashboard resource. This can be used to create and manage Datadog dashboards.
// 
// > **Note:** This resource uses the new [Dashboard API](https://docs.datadoghq.com/api/#dashboards) which adds new features like better validation and support for the [Group widget](https://docs.datadoghq.com/graphing/widgets/group/). Additionally, this resource unifies `.TimeBoard` and `.ScreenBoard` resources to allow you to manage all of your dashboards using a single format.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-datadog/blob/master/website/docs/r/dashboard.html.markdown.
type Dashboard struct {
	s *pulumi.ResourceState
}

// NewDashboard registers a new resource with the given unique name, arguments, and options.
func NewDashboard(ctx *pulumi.Context,
	name string, args *DashboardArgs, opts ...pulumi.ResourceOpt) (*Dashboard, error) {
	if args == nil || args.LayoutType == nil {
		return nil, errors.New("missing required argument 'LayoutType'")
	}
	if args == nil || args.Title == nil {
		return nil, errors.New("missing required argument 'Title'")
	}
	if args == nil || args.Widgets == nil {
		return nil, errors.New("missing required argument 'Widgets'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["isReadOnly"] = nil
		inputs["layoutType"] = nil
		inputs["notifyLists"] = nil
		inputs["templateVariables"] = nil
		inputs["title"] = nil
		inputs["widgets"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["isReadOnly"] = args.IsReadOnly
		inputs["layoutType"] = args.LayoutType
		inputs["notifyLists"] = args.NotifyLists
		inputs["templateVariables"] = args.TemplateVariables
		inputs["title"] = args.Title
		inputs["widgets"] = args.Widgets
	}
	s, err := ctx.RegisterResource("datadog:index/dashboard:Dashboard", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Dashboard{s: s}, nil
}

// GetDashboard gets an existing Dashboard resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDashboard(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DashboardState, opts ...pulumi.ResourceOpt) (*Dashboard, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["isReadOnly"] = state.IsReadOnly
		inputs["layoutType"] = state.LayoutType
		inputs["notifyLists"] = state.NotifyLists
		inputs["templateVariables"] = state.TemplateVariables
		inputs["title"] = state.Title
		inputs["widgets"] = state.Widgets
	}
	s, err := ctx.ReadResource("datadog:index/dashboard:Dashboard", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Dashboard{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Dashboard) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Dashboard) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The description of the dashboard.
func (r *Dashboard) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

// Whether this dashboard is read-only.
func (r *Dashboard) IsReadOnly() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["isReadOnly"])
}

// The layout type of the dashboard, either 'free' or 'ordered'.
func (r *Dashboard) LayoutType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["layoutType"])
}

// The list of handles of users to notify when changes are made to this dashboard.
func (r *Dashboard) NotifyLists() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["notifyLists"])
}

// The list of template variables for this dashboard.
func (r *Dashboard) TemplateVariables() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["templateVariables"])
}

// The title of the dashboard.
func (r *Dashboard) Title() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["title"])
}

// The list of widgets to display on the dashboard.
func (r *Dashboard) Widgets() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["widgets"])
}

// Input properties used for looking up and filtering Dashboard resources.
type DashboardState struct {
	// The description of the dashboard.
	Description interface{}
	// Whether this dashboard is read-only.
	IsReadOnly interface{}
	// The layout type of the dashboard, either 'free' or 'ordered'.
	LayoutType interface{}
	// The list of handles of users to notify when changes are made to this dashboard.
	NotifyLists interface{}
	// The list of template variables for this dashboard.
	TemplateVariables interface{}
	// The title of the dashboard.
	Title interface{}
	// The list of widgets to display on the dashboard.
	Widgets interface{}
}

// The set of arguments for constructing a Dashboard resource.
type DashboardArgs struct {
	// The description of the dashboard.
	Description interface{}
	// Whether this dashboard is read-only.
	IsReadOnly interface{}
	// The layout type of the dashboard, either 'free' or 'ordered'.
	LayoutType interface{}
	// The list of handles of users to notify when changes are made to this dashboard.
	NotifyLists interface{}
	// The list of template variables for this dashboard.
	TemplateVariables interface{}
	// The title of the dashboard.
	Title interface{}
	// The list of widgets to display on the dashboard.
	Widgets interface{}
}
