// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Datadog [Logs Pipeline API](https://docs.datadoghq.com/api/?lang=python#logs-pipelines) resource to manage
// the [integrations](https://docs.datadoghq.com/logs/log_collection/?tab=tcpussite).
// 
// Integration pipelines are the pipelines that are automatically installed for your organization when sending the logs with 
// specific sources. You don't need to maintain or update these types of pipelines. Keeping them as resources, however, 
// allows you to manage the order of your pipelines by referencing them in your 
// .LogsPipelineOrder resource. If you don't need the
// `pipelineOrder` feature, this resource declaration can be omitted.
//
// > This content is derived from https://github.com/terraform-providers/terraform-provider-datadog/blob/master/website/docs/r/logs_integration_pipeline.html.markdown.
type LogsIntegrationPipeline struct {
	s *pulumi.ResourceState
}

// NewLogsIntegrationPipeline registers a new resource with the given unique name, arguments, and options.
func NewLogsIntegrationPipeline(ctx *pulumi.Context,
	name string, args *LogsIntegrationPipelineArgs, opts ...pulumi.ResourceOpt) (*LogsIntegrationPipeline, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["isEnabled"] = nil
	} else {
		inputs["isEnabled"] = args.IsEnabled
	}
	s, err := ctx.RegisterResource("datadog:index/logsIntegrationPipeline:LogsIntegrationPipeline", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogsIntegrationPipeline{s: s}, nil
}

// GetLogsIntegrationPipeline gets an existing LogsIntegrationPipeline resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogsIntegrationPipeline(ctx *pulumi.Context,
	name string, id pulumi.ID, state *LogsIntegrationPipelineState, opts ...pulumi.ResourceOpt) (*LogsIntegrationPipeline, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["isEnabled"] = state.IsEnabled
	}
	s, err := ctx.ReadResource("datadog:index/logsIntegrationPipeline:LogsIntegrationPipeline", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &LogsIntegrationPipeline{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *LogsIntegrationPipeline) URN() pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *LogsIntegrationPipeline) ID() pulumi.IDOutput {
	return r.s.ID()
}

// Boolean value to enable your pipeline.
func (r *LogsIntegrationPipeline) IsEnabled() pulumi.BoolOutput {
	return (pulumi.BoolOutput)(r.s.State["isEnabled"])
}

// Input properties used for looking up and filtering LogsIntegrationPipeline resources.
type LogsIntegrationPipelineState struct {
	// Boolean value to enable your pipeline.
	IsEnabled interface{}
}

// The set of arguments for constructing a LogsIntegrationPipeline resource.
type LogsIntegrationPipelineArgs struct {
	// Boolean value to enable your pipeline.
	IsEnabled interface{}
}
