// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Datadog synthetics test resource. This can be used to create and manage Datadog synthetics test.
//
// ## Example Usage
// ### Synthetics API Test)
//
// Create a new Datadog Synthetics API/HTTP test on https://www.example.org
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewSyntheticsTest(ctx, "testApi", &datadog.SyntheticsTestArgs{
// 			Assertions: pulumi.StringMapArray{
// 				pulumi.StringMap{
// 					"operator": pulumi.String("is"),
// 					"target":   pulumi.String("200"),
// 					"type":     pulumi.String("statusCode"),
// 				},
// 			},
// 			Locations: pulumi.StringArray{
// 				pulumi.String("aws:eu-central-1"),
// 			},
// 			Message: pulumi.String("Notify @pagerduty"),
// 			Name:    pulumi.String("An API test on example.org"),
// 			OptionsList: &datadog.SyntheticsTestOptionsListArgs{
// 				MonitorOptions: &datadog.SyntheticsTestOptionsListMonitorOptionsArgs{
// 					RenotifyInterval: pulumi.Int(100),
// 				},
// 				Retry: &datadog.SyntheticsTestOptionsListRetryArgs{
// 					Count:    pulumi.Int(2),
// 					Interval: pulumi.Int(300),
// 				},
// 				TickEvery: pulumi.Int(900),
// 			},
// 			Request: &datadog.SyntheticsTestRequestArgs{
// 				Method: pulumi.String("GET"),
// 				Url:    pulumi.String("https://www.example.org"),
// 			},
// 			RequestHeaders: pulumi.StringMap{
// 				"Authentication": pulumi.String("Token: 1234566789"),
// 				"Content-Type":   pulumi.String("application/json"),
// 			},
// 			Status:  pulumi.String("live"),
// 			Subtype: pulumi.String("http"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("foo:bar"),
// 				pulumi.String("foo"),
// 				pulumi.String("env:test"),
// 			},
// 			Type: pulumi.String("api"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Synthetics SSL Test)
//
// Create a new Datadog Synthetics API/SSL test on example.org
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewSyntheticsTest(ctx, "testSsl", &datadog.SyntheticsTestArgs{
// 			Assertions: pulumi.MapArray{
// 				pulumi.Map{
// 					"operator": pulumi.String("isInMoreThan"),
// 					"target":   pulumi.Float64(30),
// 					"type":     pulumi.String("certificate"),
// 				},
// 			},
// 			Locations: pulumi.StringArray{
// 				pulumi.String("aws:eu-central-1"),
// 			},
// 			Message: pulumi.String("Notify @pagerduty"),
// 			Name:    pulumi.String("An API test on example.org"),
// 			OptionsList: &datadog.SyntheticsTestOptionsListArgs{
// 				AcceptSelfSigned: pulumi.Bool(true),
// 				TickEvery:        pulumi.Int(900),
// 			},
// 			Request: &datadog.SyntheticsTestRequestArgs{
// 				Host: pulumi.String("example.org"),
// 				Port: pulumi.Int(443),
// 			},
// 			Status:  pulumi.String("live"),
// 			Subtype: pulumi.String("ssl"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("foo:bar"),
// 				pulumi.String("foo"),
// 				pulumi.String("env:test"),
// 			},
// 			Type: pulumi.String("api"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Synthetics TCP Test)
//
// Create a new Datadog Synthetics API/TCP test on example.org
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewSyntheticsTest(ctx, "testTcp", &datadog.SyntheticsTestArgs{
// 			Assertions: pulumi.MapArray{
// 				pulumi.Map{
// 					"operator": pulumi.String("lessThan"),
// 					"target":   pulumi.Float64(2000),
// 					"type":     pulumi.String("responseTime"),
// 				},
// 			},
// 			Locations: pulumi.StringArray{
// 				pulumi.String("aws:eu-central-1"),
// 			},
// 			Message: pulumi.String("Notify @pagerduty"),
// 			Name:    pulumi.String("An API test on example.org"),
// 			OptionsList: &datadog.SyntheticsTestOptionsListArgs{
// 				TickEvery: pulumi.Int(900),
// 			},
// 			Request: &datadog.SyntheticsTestRequestArgs{
// 				Host: pulumi.String("example.org"),
// 				Port: pulumi.Int(443),
// 			},
// 			Status:  pulumi.String("live"),
// 			Subtype: pulumi.String("tcp"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("foo:bar"),
// 				pulumi.String("foo"),
// 				pulumi.String("env:test"),
// 			},
// 			Type: pulumi.String("api"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Synthetics DNS Test)
//
// Create a new Datadog Synthetics API/DNS test on example.org
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewSyntheticsTest(ctx, "testDns", &datadog.SyntheticsTestArgs{
// 			Assertions: pulumi.StringMapArray{
// 				pulumi.StringMap{
// 					"operator": pulumi.String("is"),
// 					"property": pulumi.String("A"),
// 					"target":   pulumi.String("0.0.0.0"),
// 					"type":     pulumi.String("recordSome"),
// 				},
// 			},
// 			Locations: pulumi.StringArray{
// 				pulumi.String("aws:eu-central-1"),
// 			},
// 			Message: pulumi.String("Notify @pagerduty"),
// 			Name:    pulumi.String("An API test on example.org"),
// 			OptionsList: &datadog.SyntheticsTestOptionsListArgs{
// 				TickEvery: pulumi.Int(900),
// 			},
// 			Request: &datadog.SyntheticsTestRequestArgs{
// 				Host: pulumi.String("example.org"),
// 			},
// 			Status:  pulumi.String("live"),
// 			Subtype: pulumi.String("dns"),
// 			Tags: pulumi.StringArray{
// 				pulumi.String("foo:bar"),
// 				pulumi.String("foo"),
// 				pulumi.String("env:test"),
// 			},
// 			Type: pulumi.String("api"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ## Synthetics Browser test
//
// Support for Synthetics Browser test is limited when creating steps. Some steps types (like steps involving elements) cannot be created, but they can be imported.
//
// ## Assertion format
//
// The resource was changed to have assertions be a list of `assertion` blocks instead of single `assertions` array, to support the JSON path operations. We'll remove `assertions` support in the future: to migrate, rename your attribute to `assertion` and turn array elements into independent blocks. For example:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewSyntheticsTest(ctx, "testApi", &datadog.SyntheticsTestArgs{
// 			Assertions: pulumi.StringMapArray{
// 				pulumi.StringMap{
// 					"operator": pulumi.String("is"),
// 					"target":   pulumi.String("200"),
// 					"type":     pulumi.String("statusCode"),
// 				},
// 				pulumi.StringMap{
// 					"operator": pulumi.String("lessThan"),
// 					"target":   pulumi.String("1000"),
// 					"type":     pulumi.String("responseTime"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// turns into:
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewSyntheticsTest(ctx, "testApi", &datadog.SyntheticsTestArgs{
// 			Assertions: pulumi.StringMapArray{
// 				pulumi.StringMap{
// 					"operator": pulumi.String("is"),
// 					"target":   pulumi.String("200"),
// 					"type":     pulumi.String("statusCode"),
// 				},
// 				pulumi.StringMap{
// 					"operator": pulumi.String("lessThan"),
// 					"target":   pulumi.String("1000"),
// 					"type":     pulumi.String("responseTime"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Synthetics tests can be imported using their public string ID, e.g.
//
// ```sh
//  $ pulumi import datadog:index/syntheticsTest:SyntheticsTest fizz abc-123-xyz
// ```
type SyntheticsTest struct {
	pulumi.CustomResourceState

	// List of assertions.
	//
	// Deprecated: Use assertion instead
	Assertions pulumi.MapArrayOutput `pulumi:"assertions"`
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables SyntheticsTestBrowserVariableArrayOutput `pulumi:"browserVariables"`
	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	ConfigVariables SyntheticsTestConfigVariableArrayOutput `pulumi:"configVariables"`
	// Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
	// (only available for `browser` tests).
	DeviceIds pulumi.StringArrayOutput `pulumi:"deviceIds"`
	// Array of locations used to run the test. Refer to [Datadog
	// documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
	// `aws:eu-central-1`).
	Locations pulumi.StringArrayOutput `pulumi:"locations"`
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
	// using the same `@username` notation as events.
	Message pulumi.StringPtrOutput `pulumi:"message"`
	// ID of the monitor associated with the Datadog synthetics test.
	MonitorId pulumi.IntOutput `pulumi:"monitorId"`
	// Name of Datadog synthetics test.
	Name pulumi.StringOutput `pulumi:"name"`
	// Deprecated: This parameter is deprecated, please use `options_list`
	Options     SyntheticsTestOptionsPtrOutput     `pulumi:"options"`
	OptionsList SyntheticsTestOptionsListPtrOutput `pulumi:"optionsList"`
	// The synthetics test request. Required if `type = "api"` and `subtype = "http"`.
	Request SyntheticsTestRequestOutput `pulumi:"request"`
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth SyntheticsTestRequestBasicauthPtrOutput `pulumi:"requestBasicauth"`
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
	// below.
	RequestClientCertificate SyntheticsTestRequestClientCertificatePtrOutput `pulumi:"requestClientCertificate"`
	// Header name and value map.
	RequestHeaders pulumi.MapOutput `pulumi:"requestHeaders"`
	// Query arguments name and value map.
	RequestQuery pulumi.MapOutput `pulumi:"requestQuery"`
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
	Status pulumi.StringOutput `pulumi:"status"`
	// Steps for browser tests.
	Steps SyntheticsTestStepArrayOutput `pulumi:"steps"`
	// When `type` is `api`, choose from `http`, `ssl`, `tcp` or `dns`. Defaults to `http`.
	Subtype pulumi.StringPtrOutput `pulumi:"subtype"`
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
	// synthetics page of the UI. Default is an empty list (`[]`).
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
	// Synthetics test type (`api` or `browser`).
	Type pulumi.StringOutput `pulumi:"type"`
	// Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
	//
	// Deprecated: This parameter is deprecated, please use `browser_variable`
	Variables SyntheticsTestVariableArrayOutput `pulumi:"variables"`
}

// NewSyntheticsTest registers a new resource with the given unique name, arguments, and options.
func NewSyntheticsTest(ctx *pulumi.Context,
	name string, args *SyntheticsTestArgs, opts ...pulumi.ResourceOption) (*SyntheticsTest, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Locations == nil {
		return nil, errors.New("invalid value for required argument 'Locations'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Request == nil {
		return nil, errors.New("invalid value for required argument 'Request'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	var resource SyntheticsTest
	err := ctx.RegisterResource("datadog:index/syntheticsTest:SyntheticsTest", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSyntheticsTest gets an existing SyntheticsTest resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSyntheticsTest(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SyntheticsTestState, opts ...pulumi.ResourceOption) (*SyntheticsTest, error) {
	var resource SyntheticsTest
	err := ctx.ReadResource("datadog:index/syntheticsTest:SyntheticsTest", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SyntheticsTest resources.
type syntheticsTestState struct {
	// List of assertions.
	//
	// Deprecated: Use assertion instead
	Assertions []map[string]interface{} `pulumi:"assertions"`
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables []SyntheticsTestBrowserVariable `pulumi:"browserVariables"`
	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	ConfigVariables []SyntheticsTestConfigVariable `pulumi:"configVariables"`
	// Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
	// (only available for `browser` tests).
	DeviceIds []string `pulumi:"deviceIds"`
	// Array of locations used to run the test. Refer to [Datadog
	// documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
	// `aws:eu-central-1`).
	Locations []string `pulumi:"locations"`
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
	// using the same `@username` notation as events.
	Message *string `pulumi:"message"`
	// ID of the monitor associated with the Datadog synthetics test.
	MonitorId *int `pulumi:"monitorId"`
	// Name of Datadog synthetics test.
	Name *string `pulumi:"name"`
	// Deprecated: This parameter is deprecated, please use `options_list`
	Options     *SyntheticsTestOptions     `pulumi:"options"`
	OptionsList *SyntheticsTestOptionsList `pulumi:"optionsList"`
	// The synthetics test request. Required if `type = "api"` and `subtype = "http"`.
	Request *SyntheticsTestRequest `pulumi:"request"`
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth *SyntheticsTestRequestBasicauth `pulumi:"requestBasicauth"`
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
	// below.
	RequestClientCertificate *SyntheticsTestRequestClientCertificate `pulumi:"requestClientCertificate"`
	// Header name and value map.
	RequestHeaders map[string]interface{} `pulumi:"requestHeaders"`
	// Query arguments name and value map.
	RequestQuery map[string]interface{} `pulumi:"requestQuery"`
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
	Status *string `pulumi:"status"`
	// Steps for browser tests.
	Steps []SyntheticsTestStep `pulumi:"steps"`
	// When `type` is `api`, choose from `http`, `ssl`, `tcp` or `dns`. Defaults to `http`.
	Subtype *string `pulumi:"subtype"`
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
	// synthetics page of the UI. Default is an empty list (`[]`).
	Tags []string `pulumi:"tags"`
	// Synthetics test type (`api` or `browser`).
	Type *string `pulumi:"type"`
	// Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
	//
	// Deprecated: This parameter is deprecated, please use `browser_variable`
	Variables []SyntheticsTestVariable `pulumi:"variables"`
}

type SyntheticsTestState struct {
	// List of assertions.
	//
	// Deprecated: Use assertion instead
	Assertions pulumi.MapArrayInput
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables SyntheticsTestBrowserVariableArrayInput
	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	ConfigVariables SyntheticsTestConfigVariableArrayInput
	// Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
	// (only available for `browser` tests).
	DeviceIds pulumi.StringArrayInput
	// Array of locations used to run the test. Refer to [Datadog
	// documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
	// `aws:eu-central-1`).
	Locations pulumi.StringArrayInput
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
	// using the same `@username` notation as events.
	Message pulumi.StringPtrInput
	// ID of the monitor associated with the Datadog synthetics test.
	MonitorId pulumi.IntPtrInput
	// Name of Datadog synthetics test.
	Name pulumi.StringPtrInput
	// Deprecated: This parameter is deprecated, please use `options_list`
	Options     SyntheticsTestOptionsPtrInput
	OptionsList SyntheticsTestOptionsListPtrInput
	// The synthetics test request. Required if `type = "api"` and `subtype = "http"`.
	Request SyntheticsTestRequestPtrInput
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth SyntheticsTestRequestBasicauthPtrInput
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
	// below.
	RequestClientCertificate SyntheticsTestRequestClientCertificatePtrInput
	// Header name and value map.
	RequestHeaders pulumi.MapInput
	// Query arguments name and value map.
	RequestQuery pulumi.MapInput
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
	Status pulumi.StringPtrInput
	// Steps for browser tests.
	Steps SyntheticsTestStepArrayInput
	// When `type` is `api`, choose from `http`, `ssl`, `tcp` or `dns`. Defaults to `http`.
	Subtype pulumi.StringPtrInput
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
	// synthetics page of the UI. Default is an empty list (`[]`).
	Tags pulumi.StringArrayInput
	// Synthetics test type (`api` or `browser`).
	Type pulumi.StringPtrInput
	// Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
	//
	// Deprecated: This parameter is deprecated, please use `browser_variable`
	Variables SyntheticsTestVariableArrayInput
}

func (SyntheticsTestState) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticsTestState)(nil)).Elem()
}

type syntheticsTestArgs struct {
	// List of assertions.
	//
	// Deprecated: Use assertion instead
	Assertions []map[string]interface{} `pulumi:"assertions"`
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables []SyntheticsTestBrowserVariable `pulumi:"browserVariables"`
	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	ConfigVariables []SyntheticsTestConfigVariable `pulumi:"configVariables"`
	// Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
	// (only available for `browser` tests).
	DeviceIds []string `pulumi:"deviceIds"`
	// Array of locations used to run the test. Refer to [Datadog
	// documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
	// `aws:eu-central-1`).
	Locations []string `pulumi:"locations"`
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
	// using the same `@username` notation as events.
	Message *string `pulumi:"message"`
	// Name of Datadog synthetics test.
	Name string `pulumi:"name"`
	// Deprecated: This parameter is deprecated, please use `options_list`
	Options     *SyntheticsTestOptions     `pulumi:"options"`
	OptionsList *SyntheticsTestOptionsList `pulumi:"optionsList"`
	// The synthetics test request. Required if `type = "api"` and `subtype = "http"`.
	Request SyntheticsTestRequest `pulumi:"request"`
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth *SyntheticsTestRequestBasicauth `pulumi:"requestBasicauth"`
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
	// below.
	RequestClientCertificate *SyntheticsTestRequestClientCertificate `pulumi:"requestClientCertificate"`
	// Header name and value map.
	RequestHeaders map[string]interface{} `pulumi:"requestHeaders"`
	// Query arguments name and value map.
	RequestQuery map[string]interface{} `pulumi:"requestQuery"`
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
	Status string `pulumi:"status"`
	// Steps for browser tests.
	Steps []SyntheticsTestStep `pulumi:"steps"`
	// When `type` is `api`, choose from `http`, `ssl`, `tcp` or `dns`. Defaults to `http`.
	Subtype *string `pulumi:"subtype"`
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
	// synthetics page of the UI. Default is an empty list (`[]`).
	Tags []string `pulumi:"tags"`
	// Synthetics test type (`api` or `browser`).
	Type string `pulumi:"type"`
	// Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
	//
	// Deprecated: This parameter is deprecated, please use `browser_variable`
	Variables []SyntheticsTestVariable `pulumi:"variables"`
}

// The set of arguments for constructing a SyntheticsTest resource.
type SyntheticsTestArgs struct {
	// List of assertions.
	//
	// Deprecated: Use assertion instead
	Assertions pulumi.MapArrayInput
	// Variables used for a browser test steps. Multiple `variable` blocks are allowed with the structure below.
	BrowserVariables SyntheticsTestBrowserVariableArrayInput
	// Variables used for the test configuration. Multiple `config_variable` blocks are allowed with the structure below.
	ConfigVariables SyntheticsTestConfigVariableArrayInput
	// Array with the different device IDs used to run the test. Allowed enum values: `laptop_large`, `tablet`, `mobile_small`
	// (only available for `browser` tests).
	DeviceIds pulumi.StringArrayInput
	// Array of locations used to run the test. Refer to [Datadog
	// documentation](https://docs.datadoghq.com/synthetics/api_test/#request) for available locations (e.g.
	// `aws:eu-central-1`).
	Locations pulumi.StringArrayInput
	// A message to include with notifications for this synthetics test. Email notifications can be sent to specific users by
	// using the same `@username` notation as events.
	Message pulumi.StringPtrInput
	// Name of Datadog synthetics test.
	Name pulumi.StringInput
	// Deprecated: This parameter is deprecated, please use `options_list`
	Options     SyntheticsTestOptionsPtrInput
	OptionsList SyntheticsTestOptionsListPtrInput
	// The synthetics test request. Required if `type = "api"` and `subtype = "http"`.
	Request SyntheticsTestRequestInput
	// The HTTP basic authentication credentials. Exactly one nested block is allowed with the structure below.
	RequestBasicauth SyntheticsTestRequestBasicauthPtrInput
	// Client certificate to use when performing the test request. Exactly one nested block is allowed with the structure
	// below.
	RequestClientCertificate SyntheticsTestRequestClientCertificatePtrInput
	// Header name and value map.
	RequestHeaders pulumi.MapInput
	// Query arguments name and value map.
	RequestQuery pulumi.MapInput
	// Define whether you want to start (`live`) or pause (`paused`) a Synthetic test. Allowed enum values: `live`, `paused`
	Status pulumi.StringInput
	// Steps for browser tests.
	Steps SyntheticsTestStepArrayInput
	// When `type` is `api`, choose from `http`, `ssl`, `tcp` or `dns`. Defaults to `http`.
	Subtype pulumi.StringPtrInput
	// A list of tags to associate with your synthetics test. This can help you categorize and filter tests in the manage
	// synthetics page of the UI. Default is an empty list (`[]`).
	Tags pulumi.StringArrayInput
	// Synthetics test type (`api` or `browser`).
	Type pulumi.StringInput
	// Variables used for a browser test steps. Multiple `browser_variable` blocks are allowed with the structure below.
	//
	// Deprecated: This parameter is deprecated, please use `browser_variable`
	Variables SyntheticsTestVariableArrayInput
}

func (SyntheticsTestArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*syntheticsTestArgs)(nil)).Elem()
}

type SyntheticsTestInput interface {
	pulumi.Input

	ToSyntheticsTestOutput() SyntheticsTestOutput
	ToSyntheticsTestOutputWithContext(ctx context.Context) SyntheticsTestOutput
}

func (SyntheticsTest) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTest)(nil)).Elem()
}

func (i SyntheticsTest) ToSyntheticsTestOutput() SyntheticsTestOutput {
	return i.ToSyntheticsTestOutputWithContext(context.Background())
}

func (i SyntheticsTest) ToSyntheticsTestOutputWithContext(ctx context.Context) SyntheticsTestOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SyntheticsTestOutput)
}

type SyntheticsTestOutput struct {
	*pulumi.OutputState
}

func (SyntheticsTestOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SyntheticsTestOutput)(nil)).Elem()
}

func (o SyntheticsTestOutput) ToSyntheticsTestOutput() SyntheticsTestOutput {
	return o
}

func (o SyntheticsTestOutput) ToSyntheticsTestOutputWithContext(ctx context.Context) SyntheticsTestOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SyntheticsTestOutput{})
}
