// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// Provides a Datadog [Security Monitoring Rule API](https://docs.datadoghq.com/api/v2/security-monitoring/) resource. This can be used to create and manage Datadog security monitoring rules. To change settings for a default rule use [datadogSecurityDefaultRule](https://www.terraform.io/resources/security_monitoring_default_rule) instead.
//
// ## Example Usage
//
// Create a simple security monitoring rule.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog"
// 	"github.com/pulumi/pulumi-datadog/sdk/v2/go/datadog/"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewSecurityMonitoringRule(ctx, "myrule", &datadog.SecurityMonitoringRuleArgs{
// 			Cases: datadog.SecurityMonitoringRuleCaseArray{
// 				&datadog.SecurityMonitoringRuleCaseArgs{
// 					Condition: pulumi.String("errors > 3 && warnings > 10"),
// 					Notifications: pulumi.StringArray{
// 						pulumi.String("@user"),
// 					},
// 					Status: pulumi.String("high"),
// 				},
// 			},
// 			Enabled: pulumi.Bool(true),
// 			Message: pulumi.String("The rule has triggered."),
// 			Name:    pulumi.String("My rule"),
// 			Options: &datadog.SecurityMonitoringRuleOptionsArgs{
// 				EvaluationWindow:  pulumi.Int(300),
// 				KeepAlive:         pulumi.Int(600),
// 				MaxSignalDuration: pulumi.Int(900),
// 			},
// 			Queries: datadog.SecurityMonitoringRuleQueryArray{
// 				&datadog.SecurityMonitoringRuleQueryArgs{
// 					Aggregation: pulumi.String("count"),
// 					GroupByFields: pulumi.StringArray{
// 						pulumi.String("host"),
// 					},
// 					Name:  pulumi.String("errors"),
// 					Query: pulumi.String("status:error"),
// 				},
// 				&datadog.SecurityMonitoringRuleQueryArgs{
// 					Aggregation: pulumi.String("count"),
// 					GroupByFields: pulumi.StringArray{
// 						pulumi.String("host"),
// 					},
// 					Name:  pulumi.String("warnings"),
// 					Query: pulumi.String("status:warning"),
// 				},
// 			},
// 			Tags: pulumi.StringArray{
// 				pulumi.String("type:dos"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Security monitoring rules can be imported using ID, e.g. console
//
// ```sh
//  $ pulumi import datadog:index/securityMonitoringRule:SecurityMonitoringRule my_monitor m0o-hto-lkb
// ```
type SecurityMonitoringRule struct {
	pulumi.CustomResourceState

	// Cases for generating signals.
	Cases SecurityMonitoringRuleCaseArrayOutput `pulumi:"cases"`
	// Whether the rule is enabled.
	Enabled pulumi.BoolPtrOutput `pulumi:"enabled"`
	// Message for generated signals.
	Message pulumi.StringOutput `pulumi:"message"`
	// The name of the rule.
	Name pulumi.StringOutput `pulumi:"name"`
	// Options on rules.
	Options SecurityMonitoringRuleOptionsPtrOutput `pulumi:"options"`
	// Queries for selecting logs which are part of the rule.
	Queries SecurityMonitoringRuleQueryArrayOutput `pulumi:"queries"`
	// Tags for generated signals.
	Tags pulumi.StringArrayOutput `pulumi:"tags"`
}

// NewSecurityMonitoringRule registers a new resource with the given unique name, arguments, and options.
func NewSecurityMonitoringRule(ctx *pulumi.Context,
	name string, args *SecurityMonitoringRuleArgs, opts ...pulumi.ResourceOption) (*SecurityMonitoringRule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Cases == nil {
		return nil, errors.New("invalid value for required argument 'Cases'")
	}
	if args.Message == nil {
		return nil, errors.New("invalid value for required argument 'Message'")
	}
	if args.Name == nil {
		return nil, errors.New("invalid value for required argument 'Name'")
	}
	if args.Queries == nil {
		return nil, errors.New("invalid value for required argument 'Queries'")
	}
	var resource SecurityMonitoringRule
	err := ctx.RegisterResource("datadog:index/securityMonitoringRule:SecurityMonitoringRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSecurityMonitoringRule gets an existing SecurityMonitoringRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSecurityMonitoringRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SecurityMonitoringRuleState, opts ...pulumi.ResourceOption) (*SecurityMonitoringRule, error) {
	var resource SecurityMonitoringRule
	err := ctx.ReadResource("datadog:index/securityMonitoringRule:SecurityMonitoringRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SecurityMonitoringRule resources.
type securityMonitoringRuleState struct {
	// Cases for generating signals.
	Cases []SecurityMonitoringRuleCase `pulumi:"cases"`
	// Whether the rule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Message for generated signals.
	Message *string `pulumi:"message"`
	// The name of the rule.
	Name *string `pulumi:"name"`
	// Options on rules.
	Options *SecurityMonitoringRuleOptions `pulumi:"options"`
	// Queries for selecting logs which are part of the rule.
	Queries []SecurityMonitoringRuleQuery `pulumi:"queries"`
	// Tags for generated signals.
	Tags []string `pulumi:"tags"`
}

type SecurityMonitoringRuleState struct {
	// Cases for generating signals.
	Cases SecurityMonitoringRuleCaseArrayInput
	// Whether the rule is enabled.
	Enabled pulumi.BoolPtrInput
	// Message for generated signals.
	Message pulumi.StringPtrInput
	// The name of the rule.
	Name pulumi.StringPtrInput
	// Options on rules.
	Options SecurityMonitoringRuleOptionsPtrInput
	// Queries for selecting logs which are part of the rule.
	Queries SecurityMonitoringRuleQueryArrayInput
	// Tags for generated signals.
	Tags pulumi.StringArrayInput
}

func (SecurityMonitoringRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*securityMonitoringRuleState)(nil)).Elem()
}

type securityMonitoringRuleArgs struct {
	// Cases for generating signals.
	Cases []SecurityMonitoringRuleCase `pulumi:"cases"`
	// Whether the rule is enabled.
	Enabled *bool `pulumi:"enabled"`
	// Message for generated signals.
	Message string `pulumi:"message"`
	// The name of the rule.
	Name string `pulumi:"name"`
	// Options on rules.
	Options *SecurityMonitoringRuleOptions `pulumi:"options"`
	// Queries for selecting logs which are part of the rule.
	Queries []SecurityMonitoringRuleQuery `pulumi:"queries"`
	// Tags for generated signals.
	Tags []string `pulumi:"tags"`
}

// The set of arguments for constructing a SecurityMonitoringRule resource.
type SecurityMonitoringRuleArgs struct {
	// Cases for generating signals.
	Cases SecurityMonitoringRuleCaseArrayInput
	// Whether the rule is enabled.
	Enabled pulumi.BoolPtrInput
	// Message for generated signals.
	Message pulumi.StringInput
	// The name of the rule.
	Name pulumi.StringInput
	// Options on rules.
	Options SecurityMonitoringRuleOptionsPtrInput
	// Queries for selecting logs which are part of the rule.
	Queries SecurityMonitoringRuleQueryArrayInput
	// Tags for generated signals.
	Tags pulumi.StringArrayInput
}

func (SecurityMonitoringRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*securityMonitoringRuleArgs)(nil)).Elem()
}

type SecurityMonitoringRuleInput interface {
	pulumi.Input

	ToSecurityMonitoringRuleOutput() SecurityMonitoringRuleOutput
	ToSecurityMonitoringRuleOutputWithContext(ctx context.Context) SecurityMonitoringRuleOutput
}

func (*SecurityMonitoringRule) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityMonitoringRule)(nil))
}

func (i *SecurityMonitoringRule) ToSecurityMonitoringRuleOutput() SecurityMonitoringRuleOutput {
	return i.ToSecurityMonitoringRuleOutputWithContext(context.Background())
}

func (i *SecurityMonitoringRule) ToSecurityMonitoringRuleOutputWithContext(ctx context.Context) SecurityMonitoringRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SecurityMonitoringRuleOutput)
}

type SecurityMonitoringRuleOutput struct {
	*pulumi.OutputState
}

func (SecurityMonitoringRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SecurityMonitoringRule)(nil))
}

func (o SecurityMonitoringRuleOutput) ToSecurityMonitoringRuleOutput() SecurityMonitoringRuleOutput {
	return o
}

func (o SecurityMonitoringRuleOutput) ToSecurityMonitoringRuleOutputWithContext(ctx context.Context) SecurityMonitoringRuleOutput {
	return o
}

func init() {
	pulumi.RegisterOutputType(SecurityMonitoringRuleOutput{})
}
