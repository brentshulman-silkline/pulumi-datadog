// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package datadog

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Resource for interacting with the sloCorrection API
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-datadog/sdk/v3/go/datadog"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := datadog.NewServiceLevelObjective(ctx, "exampleSlo", &datadog.ServiceLevelObjectiveArgs{
// 			Description: pulumi.String("some updated description about example_slo SLO"),
// 			Name:        pulumi.String("example slo"),
// 			Query: &datadog.ServiceLevelObjectiveQueryArgs{
// 				Denominator: pulumi.String("sum:my.metric{type:good}.as_count() + sum:my.metric{type:bad}.as_count()"),
// 				Numerator:   pulumi.String("sum:my.metric{type:good}.as_count()"),
// 			},
// 			Tags: pulumi.StringArray{
// 				pulumi.String("foo:bar"),
// 			},
// 			Thresholds: datadog.ServiceLevelObjectiveThresholdArray{
// 				&datadog.ServiceLevelObjectiveThresholdArgs{
// 					Target:    pulumi.Float64(99.5),
// 					Timeframe: pulumi.String("7d"),
// 					Warning:   pulumi.Float64(99.8),
// 				},
// 			},
// 			Type: pulumi.String("metric"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = datadog.NewSloCorrection(ctx, "exampleSloCorrection", &datadog.SloCorrectionArgs{
// 			Category:    pulumi.String("Scheduled Maintenance"),
// 			Description: pulumi.String("correction example"),
// 			End:         pulumi.Int(1735718600),
// 			SloId:       pulumi.String("datadog_service_level_objective.example_slo.id"),
// 			Start:       pulumi.Int(1735707000),
// 			Timezone:    pulumi.String("UTC"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import datadog:index/sloCorrection:SloCorrection testing_slo_correction 11111111-3fee-11eb-8a13-77cd9f15119e
// ```
type SloCorrection struct {
	pulumi.CustomResourceState

	// Category the SLO correction belongs to
	Category pulumi.StringOutput `pulumi:"category"`
	// Description of the correction being made.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Ending time of the correction in epoch seconds
	End pulumi.IntOutput `pulumi:"end"`
	// ID of the SLO that this correction will be applied to
	SloId pulumi.StringOutput `pulumi:"sloId"`
	// Starting time of the correction in epoch seconds
	Start pulumi.IntOutput `pulumi:"start"`
	// The timezone to display in the UI for the correction times (defaults to "UTC")
	Timezone pulumi.StringPtrOutput `pulumi:"timezone"`
}

// NewSloCorrection registers a new resource with the given unique name, arguments, and options.
func NewSloCorrection(ctx *pulumi.Context,
	name string, args *SloCorrectionArgs, opts ...pulumi.ResourceOption) (*SloCorrection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Category == nil {
		return nil, errors.New("invalid value for required argument 'Category'")
	}
	if args.End == nil {
		return nil, errors.New("invalid value for required argument 'End'")
	}
	if args.SloId == nil {
		return nil, errors.New("invalid value for required argument 'SloId'")
	}
	if args.Start == nil {
		return nil, errors.New("invalid value for required argument 'Start'")
	}
	var resource SloCorrection
	err := ctx.RegisterResource("datadog:index/sloCorrection:SloCorrection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetSloCorrection gets an existing SloCorrection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSloCorrection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *SloCorrectionState, opts ...pulumi.ResourceOption) (*SloCorrection, error) {
	var resource SloCorrection
	err := ctx.ReadResource("datadog:index/sloCorrection:SloCorrection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering SloCorrection resources.
type sloCorrectionState struct {
	// Category the SLO correction belongs to
	Category *string `pulumi:"category"`
	// Description of the correction being made.
	Description *string `pulumi:"description"`
	// Ending time of the correction in epoch seconds
	End *int `pulumi:"end"`
	// ID of the SLO that this correction will be applied to
	SloId *string `pulumi:"sloId"`
	// Starting time of the correction in epoch seconds
	Start *int `pulumi:"start"`
	// The timezone to display in the UI for the correction times (defaults to "UTC")
	Timezone *string `pulumi:"timezone"`
}

type SloCorrectionState struct {
	// Category the SLO correction belongs to
	Category pulumi.StringPtrInput
	// Description of the correction being made.
	Description pulumi.StringPtrInput
	// Ending time of the correction in epoch seconds
	End pulumi.IntPtrInput
	// ID of the SLO that this correction will be applied to
	SloId pulumi.StringPtrInput
	// Starting time of the correction in epoch seconds
	Start pulumi.IntPtrInput
	// The timezone to display in the UI for the correction times (defaults to "UTC")
	Timezone pulumi.StringPtrInput
}

func (SloCorrectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*sloCorrectionState)(nil)).Elem()
}

type sloCorrectionArgs struct {
	// Category the SLO correction belongs to
	Category string `pulumi:"category"`
	// Description of the correction being made.
	Description *string `pulumi:"description"`
	// Ending time of the correction in epoch seconds
	End int `pulumi:"end"`
	// ID of the SLO that this correction will be applied to
	SloId string `pulumi:"sloId"`
	// Starting time of the correction in epoch seconds
	Start int `pulumi:"start"`
	// The timezone to display in the UI for the correction times (defaults to "UTC")
	Timezone *string `pulumi:"timezone"`
}

// The set of arguments for constructing a SloCorrection resource.
type SloCorrectionArgs struct {
	// Category the SLO correction belongs to
	Category pulumi.StringInput
	// Description of the correction being made.
	Description pulumi.StringPtrInput
	// Ending time of the correction in epoch seconds
	End pulumi.IntInput
	// ID of the SLO that this correction will be applied to
	SloId pulumi.StringInput
	// Starting time of the correction in epoch seconds
	Start pulumi.IntInput
	// The timezone to display in the UI for the correction times (defaults to "UTC")
	Timezone pulumi.StringPtrInput
}

func (SloCorrectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*sloCorrectionArgs)(nil)).Elem()
}

type SloCorrectionInput interface {
	pulumi.Input

	ToSloCorrectionOutput() SloCorrectionOutput
	ToSloCorrectionOutputWithContext(ctx context.Context) SloCorrectionOutput
}

func (*SloCorrection) ElementType() reflect.Type {
	return reflect.TypeOf((*SloCorrection)(nil))
}

func (i *SloCorrection) ToSloCorrectionOutput() SloCorrectionOutput {
	return i.ToSloCorrectionOutputWithContext(context.Background())
}

func (i *SloCorrection) ToSloCorrectionOutputWithContext(ctx context.Context) SloCorrectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloCorrectionOutput)
}

func (i *SloCorrection) ToSloCorrectionPtrOutput() SloCorrectionPtrOutput {
	return i.ToSloCorrectionPtrOutputWithContext(context.Background())
}

func (i *SloCorrection) ToSloCorrectionPtrOutputWithContext(ctx context.Context) SloCorrectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloCorrectionPtrOutput)
}

type SloCorrectionPtrInput interface {
	pulumi.Input

	ToSloCorrectionPtrOutput() SloCorrectionPtrOutput
	ToSloCorrectionPtrOutputWithContext(ctx context.Context) SloCorrectionPtrOutput
}

type sloCorrectionPtrType SloCorrectionArgs

func (*sloCorrectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SloCorrection)(nil))
}

func (i *sloCorrectionPtrType) ToSloCorrectionPtrOutput() SloCorrectionPtrOutput {
	return i.ToSloCorrectionPtrOutputWithContext(context.Background())
}

func (i *sloCorrectionPtrType) ToSloCorrectionPtrOutputWithContext(ctx context.Context) SloCorrectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloCorrectionPtrOutput)
}

// SloCorrectionArrayInput is an input type that accepts SloCorrectionArray and SloCorrectionArrayOutput values.
// You can construct a concrete instance of `SloCorrectionArrayInput` via:
//
//          SloCorrectionArray{ SloCorrectionArgs{...} }
type SloCorrectionArrayInput interface {
	pulumi.Input

	ToSloCorrectionArrayOutput() SloCorrectionArrayOutput
	ToSloCorrectionArrayOutputWithContext(context.Context) SloCorrectionArrayOutput
}

type SloCorrectionArray []SloCorrectionInput

func (SloCorrectionArray) ElementType() reflect.Type {
	return reflect.TypeOf(([]*SloCorrection)(nil))
}

func (i SloCorrectionArray) ToSloCorrectionArrayOutput() SloCorrectionArrayOutput {
	return i.ToSloCorrectionArrayOutputWithContext(context.Background())
}

func (i SloCorrectionArray) ToSloCorrectionArrayOutputWithContext(ctx context.Context) SloCorrectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloCorrectionArrayOutput)
}

// SloCorrectionMapInput is an input type that accepts SloCorrectionMap and SloCorrectionMapOutput values.
// You can construct a concrete instance of `SloCorrectionMapInput` via:
//
//          SloCorrectionMap{ "key": SloCorrectionArgs{...} }
type SloCorrectionMapInput interface {
	pulumi.Input

	ToSloCorrectionMapOutput() SloCorrectionMapOutput
	ToSloCorrectionMapOutputWithContext(context.Context) SloCorrectionMapOutput
}

type SloCorrectionMap map[string]SloCorrectionInput

func (SloCorrectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((map[string]*SloCorrection)(nil))
}

func (i SloCorrectionMap) ToSloCorrectionMapOutput() SloCorrectionMapOutput {
	return i.ToSloCorrectionMapOutputWithContext(context.Background())
}

func (i SloCorrectionMap) ToSloCorrectionMapOutputWithContext(ctx context.Context) SloCorrectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SloCorrectionMapOutput)
}

type SloCorrectionOutput struct {
	*pulumi.OutputState
}

func (SloCorrectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SloCorrection)(nil))
}

func (o SloCorrectionOutput) ToSloCorrectionOutput() SloCorrectionOutput {
	return o
}

func (o SloCorrectionOutput) ToSloCorrectionOutputWithContext(ctx context.Context) SloCorrectionOutput {
	return o
}

func (o SloCorrectionOutput) ToSloCorrectionPtrOutput() SloCorrectionPtrOutput {
	return o.ToSloCorrectionPtrOutputWithContext(context.Background())
}

func (o SloCorrectionOutput) ToSloCorrectionPtrOutputWithContext(ctx context.Context) SloCorrectionPtrOutput {
	return o.ApplyT(func(v SloCorrection) *SloCorrection {
		return &v
	}).(SloCorrectionPtrOutput)
}

type SloCorrectionPtrOutput struct {
	*pulumi.OutputState
}

func (SloCorrectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SloCorrection)(nil))
}

func (o SloCorrectionPtrOutput) ToSloCorrectionPtrOutput() SloCorrectionPtrOutput {
	return o
}

func (o SloCorrectionPtrOutput) ToSloCorrectionPtrOutputWithContext(ctx context.Context) SloCorrectionPtrOutput {
	return o
}

type SloCorrectionArrayOutput struct{ *pulumi.OutputState }

func (SloCorrectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SloCorrection)(nil))
}

func (o SloCorrectionArrayOutput) ToSloCorrectionArrayOutput() SloCorrectionArrayOutput {
	return o
}

func (o SloCorrectionArrayOutput) ToSloCorrectionArrayOutputWithContext(ctx context.Context) SloCorrectionArrayOutput {
	return o
}

func (o SloCorrectionArrayOutput) Index(i pulumi.IntInput) SloCorrectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SloCorrection {
		return vs[0].([]SloCorrection)[vs[1].(int)]
	}).(SloCorrectionOutput)
}

type SloCorrectionMapOutput struct{ *pulumi.OutputState }

func (SloCorrectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]SloCorrection)(nil))
}

func (o SloCorrectionMapOutput) ToSloCorrectionMapOutput() SloCorrectionMapOutput {
	return o
}

func (o SloCorrectionMapOutput) ToSloCorrectionMapOutputWithContext(ctx context.Context) SloCorrectionMapOutput {
	return o
}

func (o SloCorrectionMapOutput) MapIndex(k pulumi.StringInput) SloCorrectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) SloCorrection {
		return vs[0].(map[string]SloCorrection)[vs[1].(string)]
	}).(SloCorrectionOutput)
}

func init() {
	pulumi.RegisterOutputType(SloCorrectionOutput{})
	pulumi.RegisterOutputType(SloCorrectionPtrOutput{})
	pulumi.RegisterOutputType(SloCorrectionArrayOutput{})
	pulumi.RegisterOutputType(SloCorrectionMapOutput{})
}
