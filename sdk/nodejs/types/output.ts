// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface DashboardListDashItem {
    /**
     * The ID of this dashboard.
     */
    dashId: string;
    /**
     * The type of this dashboard. Available options are: `customTimeboard`, `customScreenboard`, `integrationScreenboard`, `integrationTimeboard`, and `hostTimeboard`
     */
    type: string;
}

export interface DashboardTemplateVariable {
    /**
     * The default tag. Default: "\*" (match all).
     */
    default?: string;
    /**
     * The variable name. Can be referenced as $name in `graph` `request` `q` query strings.
     */
    name: string;
    /**
     * The tag group. Default: no tag group.
     */
    prefix?: string;
}

export interface DashboardTemplateVariablePreset {
    /**
     * The displayed name of the preset.
     * - `templateVariable`: (Required) Block describing the values that a templateVariable within this preset should assume. Each referenced templateVariable name must be defined on the dashboard, but not all templateVariables must be included in a preset. One or more blocks can be defined per preset.
     * - `name`: (Required) The name of the templateVariable being referenced.
     * - `value`: (Required) The value that the templateVariable should assume.
     */
    name: string;
    templateVariables: outputs.DashboardTemplateVariablePresetTemplateVariable[];
}

export interface DashboardTemplateVariablePresetTemplateVariable {
    /**
     * The variable name. Can be referenced as $name in `graph` `request` `q` query strings.
     */
    name: string;
    /**
     * Value for the comparator.
     */
    value: string;
}

export interface DashboardWidget {
    alertGraphDefinition?: outputs.DashboardWidgetAlertGraphDefinition;
    alertValueDefinition?: outputs.DashboardWidgetAlertValueDefinition;
    changeDefinition?: outputs.DashboardWidgetChangeDefinition;
    checkStatusDefinition?: outputs.DashboardWidgetCheckStatusDefinition;
    distributionDefinition?: outputs.DashboardWidgetDistributionDefinition;
    eventStreamDefinition?: outputs.DashboardWidgetEventStreamDefinition;
    eventTimelineDefinition?: outputs.DashboardWidgetEventTimelineDefinition;
    freeTextDefinition?: outputs.DashboardWidgetFreeTextDefinition;
    groupDefinition?: outputs.DashboardWidgetGroupDefinition;
    heatmapDefinition?: outputs.DashboardWidgetHeatmapDefinition;
    hostmapDefinition?: outputs.DashboardWidgetHostmapDefinition;
    iframeDefinition?: outputs.DashboardWidgetIframeDefinition;
    imageDefinition?: outputs.DashboardWidgetImageDefinition;
    /**
     * . The structure of this block is described below
     * - A widget should have exactly one of the following nested blocks describing the widget definition:
     * - `alertGraphDefinition`: The definition for a Alert Graph widget. Exactly one nested block is allowed with the following structure:
     * - `alertId`: (Required) The ID of the monitor used by the widget.
     * - `vizType`: (Required) Type of visualization to use when displaying the widget. Either "timeseries" or "toplist".
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right"
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `alertValueDefinition`: The definition for an Alert Value widget. Exactly one nested block is allowed with the following structure:
     * - `alertId`: (Required) The ID of the monitor used by the widget.
     * - `precision`: (Optional) The precision to use when displaying the value. Use "*" for maximum precision.
     * - `unit`: (Optional) The unit for the value displayed in the widget.
     * - `textAlign`: (Optional) The alignment of the text in the widget.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right"
     * - `changeDefinition`: The definition for a Change widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `changeType`: (Optional) Whether to show absolute or relative change. One of "absolute", "relative".
     */
    layout?: outputs.DashboardWidgetLayout;
    logStreamDefinition?: outputs.DashboardWidgetLogStreamDefinition;
    manageStatusDefinition?: outputs.DashboardWidgetManageStatusDefinition;
    noteDefinition?: outputs.DashboardWidgetNoteDefinition;
    queryTableDefinition?: outputs.DashboardWidgetQueryTableDefinition;
    queryValueDefinition?: outputs.DashboardWidgetQueryValueDefinition;
    scatterplotDefinition?: outputs.DashboardWidgetScatterplotDefinition;
    serviceLevelObjectiveDefinition?: outputs.DashboardWidgetServiceLevelObjectiveDefinition;
    servicemapDefinition?: outputs.DashboardWidgetServicemapDefinition;
    timeseriesDefinition?: outputs.DashboardWidgetTimeseriesDefinition;
    toplistDefinition?: outputs.DashboardWidgetToplistDefinition;
    traceServiceDefinition?: outputs.DashboardWidgetTraceServiceDefinition;
}

export interface DashboardWidgetAlertGraphDefinition {
    alertId: string;
    time?: outputs.DashboardWidgetAlertGraphDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    vizType: string;
}

export interface DashboardWidgetAlertGraphDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetAlertValueDefinition {
    alertId: string;
    /**
     * The precision to use when displaying the tile.
     */
    precision?: number;
    /**
     * The alignment of the text in the widget.
     * - `heatmapDefinition`: The definition for a Heatmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `queryTableDefinition`: The definition for a Query Table widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apmQuery`, `logQuery` or `processQuery` is required within the request block):
     * - `q`: (Optional) The metric query to use in the widget
     * - `apmQuery`: (Optional) The APM query to use in the widget. The structure of this block is described below.
     * - `logQuery`: (Optional) The log query to use in the widget. The structure of this block is described below.
     * - `processQuery`: (Optional) The process query to use in the widget. The structure of this block is described below.
     */
    textAlign?: string;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    unit?: string;
}

export interface DashboardWidgetChangeDefinition {
    requests?: outputs.DashboardWidgetChangeDefinitionRequest[];
    time?: outputs.DashboardWidgetChangeDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetChangeDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetChangeDefinitionRequestApmQuery;
    changeType?: string;
    /**
     * Choose from when to compare current data to. One of "hourBefore", "dayBefore", "weekBefore" or "monthBefore".
     */
    compareTo?: string;
    /**
     * Boolean indicating whether an increase in the value is good (thus displayed in green) or not (thus displayed in red).
     */
    increaseGood?: boolean;
    logQuery?: outputs.DashboardWidgetChangeDefinitionRequestLogQuery;
    /**
     * One of "change", "name", "present" (present value) or "past" (past value).
     */
    orderBy?: string;
    /**
     * Either "asc" (ascending) or "desc" (descending).
     */
    orderDir?: string;
    processQuery?: outputs.DashboardWidgetChangeDefinitionRequestProcessQuery;
    q?: string;
    /**
     * If set to "true", displays current value.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `checkStatusDefinition`: The definition for a Check Status widget. Exactly one nested block is allowed with the following structure:
     */
    showPresent?: boolean;
}

export interface DashboardWidgetChangeDefinitionRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetChangeDefinitionRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetChangeDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetChangeDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetChangeDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetChangeDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetChangeDefinitionRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetChangeDefinitionRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetChangeDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetChangeDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetChangeDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetChangeDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetChangeDefinitionRequestProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetChangeDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetCheckStatusDefinition {
    /**
     * The check to use in the widget.
     */
    check: string;
    /**
     * The check group to use in the widget.
     */
    group?: string;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: string[];
    /**
     * Either "check" or "cluster", depending on whether the widget should use a single check or a cluster of checks.
     */
    grouping: string;
    /**
     * List of tags to use in the widget.
     * - `title`: (Optional) The title of the widget.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `distributionDefinition`: The definition for a Distribution widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    tags?: string[];
    time?: outputs.DashboardWidgetCheckStatusDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetCheckStatusDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetDistributionDefinition {
    legendSize?: string;
    requests?: outputs.DashboardWidgetDistributionDefinitionRequest[];
    showLegend?: boolean;
    time?: outputs.DashboardWidgetDistributionDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetDistributionDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetDistributionDefinitionRequestApmQuery;
    logQuery?: outputs.DashboardWidgetDistributionDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetDistributionDefinitionRequestProcessQuery;
    q?: string;
    /**
     * Style of the widget graph. One nested block is allowed with the following structure:
     */
    style?: outputs.DashboardWidgetDistributionDefinitionRequestStyle;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetDistributionDefinitionRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetDistributionDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetDistributionDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetDistributionDefinitionRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetDistributionDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetDistributionDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetDistributionDefinitionRequestProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetDistributionDefinitionRequestStyle {
    /**
     * Color palette to apply to the widget. The available options are available here: https://docs.datadoghq.com/graphing/widgets/timeseries/#appearance.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `eventStreamDefinition`: The definition for a Event Stream widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `event`: (Optional) The definition of the event to overlay on the graph. Includes the following structure:
     * - `q`: (Required) The event query to use in the widget.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `hostmapDefinition`: The definition for a Hostmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `fill`: (Optional) The query used to fill the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `size`: (Optional) The query used to size the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    palette?: string;
}

export interface DashboardWidgetDistributionDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetEventStreamDefinition {
    /**
     * The size of the events in the widget. Either "s" (small, title only) or "l" (large, full event).
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters. Can be either "and" or "or".
     * - `eventTimelineDefinition`: The definition for a Event Timeline widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters. Can be either "and" or "or".
     * - `freeTextDefinition`: The definition for a Free Text. Exactly one nested block is allowed with the following structure:
     */
    eventSize?: string;
    query: string;
    tagsExecution?: string;
    time?: outputs.DashboardWidgetEventStreamDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetEventStreamDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetEventTimelineDefinition {
    query: string;
    tagsExecution?: string;
    time?: outputs.DashboardWidgetEventTimelineDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetEventTimelineDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetFreeTextDefinition {
    /**
     * The color of the text in the widget.
     */
    color?: string;
    /**
     * The size of the text in the widget.
     */
    fontSize?: string;
    /**
     * The text to display in the widget.
     */
    text: string;
    /**
     * The alignment of the text in the widget.
     * - `heatmapDefinition`: The definition for a Heatmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `queryTableDefinition`: The definition for a Query Table widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apmQuery`, `logQuery` or `processQuery` is required within the request block):
     * - `q`: (Optional) The metric query to use in the widget
     * - `apmQuery`: (Optional) The APM query to use in the widget. The structure of this block is described below.
     * - `logQuery`: (Optional) The log query to use in the widget. The structure of this block is described below.
     * - `processQuery`: (Optional) The process query to use in the widget. The structure of this block is described below.
     */
    textAlign?: string;
}

export interface DashboardWidgetGroupDefinition {
    /**
     * Layout type of the dashboard. Available values are: `ordered` (previous timeboard) or `free` (previous screenboard layout).
     * <br>**Note: This value cannot be changed. Converting a dashboard from `free` <> `ordered` requires destroying and re-creating the dashboard.** Instead of using `ForceNew`, this is a manual action as many underlying widget configs need to be updated to work for the updated layout, otherwise the new dashboard won't be created properly.
     */
    layoutType: string;
    /**
     * Title of the dashboard.
     */
    title?: string;
    /**
     * Nested block describing a widget. The structure of this block is described below. Multiple `widget` blocks are allowed within a `datadog.Dashboard` resource.
     */
    widgets: outputs.DashboardWidgetGroupDefinitionWidget[];
}

export interface DashboardWidgetGroupDefinitionWidget {
    alertGraphDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition;
    alertValueDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetAlertValueDefinition;
    changeDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinition;
    checkStatusDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition;
    distributionDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinition;
    eventStreamDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetEventStreamDefinition;
    eventTimelineDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition;
    freeTextDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetFreeTextDefinition;
    heatmapDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinition;
    hostmapDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinition;
    iframeDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetIframeDefinition;
    imageDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetImageDefinition;
    /**
     * . The structure of this block is described below
     * - A widget should have exactly one of the following nested blocks describing the widget definition:
     * - `alertGraphDefinition`: The definition for a Alert Graph widget. Exactly one nested block is allowed with the following structure:
     * - `alertId`: (Required) The ID of the monitor used by the widget.
     * - `vizType`: (Required) Type of visualization to use when displaying the widget. Either "timeseries" or "toplist".
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right"
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `alertValueDefinition`: The definition for an Alert Value widget. Exactly one nested block is allowed with the following structure:
     * - `alertId`: (Required) The ID of the monitor used by the widget.
     * - `precision`: (Optional) The precision to use when displaying the value. Use "*" for maximum precision.
     * - `unit`: (Optional) The unit for the value displayed in the widget.
     * - `textAlign`: (Optional) The alignment of the text in the widget.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right"
     * - `changeDefinition`: The definition for a Change widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `changeType`: (Optional) Whether to show absolute or relative change. One of "absolute", "relative".
     */
    layout?: outputs.DashboardWidgetGroupDefinitionWidgetLayout;
    logStreamDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinition;
    manageStatusDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetManageStatusDefinition;
    noteDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetNoteDefinition;
    queryTableDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinition;
    queryValueDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinition;
    scatterplotDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinition;
    serviceLevelObjectiveDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition;
    servicemapDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetServicemapDefinition;
    timeseriesDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition;
    toplistDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinition;
    traceServiceDefinition?: outputs.DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition;
}

export interface DashboardWidgetGroupDefinitionWidgetAlertGraphDefinition {
    alertId: string;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    vizType: string;
}

export interface DashboardWidgetGroupDefinitionWidgetAlertGraphDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetAlertValueDefinition {
    alertId: string;
    /**
     * The precision to use when displaying the tile.
     */
    precision?: number;
    /**
     * The alignment of the text in the widget.
     * - `heatmapDefinition`: The definition for a Heatmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `queryTableDefinition`: The definition for a Query Table widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apmQuery`, `logQuery` or `processQuery` is required within the request block):
     * - `q`: (Optional) The metric query to use in the widget
     * - `apmQuery`: (Optional) The APM query to use in the widget. The structure of this block is described below.
     * - `logQuery`: (Optional) The log query to use in the widget. The structure of this block is described below.
     * - `processQuery`: (Optional) The process query to use in the widget. The structure of this block is described below.
     */
    textAlign?: string;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    unit?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinition {
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest[];
    time?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery;
    changeType?: string;
    /**
     * Choose from when to compare current data to. One of "hourBefore", "dayBefore", "weekBefore" or "monthBefore".
     */
    compareTo?: string;
    /**
     * Boolean indicating whether an increase in the value is good (thus displayed in green) or not (thus displayed in red).
     */
    increaseGood?: boolean;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery;
    /**
     * One of "change", "name", "present" (present value) or "past" (past value).
     */
    orderBy?: string;
    /**
     * Either "asc" (ascending) or "desc" (descending).
     */
    orderDir?: string;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery;
    q?: string;
    /**
     * If set to "true", displays current value.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `checkStatusDefinition`: The definition for a Check Status widget. Exactly one nested block is allowed with the following structure:
     */
    showPresent?: boolean;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionRequestProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetChangeDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetCheckStatusDefinition {
    /**
     * The check to use in the widget.
     */
    check: string;
    /**
     * The check group to use in the widget.
     */
    group?: string;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: string[];
    /**
     * Either "check" or "cluster", depending on whether the widget should use a single check or a cluster of checks.
     */
    grouping: string;
    /**
     * List of tags to use in the widget.
     * - `title`: (Optional) The title of the widget.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `distributionDefinition`: The definition for a Distribution widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    tags?: string[];
    time?: outputs.DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetCheckStatusDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinition {
    legendSize?: string;
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest[];
    showLegend?: boolean;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery;
    q?: string;
    /**
     * Style of the widget graph. One nested block is allowed with the following structure:
     */
    style?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionRequestStyle {
    /**
     * Color palette to apply to the widget. The available options are available here: https://docs.datadoghq.com/graphing/widgets/timeseries/#appearance.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `eventStreamDefinition`: The definition for a Event Stream widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `event`: (Optional) The definition of the event to overlay on the graph. Includes the following structure:
     * - `q`: (Required) The event query to use in the widget.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `hostmapDefinition`: The definition for a Hostmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `fill`: (Optional) The query used to fill the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `size`: (Optional) The query used to size the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    palette?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetDistributionDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetEventStreamDefinition {
    /**
     * The size of the events in the widget. Either "s" (small, title only) or "l" (large, full event).
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters. Can be either "and" or "or".
     * - `eventTimelineDefinition`: The definition for a Event Timeline widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters. Can be either "and" or "or".
     * - `freeTextDefinition`: The definition for a Free Text. Exactly one nested block is allowed with the following structure:
     */
    eventSize?: string;
    query: string;
    tagsExecution?: string;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetEventStreamDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetEventTimelineDefinition {
    query: string;
    tagsExecution?: string;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetEventTimelineDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetFreeTextDefinition {
    /**
     * The color of the text in the widget.
     */
    color?: string;
    /**
     * The size of the text in the widget.
     */
    fontSize?: string;
    /**
     * The text to display in the widget.
     */
    text: string;
    /**
     * The alignment of the text in the widget.
     * - `heatmapDefinition`: The definition for a Heatmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `queryTableDefinition`: The definition for a Query Table widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apmQuery`, `logQuery` or `processQuery` is required within the request block):
     * - `q`: (Optional) The metric query to use in the widget
     * - `apmQuery`: (Optional) The APM query to use in the widget. The structure of this block is described below.
     * - `logQuery`: (Optional) The log query to use in the widget. The structure of this block is described below.
     * - `processQuery`: (Optional) The process query to use in the widget. The structure of this block is described below.
     */
    textAlign?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinition {
    events?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent[];
    legendSize?: string;
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest[];
    showLegend?: boolean;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    yaxis?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionEvent {
    q: string;
    tagsExecution?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery;
    q?: string;
    /**
     * Style of the widget graph. One nested block is allowed with the following structure:
     */
    style?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionRequestStyle {
    /**
     * Color palette to apply to the widget. The available options are available here: https://docs.datadoghq.com/graphing/widgets/timeseries/#appearance.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `eventStreamDefinition`: The definition for a Event Stream widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `event`: (Optional) The definition of the event to overlay on the graph. Includes the following structure:
     * - `q`: (Required) The event query to use in the widget.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `hostmapDefinition`: The definition for a Hostmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `fill`: (Optional) The query used to fill the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `size`: (Optional) The query used to size the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    palette?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHeatmapDefinitionYaxis {
    /**
     * Always include zero or fit the axis to the data range.
     */
    includeZero?: boolean;
    /**
     * The label of the axis to display on the graph.
     */
    label?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    max?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    min?: string;
    /**
     * Specifies the scale type. One of "linear", "log", "pow", "sqrt".
     */
    scale?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinition {
    /**
     * The check group to use in the widget.
     */
    groups?: string[];
    /**
     * Boolean indicating whether to show ungrouped nodes.
     */
    noGroupHosts?: boolean;
    /**
     * Boolean indicating whether to show nodes with no metrics.
     */
    noMetricHosts?: boolean;
    /**
     * The type of node used. Either "host" or "container".
     */
    nodeType?: string;
    request?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequest;
    /**
     * The list of tags to filter nodes by.
     */
    scopes?: string[];
    /**
     * Style of the widget graph. One nested block is allowed with the following structure:
     */
    style?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequest {
    fills?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill[];
    sizes?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize[];
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFill {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery;
    q?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestFillProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSize {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery;
    q?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionRequestSizeProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetHostmapDefinitionStyle {
    /**
     * Max value to use to color the map.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `iframeDefinition`: The definition for a Iframe widget. Exactly one nested block is allowed with the following structure:
     */
    fillMax?: string;
    /**
     * Min value to use to color the map.
     */
    fillMin?: string;
    /**
     * Color palette to apply to the widget. The available options are available here: https://docs.datadoghq.com/graphing/widgets/timeseries/#appearance.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `eventStreamDefinition`: The definition for a Event Stream widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `event`: (Optional) The definition of the event to overlay on the graph. Includes the following structure:
     * - `q`: (Required) The event query to use in the widget.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `hostmapDefinition`: The definition for a Hostmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `fill`: (Optional) The query used to fill the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `size`: (Optional) The query used to size the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    palette?: string;
    /**
     * Boolean indicating whether to flip the palette tones.
     */
    paletteFlip?: boolean;
}

export interface DashboardWidgetGroupDefinitionWidgetIframeDefinition {
    /**
     * Read only field - The URL of the dashboard.
     */
    url: string;
}

export interface DashboardWidgetGroupDefinitionWidgetImageDefinition {
    /**
     * The margins to use around the image. Either "small" or "large".
     * - `logStreamDefinition`: The definition for a Log Stream widget. Exactly one nested block is allowed with the following structure:
     */
    margin?: string;
    /**
     * The preferred method to adapt the dimensions of the image to those of the widget. One of "center" (center the image in the tile), "zoom" (zoom the image to cover the whole tile) or "fit" (fit the image dimensions to those of the tile).
     */
    sizing?: string;
    /**
     * Read only field - The URL of the dashboard.
     */
    url: string;
}

export interface DashboardWidgetGroupDefinitionWidgetLayout {
    /**
     * The height of the widget.
     */
    height: number;
    /**
     * The width of the widget.
     */
    width: number;
    /**
     * The position of the widget on the x (horizontal) axis. Should be greater or equal to 0.
     */
    x: number;
    /**
     * The position of the widget on the y (vertical) axis. Should be greater or equal to 0.
     */
    y: number;
}

export interface DashboardWidgetGroupDefinitionWidgetLogStreamDefinition {
    /**
     * Stringified list of columns to use. Example: `"["column1","column2","column3"]"`.
     */
    columns?: string[];
    indexes?: string[];
    /**
     * ID of the logset to use.
     * - `query`: (Optional) The query to use in the widget.
     *
     * @deprecated This parameter has been deprecated. Use 'indexes' instead
     */
    logset?: string;
    /**
     * The amount of lines the message column should display. One of: `inline`, `expanded-md`, and `expanded-lg`.
     */
    messageDisplay?: string;
    query?: string;
    /**
     * If the date column should be displayed.
     */
    showDateColumn?: boolean;
    /**
     * If the message column should be displayed.
     */
    showMessageColumn?: boolean;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSort;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionSort {
    column: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetLogStreamDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetManageStatusDefinition {
    /**
     * Whether to colorize text or background. One of "text", "background".
     */
    colorPreference?: string;
    /**
     * @deprecated This parameter has been deprecated
     */
    count?: number;
    /**
     * The display setting to use. One of "counts", "list", or "countsAndList".
     */
    displayFormat?: string;
    /**
     * Boolean indicating whether to hide empty categories.
     */
    hideZeroCounts?: boolean;
    query: string;
    /**
     * Boolean indicating whether to show when monitors/groups last triggered.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `noteDefinition`: The definition for a Note widget. Exactly one nested block is allowed with the following structure:
     */
    showLastTriggered?: boolean;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: string;
    /**
     * @deprecated This parameter has been deprecated
     */
    start?: number;
    /**
     * The monitor summary type to use. One of "monitors", "groups", or "combined". Defaults to "monitors".
     */
    summaryType?: string;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetNoteDefinition {
    /**
     * Background color of the note.
     */
    backgroundColor?: string;
    /**
     * Content of the note.
     */
    content: string;
    /**
     * The size of the text in the widget.
     */
    fontSize?: string;
    /**
     * Whether to show a tick or not.
     */
    showTick?: boolean;
    /**
     * The alignment of the text in the widget.
     * - `heatmapDefinition`: The definition for a Heatmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `queryTableDefinition`: The definition for a Query Table widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apmQuery`, `logQuery` or `processQuery` is required within the request block):
     * - `q`: (Optional) The metric query to use in the widget
     * - `apmQuery`: (Optional) The APM query to use in the widget. The structure of this block is described below.
     * - `logQuery`: (Optional) The log query to use in the widget. The structure of this block is described below.
     * - `processQuery`: (Optional) The process query to use in the widget. The structure of this block is described below.
     */
    textAlign?: string;
    /**
     * When tick = true, string indicating on which side of the widget the tick should be displayed. One of "bottom", "top", "left", "right".
     * - `queryValueDefinition`: The definition for a Query Value widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apmQuery`, `logQuery` or `processQuery` is required within the request block):
     * - `q`: (Optional) The metric query to use in the widget.
     * - `apmQuery`: (Optional) The APM query to use in the widget. The structure of this block is described below.
     * - `logQuery`: (Optional) The log query to use in the widget. The structure of this block is described below.
     * - `processQuery`: (Optional) The process query to use in the widget. The structure of this block is described below.
     */
    tickEdge?: string;
    /**
     * When tick = true, string with a percent sign indicating the position of the tick. Example: use tickPos = "50%" for centered alignment.
     */
    tickPos?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinition {
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest[];
    time?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequest {
    /**
     * The aggregator to use for time aggregation. One of `avg`, `min`, `max`, `sum`, `last`.
     * - `y`: (Optional) The query used for the Y-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `xaxis`: (Optional) Nested block describing the X-Axis Controls. The structure of this block is described below
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     */
    aggregator?: string;
    /**
     * The alias for the column name. Default is the metric name.
     */
    alias?: string;
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery;
    /**
     * Conditional formats allow you to set the color of your widget content or background, depending on a rule applied to your data. Multiple request blocks are allowed. The structure of this block is described below.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `traceServiceDefinition`: The definition for a Trace Service widget. Exactly one nested block is allowed with the following structure:
     * - `env`: (Required) APM environment.
     * - `service`: (Required) APM service.
     * - `spanName`: (Required) APM span name.
     * - `showHits`: (Optional) APM span name.
     * - `showHits`: (Optional) Whether to show the hits metrics or not.
     * - `showErrors`: (Optional) Whether to show the error metrics or not.
     * - `showLatency`: (Optional) Whether to show the latency metrics or not.
     * - `showBreakdown`: (Optional) Whether to show the latency breakdown or not.
     * - `showDistribution`: (Optional) Whether to show the latency distribution or not.
     * - `showResourceList`: (Optional) Whether to show the resource list or not.
     * - `sizeFormat`: (Optional) Size of the widget. Available values are: `small`, `medium`, or `large`.
     * - `displayFormat`: (Optional) Number of columns to display. Available values are: `oneColumn`, `twoColumn`, or `threeColumn`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     */
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order?: string;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery;
    q?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestConditionalFormat {
    /**
     * Comparator to apply from: One of `>`, `>=`, `<`, or `<=`.
     */
    comparator: string;
    /**
     * Color palette to apply to the background, same values available as palette.
     */
    customBgColor?: string;
    /**
     * Color palette to apply to the foreground, same values available as palette.
     */
    customFgColor?: string;
    hideValue?: boolean;
    /**
     * Displays an image as the background.
     * .
     */
    imageUrl?: string;
    /**
     * Color palette to apply; One of `blue`, `customBg`, `customImage`, `customText`, `grayOnWhite`, `green`, `greenOnWhite`, `grey`, `orange`, `red`, `redOnWhite`, `whiteOnGray`, `whiteOnGreen`, `whiteOnRed`, `whiteOnYellow`, or `yellowOnWhite`.
     */
    palette: string;
    timeframe?: string;
    /**
     * Value for the comparator.
     */
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionRequestProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryTableDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinition {
    /**
     * Boolean indicating whether to automatically scale the tile.
     */
    autoscale?: boolean;
    /**
     * The unit for the value displayed in the widget.
     */
    customUnit?: string;
    /**
     * The precision to use when displaying the tile.
     */
    precision?: number;
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest[];
    /**
     * The alignment of the text in the widget.
     * - `heatmapDefinition`: The definition for a Heatmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `queryTableDefinition`: The definition for a Query Table widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apmQuery`, `logQuery` or `processQuery` is required within the request block):
     * - `q`: (Optional) The metric query to use in the widget
     * - `apmQuery`: (Optional) The APM query to use in the widget. The structure of this block is described below.
     * - `logQuery`: (Optional) The log query to use in the widget. The structure of this block is described below.
     * - `processQuery`: (Optional) The process query to use in the widget. The structure of this block is described below.
     */
    textAlign?: string;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequest {
    /**
     * The aggregator to use for time aggregation. One of `avg`, `min`, `max`, `sum`, `last`.
     * - `y`: (Optional) The query used for the Y-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `xaxis`: (Optional) Nested block describing the X-Axis Controls. The structure of this block is described below
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     */
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery;
    /**
     * Conditional formats allow you to set the color of your widget content or background, depending on a rule applied to your data. Multiple request blocks are allowed. The structure of this block is described below.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `traceServiceDefinition`: The definition for a Trace Service widget. Exactly one nested block is allowed with the following structure:
     * - `env`: (Required) APM environment.
     * - `service`: (Required) APM service.
     * - `spanName`: (Required) APM span name.
     * - `showHits`: (Optional) APM span name.
     * - `showHits`: (Optional) Whether to show the hits metrics or not.
     * - `showErrors`: (Optional) Whether to show the error metrics or not.
     * - `showLatency`: (Optional) Whether to show the latency metrics or not.
     * - `showBreakdown`: (Optional) Whether to show the latency breakdown or not.
     * - `showDistribution`: (Optional) Whether to show the latency distribution or not.
     * - `showResourceList`: (Optional) Whether to show the resource list or not.
     * - `sizeFormat`: (Optional) Size of the widget. Available values are: `small`, `medium`, or `large`.
     * - `displayFormat`: (Optional) Number of columns to display. Available values are: `oneColumn`, `twoColumn`, or `threeColumn`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     */
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat[];
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery;
    q?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestConditionalFormat {
    /**
     * Comparator to apply from: One of `>`, `>=`, `<`, or `<=`.
     */
    comparator: string;
    /**
     * Color palette to apply to the background, same values available as palette.
     */
    customBgColor?: string;
    /**
     * Color palette to apply to the foreground, same values available as palette.
     */
    customFgColor?: string;
    hideValue?: boolean;
    /**
     * Displays an image as the background.
     * .
     */
    imageUrl?: string;
    /**
     * Color palette to apply; One of `blue`, `customBg`, `customImage`, `customText`, `grayOnWhite`, `green`, `greenOnWhite`, `grey`, `orange`, `red`, `redOnWhite`, `whiteOnGray`, `whiteOnGreen`, `whiteOnRed`, `whiteOnYellow`, or `yellowOnWhite`.
     */
    palette: string;
    timeframe?: string;
    /**
     * Value for the comparator.
     */
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionRequestProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetQueryValueDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinition {
    /**
     * List of groups used for colors.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `servicemapDefinition`: The definition for a Service Map widget. Exactly one nested block is allowed with the following structure:
     * - `filters`: (Required) Your environment and primary tag (or * if enabled for your account).
     * - `service`: (Required) The ID of the service you want to map.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `serviceLevelObjectiveDefinition`: The definition for a Service Level Objective widget. Exactly one nested block is allowed with the following structure:
     * - `viewType`: (Required) Type of view to use when displaying the widget. Only "detail" is currently supported.
     * - `sloId`: (Required) The ID of the service level objective used by the widget.
     * - `showErrorBudget`: (Optional) Whether to show the error budget or not.
     * - `viewMode`: (Required) View mode for the widget. One of "overall", "component", or "both".
     * - `timeWindows`: (Required) List of time windows to display in the widget. Each value in the list must be one of "7d", "30d", "90d", "weekToDate",  "previousWeek", "monthToDate", or "previousMonth".
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `timeseriesDefinition`: The definition for a Timeseries  widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apmQuery`, `logQuery` or `processQuery` is required within the request block):
     * - `q`: (Optional) The metric query to use in the widget.
     * - `apmQuery`: (Optional) The APM query to use in the widget. The structure of this block is described below.
     * - `logQuery`: (Optional) The log query to use in the widget. The structure of this block is described below.
     * - `networkQuery`: (Optional) The network query to use in the widget. The structure of this block is described below.
     * - `rumQuery`: (Optional) The rum query to use in the widget. The structure of this block is described below.
     * - `processQuery`: (Optional) The process query to use in the widget. The structure of this block is described below.
     */
    colorByGroups?: string[];
    request?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    xaxis?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis;
    yaxis?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequest {
    /**
     * The position of the widget on the x (horizontal) axis. Should be greater or equal to 0.
     */
    xes?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX[];
    /**
     * The position of the widget on the y (vertical) axis. Should be greater or equal to 0.
     */
    ys?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY[];
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestX {
    /**
     * The aggregator to use for time aggregation. One of `avg`, `min`, `max`, `sum`, `last`.
     * - `y`: (Optional) The query used for the Y-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `xaxis`: (Optional) Nested block describing the X-Axis Controls. The structure of this block is described below
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     */
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery;
    q?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestXProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestY {
    /**
     * The aggregator to use for time aggregation. One of `avg`, `min`, `max`, `sum`, `last`.
     * - `y`: (Optional) The query used for the Y-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `xaxis`: (Optional) Nested block describing the X-Axis Controls. The structure of this block is described below
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     */
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery;
    q?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionRequestYProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionXaxis {
    /**
     * Always include zero or fit the axis to the data range.
     */
    includeZero?: boolean;
    /**
     * The label of the axis to display on the graph.
     */
    label?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    max?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    min?: string;
    /**
     * Specifies the scale type. One of "linear", "log", "pow", "sqrt".
     */
    scale?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetScatterplotDefinitionYaxis {
    /**
     * Always include zero or fit the axis to the data range.
     */
    includeZero?: boolean;
    /**
     * The label of the axis to display on the graph.
     */
    label?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    max?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    min?: string;
    /**
     * Specifies the scale type. One of "linear", "log", "pow", "sqrt".
     */
    scale?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetServiceLevelObjectiveDefinition {
    showErrorBudget?: boolean;
    sloId: string;
    timeWindows: string[];
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    viewMode: string;
    viewType: string;
}

export interface DashboardWidgetGroupDefinitionWidgetServicemapDefinition {
    filters: string[];
    service: string;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinition {
    events?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent[];
    legendSize?: string;
    /**
     * Nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple marker blocks are allowed within a given tileDef block.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `event`: (Optional) The definition of the event to overlay on the graph. Includes the following structure:
     * - `q`: (Required) The event query to use in the widget.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters.
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     * - `toplistDefinition`: The definition for a Toplist  widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apmQuery`, `logQuery` or `processQuery` is required within the request block):
     * - `q`: (Optional) The metric query to use in the widget.
     * - `apmQuery`: (Optional) The APM query to use in the widget. The structure of this block is described below.
     * - `logQuery`: (Optional) The log query to use in the widget. The structure of this block is described below.
     * - `processQuery`: (Optional) The process query to use in the widget. The structure of this block is described below.
     */
    markers?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker[];
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest[];
    showLegend?: boolean;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    yaxis?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionEvent {
    q: string;
    tagsExecution?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionMarker {
    /**
     * Type of display to use for the request. Available values are: `area`, `bars`, or `line`.
     */
    displayType?: string;
    /**
     * The label of the axis to display on the graph.
     */
    label?: string;
    /**
     * Value for the comparator.
     */
    value: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery;
    /**
     * Type of display to use for the request. Available values are: `area`, `bars`, or `line`.
     */
    displayType?: string;
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery;
    /**
     * . Used to define expression aliases. Multiple nested blocks are allowed with the following structure:
     */
    metadatas?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata[];
    networkQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery;
    /**
     * Style of the widget graph. One nested block is allowed with the following structure:
     */
    style?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestMetadata {
    aliasName?: string;
    expression: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestNetworkQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestRumQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionRequestStyle {
    /**
     * Type of lines displayed. Available values are: `dashed`, `dotted`, or `solid`.
     */
    lineType?: string;
    /**
     * Width of line displayed. Available values are: `normal`, `thick`, or `thin`.
     */
    lineWidth?: string;
    /**
     * Color palette to apply to the widget. The available options are available here: https://docs.datadoghq.com/graphing/widgets/timeseries/#appearance.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `eventStreamDefinition`: The definition for a Event Stream widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `event`: (Optional) The definition of the event to overlay on the graph. Includes the following structure:
     * - `q`: (Required) The event query to use in the widget.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `hostmapDefinition`: The definition for a Hostmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `fill`: (Optional) The query used to fill the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `size`: (Optional) The query used to size the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    palette?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTimeseriesDefinitionYaxis {
    /**
     * Always include zero or fit the axis to the data range.
     */
    includeZero?: boolean;
    /**
     * The label of the axis to display on the graph.
     */
    label?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    max?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    min?: string;
    /**
     * Specifies the scale type. One of "linear", "log", "pow", "sqrt".
     */
    scale?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinition {
    requests?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest[];
    time?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery;
    /**
     * Conditional formats allow you to set the color of your widget content or background, depending on a rule applied to your data. Multiple request blocks are allowed. The structure of this block is described below.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `traceServiceDefinition`: The definition for a Trace Service widget. Exactly one nested block is allowed with the following structure:
     * - `env`: (Required) APM environment.
     * - `service`: (Required) APM service.
     * - `spanName`: (Required) APM span name.
     * - `showHits`: (Optional) APM span name.
     * - `showHits`: (Optional) Whether to show the hits metrics or not.
     * - `showErrors`: (Optional) Whether to show the error metrics or not.
     * - `showLatency`: (Optional) Whether to show the latency metrics or not.
     * - `showBreakdown`: (Optional) Whether to show the latency breakdown or not.
     * - `showDistribution`: (Optional) Whether to show the latency distribution or not.
     * - `showResourceList`: (Optional) Whether to show the resource list or not.
     * - `sizeFormat`: (Optional) Size of the widget. Available values are: `small`, `medium`, or `large`.
     * - `displayFormat`: (Optional) Number of columns to display. Available values are: `oneColumn`, `twoColumn`, or `threeColumn`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     */
    conditionalFormats?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat[];
    logQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery;
    q?: string;
    /**
     * Style of the widget graph. One nested block is allowed with the following structure:
     */
    style?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestConditionalFormat {
    /**
     * Comparator to apply from: One of `>`, `>=`, `<`, or `<=`.
     */
    comparator: string;
    /**
     * Color palette to apply to the background, same values available as palette.
     */
    customBgColor?: string;
    /**
     * Color palette to apply to the foreground, same values available as palette.
     */
    customFgColor?: string;
    hideValue?: boolean;
    /**
     * Displays an image as the background.
     * .
     */
    imageUrl?: string;
    /**
     * Color palette to apply; One of `blue`, `customBg`, `customImage`, `customText`, `grayOnWhite`, `green`, `greenOnWhite`, `grey`, `orange`, `red`, `redOnWhite`, `whiteOnGray`, `whiteOnGreen`, `whiteOnRed`, `whiteOnYellow`, or `yellowOnWhite`.
     */
    palette: string;
    timeframe?: string;
    /**
     * Value for the comparator.
     */
    value: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionRequestStyle {
    /**
     * Color palette to apply to the widget. The available options are available here: https://docs.datadoghq.com/graphing/widgets/timeseries/#appearance.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `eventStreamDefinition`: The definition for a Event Stream widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `event`: (Optional) The definition of the event to overlay on the graph. Includes the following structure:
     * - `q`: (Required) The event query to use in the widget.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `hostmapDefinition`: The definition for a Hostmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `fill`: (Optional) The query used to fill the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `size`: (Optional) The query used to size the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    palette?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetToplistDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTraceServiceDefinition {
    /**
     * The display setting to use. One of "counts", "list", or "countsAndList".
     */
    displayFormat?: string;
    env: string;
    service: string;
    showBreakdown?: boolean;
    showDistribution?: boolean;
    showErrors?: boolean;
    showHits?: boolean;
    showLatency?: boolean;
    showResourceList?: boolean;
    sizeFormat?: string;
    spanName: string;
    time?: outputs.DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetGroupDefinitionWidgetTraceServiceDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetHeatmapDefinition {
    events?: outputs.DashboardWidgetHeatmapDefinitionEvent[];
    legendSize?: string;
    requests?: outputs.DashboardWidgetHeatmapDefinitionRequest[];
    showLegend?: boolean;
    time?: outputs.DashboardWidgetHeatmapDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    yaxis?: outputs.DashboardWidgetHeatmapDefinitionYaxis;
}

export interface DashboardWidgetHeatmapDefinitionEvent {
    q: string;
    tagsExecution?: string;
}

export interface DashboardWidgetHeatmapDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestApmQuery;
    logQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetHeatmapDefinitionRequestProcessQuery;
    q?: string;
    /**
     * Style of the widget graph. One nested block is allowed with the following structure:
     */
    style?: outputs.DashboardWidgetHeatmapDefinitionRequestStyle;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetHeatmapDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetHeatmapDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetHeatmapDefinitionRequestStyle {
    /**
     * Color palette to apply to the widget. The available options are available here: https://docs.datadoghq.com/graphing/widgets/timeseries/#appearance.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `eventStreamDefinition`: The definition for a Event Stream widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `event`: (Optional) The definition of the event to overlay on the graph. Includes the following structure:
     * - `q`: (Required) The event query to use in the widget.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `hostmapDefinition`: The definition for a Hostmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `fill`: (Optional) The query used to fill the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `size`: (Optional) The query used to size the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    palette?: string;
}

export interface DashboardWidgetHeatmapDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetHeatmapDefinitionYaxis {
    /**
     * Always include zero or fit the axis to the data range.
     */
    includeZero?: boolean;
    /**
     * The label of the axis to display on the graph.
     */
    label?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    max?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    min?: string;
    /**
     * Specifies the scale type. One of "linear", "log", "pow", "sqrt".
     */
    scale?: string;
}

export interface DashboardWidgetHostmapDefinition {
    /**
     * The check group to use in the widget.
     */
    groups?: string[];
    /**
     * Boolean indicating whether to show ungrouped nodes.
     */
    noGroupHosts?: boolean;
    /**
     * Boolean indicating whether to show nodes with no metrics.
     */
    noMetricHosts?: boolean;
    /**
     * The type of node used. Either "host" or "container".
     */
    nodeType?: string;
    request?: outputs.DashboardWidgetHostmapDefinitionRequest;
    /**
     * The list of tags to filter nodes by.
     */
    scopes?: string[];
    /**
     * Style of the widget graph. One nested block is allowed with the following structure:
     */
    style?: outputs.DashboardWidgetHostmapDefinitionStyle;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetHostmapDefinitionRequest {
    fills?: outputs.DashboardWidgetHostmapDefinitionRequestFill[];
    sizes?: outputs.DashboardWidgetHostmapDefinitionRequestSize[];
}

export interface DashboardWidgetHostmapDefinitionRequestFill {
    apmQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQuery;
    logQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQuery;
    processQuery?: outputs.DashboardWidgetHostmapDefinitionRequestFillProcessQuery;
    q?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQuerySearch;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySort;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillApmQuerySearch {
    query: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQuerySearch;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySort;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillLogQuerySearch {
    query: string;
}

export interface DashboardWidgetHostmapDefinitionRequestFillProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSize {
    apmQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQuery;
    logQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQuery;
    processQuery?: outputs.DashboardWidgetHostmapDefinitionRequestSizeProcessQuery;
    q?: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQuerySearch;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeApmQuerySearch {
    query: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQuerySearch;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeLogQuerySearch {
    query: string;
}

export interface DashboardWidgetHostmapDefinitionRequestSizeProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetHostmapDefinitionStyle {
    /**
     * Max value to use to color the map.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `iframeDefinition`: The definition for a Iframe widget. Exactly one nested block is allowed with the following structure:
     */
    fillMax?: string;
    /**
     * Min value to use to color the map.
     */
    fillMin?: string;
    /**
     * Color palette to apply to the widget. The available options are available here: https://docs.datadoghq.com/graphing/widgets/timeseries/#appearance.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `eventStreamDefinition`: The definition for a Event Stream widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `event`: (Optional) The definition of the event to overlay on the graph. Includes the following structure:
     * - `q`: (Required) The event query to use in the widget.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `hostmapDefinition`: The definition for a Hostmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `fill`: (Optional) The query used to fill the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `size`: (Optional) The query used to size the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    palette?: string;
    /**
     * Boolean indicating whether to flip the palette tones.
     */
    paletteFlip?: boolean;
}

export interface DashboardWidgetIframeDefinition {
    /**
     * Read only field - The URL of the dashboard.
     */
    url: string;
}

export interface DashboardWidgetImageDefinition {
    /**
     * The margins to use around the image. Either "small" or "large".
     * - `logStreamDefinition`: The definition for a Log Stream widget. Exactly one nested block is allowed with the following structure:
     */
    margin?: string;
    /**
     * The preferred method to adapt the dimensions of the image to those of the widget. One of "center" (center the image in the tile), "zoom" (zoom the image to cover the whole tile) or "fit" (fit the image dimensions to those of the tile).
     */
    sizing?: string;
    /**
     * Read only field - The URL of the dashboard.
     */
    url: string;
}

export interface DashboardWidgetLayout {
    /**
     * The height of the widget.
     */
    height: number;
    /**
     * The width of the widget.
     */
    width: number;
    /**
     * The position of the widget on the x (horizontal) axis. Should be greater or equal to 0.
     */
    x: number;
    /**
     * The position of the widget on the y (vertical) axis. Should be greater or equal to 0.
     */
    y: number;
}

export interface DashboardWidgetLogStreamDefinition {
    /**
     * Stringified list of columns to use. Example: `"["column1","column2","column3"]"`.
     */
    columns?: string[];
    indexes?: string[];
    /**
     * ID of the logset to use.
     * - `query`: (Optional) The query to use in the widget.
     *
     * @deprecated This parameter has been deprecated. Use 'indexes' instead
     */
    logset?: string;
    /**
     * The amount of lines the message column should display. One of: `inline`, `expanded-md`, and `expanded-lg`.
     */
    messageDisplay?: string;
    query?: string;
    /**
     * If the date column should be displayed.
     */
    showDateColumn?: boolean;
    /**
     * If the message column should be displayed.
     */
    showMessageColumn?: boolean;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetLogStreamDefinitionSort;
    time?: outputs.DashboardWidgetLogStreamDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetLogStreamDefinitionSort {
    column: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetLogStreamDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetManageStatusDefinition {
    /**
     * Whether to colorize text or background. One of "text", "background".
     */
    colorPreference?: string;
    /**
     * @deprecated This parameter has been deprecated
     */
    count?: number;
    /**
     * The display setting to use. One of "counts", "list", or "countsAndList".
     */
    displayFormat?: string;
    /**
     * Boolean indicating whether to hide empty categories.
     */
    hideZeroCounts?: boolean;
    query: string;
    /**
     * Boolean indicating whether to show when monitors/groups last triggered.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `noteDefinition`: The definition for a Note widget. Exactly one nested block is allowed with the following structure:
     */
    showLastTriggered?: boolean;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: string;
    /**
     * @deprecated This parameter has been deprecated
     */
    start?: number;
    /**
     * The monitor summary type to use. One of "monitors", "groups", or "combined". Defaults to "monitors".
     */
    summaryType?: string;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetNoteDefinition {
    /**
     * Background color of the note.
     */
    backgroundColor?: string;
    /**
     * Content of the note.
     */
    content: string;
    /**
     * The size of the text in the widget.
     */
    fontSize?: string;
    /**
     * Whether to show a tick or not.
     */
    showTick?: boolean;
    /**
     * The alignment of the text in the widget.
     * - `heatmapDefinition`: The definition for a Heatmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `queryTableDefinition`: The definition for a Query Table widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apmQuery`, `logQuery` or `processQuery` is required within the request block):
     * - `q`: (Optional) The metric query to use in the widget
     * - `apmQuery`: (Optional) The APM query to use in the widget. The structure of this block is described below.
     * - `logQuery`: (Optional) The log query to use in the widget. The structure of this block is described below.
     * - `processQuery`: (Optional) The process query to use in the widget. The structure of this block is described below.
     */
    textAlign?: string;
    /**
     * When tick = true, string indicating on which side of the widget the tick should be displayed. One of "bottom", "top", "left", "right".
     * - `queryValueDefinition`: The definition for a Query Value widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apmQuery`, `logQuery` or `processQuery` is required within the request block):
     * - `q`: (Optional) The metric query to use in the widget.
     * - `apmQuery`: (Optional) The APM query to use in the widget. The structure of this block is described below.
     * - `logQuery`: (Optional) The log query to use in the widget. The structure of this block is described below.
     * - `processQuery`: (Optional) The process query to use in the widget. The structure of this block is described below.
     */
    tickEdge?: string;
    /**
     * When tick = true, string with a percent sign indicating the position of the tick. Example: use tickPos = "50%" for centered alignment.
     */
    tickPos?: string;
}

export interface DashboardWidgetQueryTableDefinition {
    requests?: outputs.DashboardWidgetQueryTableDefinitionRequest[];
    time?: outputs.DashboardWidgetQueryTableDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequest {
    /**
     * The aggregator to use for time aggregation. One of `avg`, `min`, `max`, `sum`, `last`.
     * - `y`: (Optional) The query used for the Y-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `xaxis`: (Optional) Nested block describing the X-Axis Controls. The structure of this block is described below
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     */
    aggregator?: string;
    /**
     * The alias for the column name. Default is the metric name.
     */
    alias?: string;
    apmQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestApmQuery;
    /**
     * Conditional formats allow you to set the color of your widget content or background, depending on a rule applied to your data. Multiple request blocks are allowed. The structure of this block is described below.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `traceServiceDefinition`: The definition for a Trace Service widget. Exactly one nested block is allowed with the following structure:
     * - `env`: (Required) APM environment.
     * - `service`: (Required) APM service.
     * - `spanName`: (Required) APM span name.
     * - `showHits`: (Optional) APM span name.
     * - `showHits`: (Optional) Whether to show the hits metrics or not.
     * - `showErrors`: (Optional) Whether to show the error metrics or not.
     * - `showLatency`: (Optional) Whether to show the latency metrics or not.
     * - `showBreakdown`: (Optional) Whether to show the latency breakdown or not.
     * - `showDistribution`: (Optional) Whether to show the latency distribution or not.
     * - `showResourceList`: (Optional) Whether to show the resource list or not.
     * - `sizeFormat`: (Optional) Size of the widget. Available values are: `small`, `medium`, or `large`.
     * - `displayFormat`: (Optional) Number of columns to display. Available values are: `oneColumn`, `twoColumn`, or `threeColumn`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     */
    conditionalFormats?: outputs.DashboardWidgetQueryTableDefinitionRequestConditionalFormat[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    logQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestLogQuery;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order?: string;
    processQuery?: outputs.DashboardWidgetQueryTableDefinitionRequestProcessQuery;
    q?: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetQueryTableDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestConditionalFormat {
    /**
     * Comparator to apply from: One of `>`, `>=`, `<`, or `<=`.
     */
    comparator: string;
    /**
     * Color palette to apply to the background, same values available as palette.
     */
    customBgColor?: string;
    /**
     * Color palette to apply to the foreground, same values available as palette.
     */
    customFgColor?: string;
    hideValue?: boolean;
    /**
     * Displays an image as the background.
     * .
     */
    imageUrl?: string;
    /**
     * Color palette to apply; One of `blue`, `customBg`, `customImage`, `customText`, `grayOnWhite`, `green`, `greenOnWhite`, `grey`, `orange`, `red`, `redOnWhite`, `whiteOnGray`, `whiteOnGreen`, `whiteOnRed`, `whiteOnYellow`, or `yellowOnWhite`.
     */
    palette: string;
    timeframe?: string;
    /**
     * Value for the comparator.
     */
    value: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetQueryTableDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetQueryTableDefinitionRequestProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetQueryTableDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetQueryValueDefinition {
    /**
     * Boolean indicating whether to automatically scale the tile.
     */
    autoscale?: boolean;
    /**
     * The unit for the value displayed in the widget.
     */
    customUnit?: string;
    /**
     * The precision to use when displaying the tile.
     */
    precision?: number;
    requests?: outputs.DashboardWidgetQueryValueDefinitionRequest[];
    /**
     * The alignment of the text in the widget.
     * - `heatmapDefinition`: The definition for a Heatmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `queryTableDefinition`: The definition for a Query Table widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apmQuery`, `logQuery` or `processQuery` is required within the request block):
     * - `q`: (Optional) The metric query to use in the widget
     * - `apmQuery`: (Optional) The APM query to use in the widget. The structure of this block is described below.
     * - `logQuery`: (Optional) The log query to use in the widget. The structure of this block is described below.
     * - `processQuery`: (Optional) The process query to use in the widget. The structure of this block is described below.
     */
    textAlign?: string;
    time?: outputs.DashboardWidgetQueryValueDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequest {
    /**
     * The aggregator to use for time aggregation. One of `avg`, `min`, `max`, `sum`, `last`.
     * - `y`: (Optional) The query used for the Y-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `xaxis`: (Optional) Nested block describing the X-Axis Controls. The structure of this block is described below
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     */
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestApmQuery;
    /**
     * Conditional formats allow you to set the color of your widget content or background, depending on a rule applied to your data. Multiple request blocks are allowed. The structure of this block is described below.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `traceServiceDefinition`: The definition for a Trace Service widget. Exactly one nested block is allowed with the following structure:
     * - `env`: (Required) APM environment.
     * - `service`: (Required) APM service.
     * - `spanName`: (Required) APM span name.
     * - `showHits`: (Optional) APM span name.
     * - `showHits`: (Optional) Whether to show the hits metrics or not.
     * - `showErrors`: (Optional) Whether to show the error metrics or not.
     * - `showLatency`: (Optional) Whether to show the latency metrics or not.
     * - `showBreakdown`: (Optional) Whether to show the latency breakdown or not.
     * - `showDistribution`: (Optional) Whether to show the latency distribution or not.
     * - `showResourceList`: (Optional) Whether to show the resource list or not.
     * - `sizeFormat`: (Optional) Size of the widget. Available values are: `small`, `medium`, or `large`.
     * - `displayFormat`: (Optional) Number of columns to display. Available values are: `oneColumn`, `twoColumn`, or `threeColumn`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     */
    conditionalFormats?: outputs.DashboardWidgetQueryValueDefinitionRequestConditionalFormat[];
    logQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetQueryValueDefinitionRequestProcessQuery;
    q?: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetQueryValueDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestConditionalFormat {
    /**
     * Comparator to apply from: One of `>`, `>=`, `<`, or `<=`.
     */
    comparator: string;
    /**
     * Color palette to apply to the background, same values available as palette.
     */
    customBgColor?: string;
    /**
     * Color palette to apply to the foreground, same values available as palette.
     */
    customFgColor?: string;
    hideValue?: boolean;
    /**
     * Displays an image as the background.
     * .
     */
    imageUrl?: string;
    /**
     * Color palette to apply; One of `blue`, `customBg`, `customImage`, `customText`, `grayOnWhite`, `green`, `greenOnWhite`, `grey`, `orange`, `red`, `redOnWhite`, `whiteOnGray`, `whiteOnGreen`, `whiteOnRed`, `whiteOnYellow`, or `yellowOnWhite`.
     */
    palette: string;
    timeframe?: string;
    /**
     * Value for the comparator.
     */
    value: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetQueryValueDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetQueryValueDefinitionRequestProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetQueryValueDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetScatterplotDefinition {
    /**
     * List of groups used for colors.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `servicemapDefinition`: The definition for a Service Map widget. Exactly one nested block is allowed with the following structure:
     * - `filters`: (Required) Your environment and primary tag (or * if enabled for your account).
     * - `service`: (Required) The ID of the service you want to map.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `serviceLevelObjectiveDefinition`: The definition for a Service Level Objective widget. Exactly one nested block is allowed with the following structure:
     * - `viewType`: (Required) Type of view to use when displaying the widget. Only "detail" is currently supported.
     * - `sloId`: (Required) The ID of the service level objective used by the widget.
     * - `showErrorBudget`: (Optional) Whether to show the error budget or not.
     * - `viewMode`: (Required) View mode for the widget. One of "overall", "component", or "both".
     * - `timeWindows`: (Required) List of time windows to display in the widget. Each value in the list must be one of "7d", "30d", "90d", "weekToDate",  "previousWeek", "monthToDate", or "previousMonth".
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `timeseriesDefinition`: The definition for a Timeseries  widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apmQuery`, `logQuery` or `processQuery` is required within the request block):
     * - `q`: (Optional) The metric query to use in the widget.
     * - `apmQuery`: (Optional) The APM query to use in the widget. The structure of this block is described below.
     * - `logQuery`: (Optional) The log query to use in the widget. The structure of this block is described below.
     * - `networkQuery`: (Optional) The network query to use in the widget. The structure of this block is described below.
     * - `rumQuery`: (Optional) The rum query to use in the widget. The structure of this block is described below.
     * - `processQuery`: (Optional) The process query to use in the widget. The structure of this block is described below.
     */
    colorByGroups?: string[];
    request?: outputs.DashboardWidgetScatterplotDefinitionRequest;
    time?: outputs.DashboardWidgetScatterplotDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    xaxis?: outputs.DashboardWidgetScatterplotDefinitionXaxis;
    yaxis?: outputs.DashboardWidgetScatterplotDefinitionYaxis;
}

export interface DashboardWidgetScatterplotDefinitionRequest {
    /**
     * The position of the widget on the x (horizontal) axis. Should be greater or equal to 0.
     */
    xes?: outputs.DashboardWidgetScatterplotDefinitionRequestX[];
    /**
     * The position of the widget on the y (vertical) axis. Should be greater or equal to 0.
     */
    ys?: outputs.DashboardWidgetScatterplotDefinitionRequestY[];
}

export interface DashboardWidgetScatterplotDefinitionRequestX {
    /**
     * The aggregator to use for time aggregation. One of `avg`, `min`, `max`, `sum`, `last`.
     * - `y`: (Optional) The query used for the Y-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `xaxis`: (Optional) Nested block describing the X-Axis Controls. The structure of this block is described below
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     */
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQuery;
    logQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQuery;
    processQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestXProcessQuery;
    q?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQuerySearch;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySort;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXApmQuerySearch {
    query: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQuerySearch;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySort;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXLogQuerySearch {
    query: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestXProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestY {
    /**
     * The aggregator to use for time aggregation. One of `avg`, `min`, `max`, `sum`, `last`.
     * - `y`: (Optional) The query used for the Y-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `xaxis`: (Optional) Nested block describing the X-Axis Controls. The structure of this block is described below
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     */
    aggregator?: string;
    apmQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQuery;
    logQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQuery;
    processQuery?: outputs.DashboardWidgetScatterplotDefinitionRequestYProcessQuery;
    q?: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQuerySearch;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySort;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYApmQuerySearch {
    query: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQuerySearch;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySort;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYLogQuerySearch {
    query: string;
}

export interface DashboardWidgetScatterplotDefinitionRequestYProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetScatterplotDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetScatterplotDefinitionXaxis {
    /**
     * Always include zero or fit the axis to the data range.
     */
    includeZero?: boolean;
    /**
     * The label of the axis to display on the graph.
     */
    label?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    max?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    min?: string;
    /**
     * Specifies the scale type. One of "linear", "log", "pow", "sqrt".
     */
    scale?: string;
}

export interface DashboardWidgetScatterplotDefinitionYaxis {
    /**
     * Always include zero or fit the axis to the data range.
     */
    includeZero?: boolean;
    /**
     * The label of the axis to display on the graph.
     */
    label?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    max?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    min?: string;
    /**
     * Specifies the scale type. One of "linear", "log", "pow", "sqrt".
     */
    scale?: string;
}

export interface DashboardWidgetServiceLevelObjectiveDefinition {
    showErrorBudget?: boolean;
    sloId: string;
    timeWindows: string[];
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    viewMode: string;
    viewType: string;
}

export interface DashboardWidgetServicemapDefinition {
    filters: string[];
    service: string;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetTimeseriesDefinition {
    events?: outputs.DashboardWidgetTimeseriesDefinitionEvent[];
    legendSize?: string;
    /**
     * Nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple marker blocks are allowed within a given tileDef block.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `event`: (Optional) The definition of the event to overlay on the graph. Includes the following structure:
     * - `q`: (Required) The event query to use in the widget.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters.
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     * - `toplistDefinition`: The definition for a Toplist  widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure (exactly only one of `q`, `apmQuery`, `logQuery` or `processQuery` is required within the request block):
     * - `q`: (Optional) The metric query to use in the widget.
     * - `apmQuery`: (Optional) The APM query to use in the widget. The structure of this block is described below.
     * - `logQuery`: (Optional) The log query to use in the widget. The structure of this block is described below.
     * - `processQuery`: (Optional) The process query to use in the widget. The structure of this block is described below.
     */
    markers?: outputs.DashboardWidgetTimeseriesDefinitionMarker[];
    requests?: outputs.DashboardWidgetTimeseriesDefinitionRequest[];
    showLegend?: boolean;
    time?: outputs.DashboardWidgetTimeseriesDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
    yaxis?: outputs.DashboardWidgetTimeseriesDefinitionYaxis;
}

export interface DashboardWidgetTimeseriesDefinitionEvent {
    q: string;
    tagsExecution?: string;
}

export interface DashboardWidgetTimeseriesDefinitionMarker {
    /**
     * Type of display to use for the request. Available values are: `area`, `bars`, or `line`.
     */
    displayType?: string;
    /**
     * The label of the axis to display on the graph.
     */
    label?: string;
    /**
     * Value for the comparator.
     */
    value: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQuery;
    /**
     * Type of display to use for the request. Available values are: `area`, `bars`, or `line`.
     */
    displayType?: string;
    logQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQuery;
    /**
     * . Used to define expression aliases. Multiple nested blocks are allowed with the following structure:
     */
    metadatas?: outputs.DashboardWidgetTimeseriesDefinitionRequestMetadata[];
    networkQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQuery;
    processQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestProcessQuery;
    q?: string;
    rumQuery?: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQuery;
    /**
     * Style of the widget graph. One nested block is allowed with the following structure:
     */
    style?: outputs.DashboardWidgetTimeseriesDefinitionRequestStyle;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestMetadata {
    aliasName?: string;
    expression: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQuerySearch;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySort;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestNetworkQuerySearch {
    query: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQuerySearch;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySort;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestRumQuerySearch {
    query: string;
}

export interface DashboardWidgetTimeseriesDefinitionRequestStyle {
    /**
     * Type of lines displayed. Available values are: `dashed`, `dotted`, or `solid`.
     */
    lineType?: string;
    /**
     * Width of line displayed. Available values are: `normal`, `thick`, or `thin`.
     */
    lineWidth?: string;
    /**
     * Color palette to apply to the widget. The available options are available here: https://docs.datadoghq.com/graphing/widgets/timeseries/#appearance.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `eventStreamDefinition`: The definition for a Event Stream widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `event`: (Optional) The definition of the event to overlay on the graph. Includes the following structure:
     * - `q`: (Required) The event query to use in the widget.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `hostmapDefinition`: The definition for a Hostmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `fill`: (Optional) The query used to fill the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `size`: (Optional) The query used to size the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    palette?: string;
}

export interface DashboardWidgetTimeseriesDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetTimeseriesDefinitionYaxis {
    /**
     * Always include zero or fit the axis to the data range.
     */
    includeZero?: boolean;
    /**
     * The label of the axis to display on the graph.
     */
    label?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    max?: string;
    /**
     * Specify the minimum value to show on y-axis.
     */
    min?: string;
    /**
     * Specifies the scale type. One of "linear", "log", "pow", "sqrt".
     */
    scale?: string;
}

export interface DashboardWidgetToplistDefinition {
    requests?: outputs.DashboardWidgetToplistDefinitionRequest[];
    time?: outputs.DashboardWidgetToplistDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetToplistDefinitionRequest {
    apmQuery?: outputs.DashboardWidgetToplistDefinitionRequestApmQuery;
    /**
     * Conditional formats allow you to set the color of your widget content or background, depending on a rule applied to your data. Multiple request blocks are allowed. The structure of this block is described below.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `traceServiceDefinition`: The definition for a Trace Service widget. Exactly one nested block is allowed with the following structure:
     * - `env`: (Required) APM environment.
     * - `service`: (Required) APM service.
     * - `spanName`: (Required) APM span name.
     * - `showHits`: (Optional) APM span name.
     * - `showHits`: (Optional) Whether to show the hits metrics or not.
     * - `showErrors`: (Optional) Whether to show the error metrics or not.
     * - `showLatency`: (Optional) Whether to show the latency metrics or not.
     * - `showBreakdown`: (Optional) Whether to show the latency breakdown or not.
     * - `showDistribution`: (Optional) Whether to show the latency distribution or not.
     * - `showResourceList`: (Optional) Whether to show the resource list or not.
     * - `sizeFormat`: (Optional) Size of the widget. Available values are: `small`, `medium`, or `large`.
     * - `displayFormat`: (Optional) Number of columns to display. Available values are: `oneColumn`, `twoColumn`, or `threeColumn`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     */
    conditionalFormats?: outputs.DashboardWidgetToplistDefinitionRequestConditionalFormat[];
    logQuery?: outputs.DashboardWidgetToplistDefinitionRequestLogQuery;
    processQuery?: outputs.DashboardWidgetToplistDefinitionRequestProcessQuery;
    q?: string;
    /**
     * Style of the widget graph. One nested block is allowed with the following structure:
     */
    style?: outputs.DashboardWidgetToplistDefinitionRequestStyle;
}

export interface DashboardWidgetToplistDefinitionRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetToplistDefinitionRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetToplistDefinitionRequestApmQuerySearch;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetToplistDefinitionRequestApmQueryGroupBySort;
}

export interface DashboardWidgetToplistDefinitionRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetToplistDefinitionRequestApmQuerySearch {
    query: string;
}

export interface DashboardWidgetToplistDefinitionRequestConditionalFormat {
    /**
     * Comparator to apply from: One of `>`, `>=`, `<`, or `<=`.
     */
    comparator: string;
    /**
     * Color palette to apply to the background, same values available as palette.
     */
    customBgColor?: string;
    /**
     * Color palette to apply to the foreground, same values available as palette.
     */
    customFgColor?: string;
    hideValue?: boolean;
    /**
     * Displays an image as the background.
     * .
     */
    imageUrl?: string;
    /**
     * Color palette to apply; One of `blue`, `customBg`, `customImage`, `customText`, `grayOnWhite`, `green`, `greenOnWhite`, `grey`, `orange`, `red`, `redOnWhite`, `whiteOnGray`, `whiteOnGreen`, `whiteOnRed`, `whiteOnYellow`, or `yellowOnWhite`.
     */
    palette: string;
    timeframe?: string;
    /**
     * Value for the comparator.
     */
    value: number;
}

export interface DashboardWidgetToplistDefinitionRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.DashboardWidgetToplistDefinitionRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.DashboardWidgetToplistDefinitionRequestLogQuerySearch;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryGroupBy {
    facet?: string;
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    /**
     * The facet and order to sort the data based upon. Example: `"{"column": "time", "order": "desc"}"`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `manageStatusDefinition`: The definition for a Manage Status, aka Monitor Summary, widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     */
    sort?: outputs.DashboardWidgetToplistDefinitionRequestLogQueryGroupBySort;
}

export interface DashboardWidgetToplistDefinitionRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    /**
     * The sort order for the rows. One of `desc` or `asc`.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `scatterplotDefinition`: The definition for a Scatterplot widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Exactly one request block is allowed with the following structure:
     * - `x`: (Optional) The query used for the X-Axis. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    order: string;
}

export interface DashboardWidgetToplistDefinitionRequestLogQuerySearch {
    query: string;
}

export interface DashboardWidgetToplistDefinitionRequestProcessQuery {
    filterBies?: string[];
    /**
     * The number of lines to show in the table.
     */
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface DashboardWidgetToplistDefinitionRequestStyle {
    /**
     * Color palette to apply to the widget. The available options are available here: https://docs.datadoghq.com/graphing/widgets/timeseries/#appearance.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `eventStreamDefinition`: The definition for a Event Stream widget. Exactly one nested block is allowed with the following structure:
     * - `query`: (Required) The query to use in the widget.
     * - `yaxis`: (Optional) Nested block describing the Y-Axis Controls. The structure of this block is described below
     * - `showLegend`: (Optional) Whether or not to show the legend on this widget.
     * - `legendSize`: (Optional) The size of the legend displayed in the widget.
     * - `event`: (Optional) The definition of the event to overlay on the graph. Includes the following structure:
     * - `q`: (Required) The event query to use in the widget.
     * - `tagsExecution`: (Optional) The execution method for multi-value filters.
     * - `title`: (Optional) The title of the widget.
     * - `titleSize`: (Optional) The size of the widget's title. Default is 16.
     * - `titleAlign`: (Optional) The alignment of the widget's title. One of "left", "center", or "right".
     * - `time`: (Optional) Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below.
     * - `hostmapDefinition`: The definition for a Hostmap widget. Exactly one nested block is allowed with the following structure:
     * - `request`: (Required) Nested block describing the request to use when displaying the widget. Multiple request blocks are allowed with the following structure:
     * - `fill`: (Optional) The query used to fill the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     * - `size`: (Optional) The query used to size the map. Exactly one nested block is allowed with the following structure:
     * - `q`: (Required) The metric query to use in the widget.
     */
    palette?: string;
}

export interface DashboardWidgetToplistDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DashboardWidgetTraceServiceDefinition {
    /**
     * The display setting to use. One of "counts", "list", or "countsAndList".
     */
    displayFormat?: string;
    env: string;
    service: string;
    showBreakdown?: boolean;
    showDistribution?: boolean;
    showErrors?: boolean;
    showHits?: boolean;
    showLatency?: boolean;
    showResourceList?: boolean;
    sizeFormat?: string;
    spanName: string;
    time?: outputs.DashboardWidgetTraceServiceDefinitionTime;
    /**
     * Title of the dashboard.
     */
    title?: string;
    titleAlign?: string;
    titleSize?: string;
}

export interface DashboardWidgetTraceServiceDefinitionTime {
    /**
     * The timeframe to use when displaying the widget. One of `10m`, `30m`, `1h`, `4h`, `1d`, `2d`, `1w`.
     */
    liveSpan?: string;
}

export interface DowntimeRecurrence {
    /**
     * How often to repeat as an integer. For example to repeat every 3 days, select a type of days and a period of 3.
     */
    period: number;
    /**
     * days, weeks, months, or years
     */
    type: string;
    /**
     * The date at which the recurrence should end as a POSIX timestamp. `untilOccurrences` and `untilDate` are mutually exclusive.
     */
    untilDate?: number;
    /**
     * How many times the downtime will be rescheduled. `untilOccurrences` and `untilDate` are mutually exclusive.
     */
    untilOccurrences?: number;
    /**
     * A list of week days to repeat on. Choose from: Mon, Tue, Wed, Thu, Fri, Sat or Sun. Only applicable when type is weeks. First letter must be capitalized.
     */
    weekDays?: string[];
}

export interface GetMonitorThresholdWindows {
    recoveryWindow: string;
    triggerWindow: string;
}

export interface GetMonitorThresholds {
    critical: number;
    criticalRecovery: number;
    ok: number;
    unknown: number;
    warning: number;
    warningRecovery: number;
}

export interface LogsArchiveAzure {
    /**
     * Your client id.
     */
    clientId: string;
    /**
     * The container where the archive will be stored.
     */
    container: string;
    /**
     * The path where the archive will be stored.
     */
    path?: string;
    /**
     * The associated storage account.
     */
    storageAccount: string;
    /**
     * Your tenant id.
     */
    tenantId: string;
}

export interface LogsArchiveGcs {
    /**
     * Name of your gcs bucket.
     */
    bucket: string;
    /**
     * Your client email.
     */
    clientEmail: string;
    /**
     * The path where the archive will be stored.
     */
    path: string;
    /**
     * Your project id.
     */
    projectId: string;
}

export interface LogsArchiveS3 {
    /**
     * Your AWS account id.
     */
    accountId: string;
    /**
     * Name of your gcs bucket.
     */
    bucket: string;
    /**
     * Your client email.
     */
    clientEmail: string;
    /**
     * The path where the archive will be stored.
     */
    path: string;
    /**
     * Your project id.
     */
    projectId: string;
    /**
     * Your AWS role name.
     */
    roleName: string;
}

export interface LogsCustomPipelineFilter {
    query: string;
}

export interface LogsCustomPipelineProcessor {
    arithmeticProcessor?: outputs.LogsCustomPipelineProcessorArithmeticProcessor;
    attributeRemapper?: outputs.LogsCustomPipelineProcessorAttributeRemapper;
    categoryProcessor?: outputs.LogsCustomPipelineProcessorCategoryProcessor;
    dateRemapper?: outputs.LogsCustomPipelineProcessorDateRemapper;
    geoIpParser?: outputs.LogsCustomPipelineProcessorGeoIpParser;
    grokParser?: outputs.LogsCustomPipelineProcessorGrokParser;
    lookupProcessor?: outputs.LogsCustomPipelineProcessorLookupProcessor;
    messageRemapper?: outputs.LogsCustomPipelineProcessorMessageRemapper;
    pipeline?: outputs.LogsCustomPipelineProcessorPipeline;
    serviceRemapper?: outputs.LogsCustomPipelineProcessorServiceRemapper;
    statusRemapper?: outputs.LogsCustomPipelineProcessorStatusRemapper;
    stringBuilderProcessor?: outputs.LogsCustomPipelineProcessorStringBuilderProcessor;
    traceIdRemapper?: outputs.LogsCustomPipelineProcessorTraceIdRemapper;
    urlParser?: outputs.LogsCustomPipelineProcessorUrlParser;
    userAgentParser?: outputs.LogsCustomPipelineProcessorUserAgentParser;
}

export interface LogsCustomPipelineProcessorArithmeticProcessor {
    /**
     * Arithmetic operation between one or more log attributes.
     */
    expression: string;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * If it replaces all missing attributes of `template` by an empty string.
     * * trace_id_remapper
     */
    isReplaceMissing?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorAttributeRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Override the target element if already set.
     */
    overrideOnConflict?: boolean;
    /**
     * Remove or preserve the remapped source element.
     */
    preserveSource?: boolean;
    /**
     * Defines where the sources are from (log `attribute` or `tag`).
     */
    sourceType: string;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
    /**
     * Defines if the target is a log `attribute` or `tag`.
     */
    targetType: string;
}

export interface LogsCustomPipelineProcessorCategoryProcessor {
    /**
     * List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
     */
    categories: outputs.LogsCustomPipelineProcessorCategoryProcessorCategory[];
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorCategoryProcessorCategory {
    /**
     * Defines the nested pipeline filter. Only logs that match the filter criteria are processed by this pipeline.
     */
    filters: outputs.LogsCustomPipelineProcessorCategoryProcessorCategoryFilter[];
    /**
     * Name of the processor
     */
    name: string;
}

export interface LogsCustomPipelineProcessorCategoryProcessorCategoryFilter {
    query: string;
}

export interface LogsCustomPipelineProcessorDateRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorGeoIpParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorGrokParser {
    grok: outputs.LogsCustomPipelineProcessorGrokParserGrok;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
     */
    samples?: string[];
    /**
     * Name of the source attribute used to do the lookup.
     */
    source: string;
}

export interface LogsCustomPipelineProcessorGrokParserGrok {
    /**
     * Match rules for your grok parser.
     */
    matchRules: string;
    /**
     * Support rules for your grok parser.
     */
    supportRules: string;
}

export interface LogsCustomPipelineProcessorLookupProcessor {
    /**
     * Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
     */
    defaultLookup?: string;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * List of entries of the lookup table using `"key,value"` format.
     */
    lookupTables: string[];
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the source attribute used to do the lookup.
     */
    source: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorMessageRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipeline {
    /**
     * Defines the nested pipeline filter. Only logs that match the filter criteria are processed by this pipeline.
     */
    filters: outputs.LogsCustomPipelineProcessorPipelineFilter[];
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name: string;
    /**
     * Processors. Nested pipeline can't take any other nested pipeline as its processor.
     */
    processors?: outputs.LogsCustomPipelineProcessorPipelineProcessor[];
}

export interface LogsCustomPipelineProcessorPipelineFilter {
    query: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessor {
    arithmeticProcessor?: outputs.LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor;
    attributeRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper;
    categoryProcessor?: outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor;
    dateRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorDateRemapper;
    geoIpParser?: outputs.LogsCustomPipelineProcessorPipelineProcessorGeoIpParser;
    grokParser?: outputs.LogsCustomPipelineProcessorPipelineProcessorGrokParser;
    lookupProcessor?: outputs.LogsCustomPipelineProcessorPipelineProcessorLookupProcessor;
    messageRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorMessageRemapper;
    serviceRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorServiceRemapper;
    statusRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorStatusRemapper;
    stringBuilderProcessor?: outputs.LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor;
    traceIdRemapper?: outputs.LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper;
    urlParser?: outputs.LogsCustomPipelineProcessorPipelineProcessorUrlParser;
    userAgentParser?: outputs.LogsCustomPipelineProcessorPipelineProcessorUserAgentParser;
}

export interface LogsCustomPipelineProcessorPipelineProcessorArithmeticProcessor {
    /**
     * Arithmetic operation between one or more log attributes.
     */
    expression: string;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * If it replaces all missing attributes of `template` by an empty string.
     * * trace_id_remapper
     */
    isReplaceMissing?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorAttributeRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Override the target element if already set.
     */
    overrideOnConflict?: boolean;
    /**
     * Remove or preserve the remapped source element.
     */
    preserveSource?: boolean;
    /**
     * Defines where the sources are from (log `attribute` or `tag`).
     */
    sourceType: string;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
    /**
     * Defines if the target is a log `attribute` or `tag`.
     */
    targetType: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessor {
    /**
     * List of filters to match or exclude a log with their corresponding name to assign a custom value to the log.
     */
    categories: outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategory[];
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategory {
    /**
     * Defines the nested pipeline filter. Only logs that match the filter criteria are processed by this pipeline.
     */
    filters: outputs.LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilter[];
    /**
     * Name of the processor
     */
    name: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorCategoryProcessorCategoryFilter {
    query: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorDateRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorGeoIpParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorGrokParser {
    grok: outputs.LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of sample logs for this parser. It can save up to 5 samples. Each sample takes up to 5000 characters.
     */
    samples?: string[];
    /**
     * Name of the source attribute used to do the lookup.
     */
    source: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorGrokParserGrok {
    /**
     * Match rules for your grok parser.
     */
    matchRules: string;
    /**
     * Support rules for your grok parser.
     */
    supportRules: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorLookupProcessor {
    /**
     * Default lookup value to use if there is no entry in the lookup table for the value of the source attribute.
     */
    defaultLookup?: string;
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * List of entries of the lookup table using `"key,value"` format.
     */
    lookupTables: string[];
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the source attribute used to do the lookup.
     */
    source: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorMessageRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorServiceRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorStatusRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorStringBuilderProcessor {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * If it replaces all missing attributes of `template` by an empty string.
     * * trace_id_remapper
     */
    isReplaceMissing?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
    /**
     * The formula with one or more attributes and raw text.
     */
    template: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorTraceIdRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorPipelineProcessorUrlParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Normalize the ending slashes or not.
     */
    normalizeEndingSlashes?: boolean;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorPipelineProcessorUserAgentParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * If the source attribute is URL encoded or not.
     */
    isEncoded?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorServiceRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorStatusRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorStringBuilderProcessor {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * If it replaces all missing attributes of `template` by an empty string.
     * * trace_id_remapper
     */
    isReplaceMissing?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
    /**
     * The formula with one or more attributes and raw text.
     */
    template: string;
}

export interface LogsCustomPipelineProcessorTraceIdRemapper {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
}

export interface LogsCustomPipelineProcessorUrlParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * Normalize the ending slashes or not.
     */
    normalizeEndingSlashes?: boolean;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsCustomPipelineProcessorUserAgentParser {
    /**
     * If the processor is enabled or not.
     */
    isEnabled?: boolean;
    /**
     * If the source attribute is URL encoded or not.
     */
    isEncoded?: boolean;
    /**
     * Name of the processor
     */
    name?: string;
    /**
     * List of source attributes.
     */
    sources: string[];
    /**
     * Name of the parent attribute that contains all the extracted details from the sources.
     */
    target: string;
}

export interface LogsIndexExclusionFilter {
    filters?: outputs.LogsIndexExclusionFilterFilter[];
    /**
     * A boolean stating if the exclusion is active or not.
     */
    isEnabled?: boolean;
    /**
     * The name of the exclusion filter.
     */
    name?: string;
}

export interface LogsIndexExclusionFilterFilter {
    /**
     * Only logs matching the filter criteria and the query of the parent index will be considered for this exclusion filter.
     */
    query?: string;
    /**
     * The fraction of logs excluded by the exclusion filter, when active.
     */
    sampleRate?: number;
}

export interface LogsIndexFilter {
    /**
     * Only logs matching the filter criteria and the query of the parent index will be considered for this exclusion filter.
     */
    query: string;
}

export interface MonitorThresholdWindows {
    /**
     * describes how long an anomalous metric must be normal before the alert recovers.
     */
    recoveryWindow?: string;
    /**
     * describes how long a metric must be anomalous before an alert triggers.
     */
    triggerWindow?: string;
}

export interface MonitorThresholds {
    critical?: number;
    criticalRecovery?: number;
    ok?: number;
    unknown?: number;
    warning?: number;
    warningRecovery?: number;
}

export interface ScreenBoardTemplateVariable {
    /**
     * The default tag. Default: "\*" (match all).
     */
    default?: string;
    /**
     * The variable name. Can be referenced as \$name in `graph` `request` `q` query strings.
     */
    name: string;
    /**
     * The tag group. Default: no tag group.
     */
    prefix?: string;
}

export interface ScreenBoardWidget {
    /**
     * The ID of the monitor used by the widget.
     */
    alertId?: number;
    /**
     * Boolean indicating whether the widget is refreshed automatically.
     */
    autoRefresh?: boolean;
    /**
     * The color of the background of the widget.
     */
    bgcolor?: string;
    /**
     * The check to use in the widget.
     */
    check?: string;
    /**
     * The color of the text in the widget.
     */
    color?: string;
    /**
     * Whether to colorize text or background. One of "text", "background".
     */
    colorPreference?: string;
    /**
     * Stringified list of columns to use. Example: `"[\"column1\",\"column2\",\"column3\"]"`
     */
    columns?: string;
    /**
     * The display setting to use. One of "counts", "list", or "countsAndList".
     */
    displayFormat?: string;
    /**
     * The environment to use.
     */
    env?: string;
    /**
     * The size of the events in the widget. Either "s" (small, title only) or "l" (large, full event).
     */
    eventSize?: string;
    /**
     * The size of the text in the widget.
     */
    fontSize?: string;
    /**
     * The list of tags to group nodes by.
     */
    group?: string;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: string[];
    /**
     * Either "check" or "cluster", depending on whether the widget should use a single check or a cluster of checks.
     */
    grouping?: string;
    /**
     * The height of the widget. Default is 15.
     */
    height?: number;
    /**
     * Boolean indicating whether to hide empty categories.
     */
    hideZeroCounts?: boolean;
    /**
     * The content of the widget. HTML tags supported.
     */
    html?: string;
    /**
     * The number of columns to use when displaying values. One of "oneColumn", "twoColumn", "threeColumn".
     */
    layoutVersion?: string;
    /**
     * Boolean indicating whether to display a legend in the widget.
     */
    legend?: boolean;
    /**
     * The size of the legend displayed in the widget.
     */
    legendSize?: string;
    /**
     * ID of the logset to use.
     */
    logset?: string;
    /**
     * Boolean indicating whether to show a title.
     */
    manageStatusShowTitle?: boolean;
    /**
     * The alignment of the widget's title. One of "left", "center", or "right".
     */
    manageStatusTitleAlign?: string;
    /**
     * The size of the widget's title.
     */
    manageStatusTitleSize?: string;
    /**
     * The title of the widget.
     */
    manageStatusTitleText?: string;
    /**
     * The margins to use around the image. Either "small" or "large".
     */
    margin?: string;
    monitor?: {[key: string]: string};
    /**
     * Boolean indicating whether to display breakdown.
     */
    mustShowBreakdown?: boolean;
    /**
     * Boolean indicating whether to display distribution.
     */
    mustShowDistribution?: boolean;
    /**
     * Boolean indicating whether to display errors.
     */
    mustShowErrors?: boolean;
    /**
     * Boolean indicating whether to display hits.
     */
    mustShowHits?: boolean;
    /**
     * Boolean indicating whether to display latency.
     */
    mustShowLatency?: boolean;
    /**
     * Boolean indicating whether to display resources.
     */
    mustShowResourceList?: boolean;
    /**
     * Nested block describing the monitors to display. The structure of this block is described below. At most one such block should be present in a given widget.
     */
    params?: {[key: string]: string};
    /**
     * The precision to use when displaying the tile.
     */
    precision?: string;
    /**
     * The query to use in the widget.
     */
    query?: string;
    rules?: outputs.ScreenBoardWidgetRule[];
    /**
     * The name of the service to use.
     */
    serviceName?: string;
    /**
     * The trace service to use.
     */
    serviceService?: string;
    /**
     * Boolean indicating whether to show when monitors/groups last triggered.
     */
    showLastTriggered?: boolean;
    /**
     * The size of the widget. One of "small", "medium", "large".
     */
    sizeVersion?: string;
    /**
     * The preferred method to adapt the dimensions of the image to those of the widget. One of "center" (center the image in the tile), "zoom" (zoom the image to cover the whole tile) or "fit" (fit the image dimensions to those of the tile).
     */
    sizing?: string;
    /**
     * The monitor summary type to use. One of "monitors", "groups", or "combined". Defaults to "monitors".
     */
    summaryType?: string;
    /**
     * List of tags to use in the widget.
     */
    tags?: string[];
    /**
     * The query to use to get monitors. Example: "status:alert".
     */
    text?: string;
    /**
     * The alignment of the text.
     */
    textAlign?: string;
    /**
     * The size of the text in the widget.
     */
    textSize?: string;
    /**
     * Boolean indicating whether a tick should be displayed on the border of the widget.
     */
    tick?: boolean;
    /**
     * When tick = true, string indicating on which side of the widget the tick should be displayed. One of "bottom", "top", "left", "right".
     */
    tickEdge?: string;
    /**
     * When tick = true, string with a percent sign indicating the position of the tick. Example: use tickPos = "50%" for centered alignment.
     */
    tickPos?: string;
    /**
     * Nested block describing the content to display in the widget. The structure of this block is described below. At most one such block should be present in a given widget.
     */
    tileDeves?: outputs.ScreenBoardWidgetTileDef[];
    /**
     * Nested block describing the timeframe to use when displaying the widget. The structure of this block is described below. At most one such block should be present in a given widget.
     */
    time?: {[key: string]: string};
    timeframes?: string[];
    /**
     * The title of the widget.
     */
    title?: string;
    /**
     * The alignment of the widget's title. One of "left", "center", or "right".
     */
    titleAlign?: string;
    /**
     * The size of the widget's title. Default is 16.
     */
    titleSize?: number;
    /**
     * Choose the type of representation to use for this query. For widgets of type "timeseries" and "queryValue", use one of "line", "bars" or "area". For widgets of type "hostmap", use "fill" or "size".
     */
    type: string;
    /**
     * The unit for the value displayed in the widget.
     */
    unit?: string;
    /**
     * The URL to use as a data source for the widget.
     */
    url?: string;
    /**
     * Type of visualization to use when displaying the widget. Either "timeseries" or "toplist".
     */
    vizType?: string;
    /**
     * The width of the widget. Default is 50.
     */
    width?: number;
    /**
     * The position of the widget on the x (horizontal) axis. Should be greater or equal to 0.
     */
    x: number;
    /**
     * The position of the widget on the y (vertical) axis. Should be greater or equal to 0.
     */
    y: number;
}

export interface ScreenBoardWidgetRule {
    /**
     * The color of the text in the widget.
     */
    color?: string;
    threshold?: number;
    timeframe?: string;
}

export interface ScreenBoardWidgetTileDef {
    /**
     * Boolean indicating whether to automatically scale the tile.
     */
    autoscale?: boolean;
    /**
     * The unit for the value displayed in the widget
     */
    customUnit?: string;
    /**
     * Nested block describing the event overlays to use when displaying the widget. The structure of this block is described below. At most one such block should be present in a given tileDef block.
     */
    events?: outputs.ScreenBoardWidgetTileDefEvent[];
    /**
     * The check group to use in the widget.
     */
    groups?: string[];
    /**
     * Nested block describing the marker to use when displaying the widget. The structure of this block is described below. Multiple marker blocks are allowed within a given tileDef block.
     */
    markers?: outputs.ScreenBoardWidgetTileDefMarker[];
    /**
     * Boolean indicating whether to show ungrouped nodes.
     */
    noGroupHosts?: boolean;
    /**
     * Boolean indicating whether to show nodes with no metrics.
     */
    noMetricHosts?: boolean;
    /**
     * The type of node used. Either "host" or "container".
     */
    nodeType?: string;
    /**
     * The precision to use when displaying the value. Use "\*" for maximum precision.
     */
    precision?: string;
    /**
     * Nested block describing the request to use when displaying the widget. The structure of this block is described below. Multiple request blocks are allowed within a given tileDef block.
     */
    requests: outputs.ScreenBoardWidgetTileDefRequest[];
    /**
     * The list of tags to filter nodes by.
     */
    scopes?: string[];
    /**
     * Nested block describing how to display the widget. The structure of this block is described below. At most one such block should be present in a given tileDef block.
     */
    style?: {[key: string]: any};
    /**
     * The alignment of the text in the widget.
     */
    textAlign?: string;
    /**
     * Should be the same as the widget's type. One of "timeseries", "queryValue", "hostmap", "change", "toplist", "process".
     */
    viz: string;
}

export interface ScreenBoardWidgetTileDefEvent {
    /**
     * The search query for event overlays.
     */
    q: string;
}

export interface ScreenBoardWidgetTileDefMarker {
    /**
     * A label for the line or range.
     */
    label?: string;
    /**
     * The type of the widget. One of "freeText", "timeseries", "queryValue", "toplist", "change", "eventTimeline", "eventStream", "image", "note", "alertGraph", "alertValue", "iframe", "checkStatus", "traceService", "hostmap", "manageStatus", "logStream", or "process".
     */
    type: string;
    /**
     * Mathematical expression describing the marker. Examples: "y > 1", "-5 < y < 0", "y = 19".
     */
    value: string;
}

export interface ScreenBoardWidgetTileDefRequest {
    /**
     * The aggregator to use for time aggregation. One of "avg", "min", "max", "sum", "last".
     */
    aggregator?: string;
    /**
     * The APM query to use in the widget. The structure of this block is described below.
     */
    apmQuery?: outputs.ScreenBoardWidgetTileDefRequestApmQuery;
    /**
     * Whether to show absolute or relative change. One of "absolute", "relative".
     */
    changeType?: string;
    /**
     * Choose from when to compare current data to. One of "hourBefore", "dayBefore", "weekBefore" or "monthBefore".
     */
    compareTo?: string;
    /**
     * Nested block to customize the style if certain conditions are met. Currently only applies to `Query Value` and `Top List` type graphs.
     */
    conditionalFormats?: outputs.ScreenBoardWidgetTileDefRequestConditionalFormat[];
    /**
     * If set to "present", displays current value. Can be left empty otherwise.
     */
    extraCol?: string;
    /**
     * Boolean indicating whether an increase in the value is good (thus displayed in green) or not (thus displayed in red).
     */
    increaseGood?: boolean;
    /**
     * Integer indicating the number of hosts to limit to.
     */
    limit?: number;
    /**
     * The log query to use in the widget. The structure of this block is described below.
     */
    logQuery?: outputs.ScreenBoardWidgetTileDefRequestLogQuery;
    /**
     * A JSON blob representing mapping of query expressions to alias names. Note that the query expressions in `metadataJson` will be ignored if they're not present in the query. For example:
     */
    metadataJson?: string;
    /**
     * The metric you want to use for the widget.
     */
    metric?: string;
    /**
     * One of "change", "name", "present" (present value) or "past" (past value).
     */
    orderBy?: string;
    /**
     * Either "asc" (ascending) or "desc" (descending).
     */
    orderDir?: string;
    /**
     * The process query to use in the widget. The structure of this block is described below.
     */
    processQuery?: outputs.ScreenBoardWidgetTileDefRequestProcessQuery;
    /**
     * The search query for event overlays.
     */
    q?: string;
    /**
     * Use "process".
     */
    queryType?: string;
    /**
     * Nested block describing how to display the widget. The structure of this block is described below. At most one such block should be present in a given tileDef block.
     */
    style?: {[key: string]: any};
    /**
     * Tags to use for filtering.
     */
    tagFilters?: string[];
    /**
     * The search query for the widget.
     */
    textFilter?: string;
    /**
     * The type of the widget. One of "freeText", "timeseries", "queryValue", "toplist", "change", "eventTimeline", "eventStream", "image", "note", "alertGraph", "alertValue", "iframe", "checkStatus", "traceService", "hostmap", "manageStatus", "logStream", or "process".
     */
    type?: string;
}

export interface ScreenBoardWidgetTileDefRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.ScreenBoardWidgetTileDefRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.ScreenBoardWidgetTileDefRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.ScreenBoardWidgetTileDefRequestApmQuerySearch;
}

export interface ScreenBoardWidgetTileDefRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: string;
}

export interface ScreenBoardWidgetTileDefRequestApmQueryGroupBy {
    facet: string;
    /**
     * Integer indicating the number of hosts to limit to.
     */
    limit?: number;
    /**
     * The method to use to sort monitors. Example: "status,asc".
     */
    sort?: outputs.ScreenBoardWidgetTileDefRequestApmQueryGroupBySort;
}

export interface ScreenBoardWidgetTileDefRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface ScreenBoardWidgetTileDefRequestApmQuerySearch {
    /**
     * The query to use in the widget.
     */
    query: string;
}

export interface ScreenBoardWidgetTileDefRequestConditionalFormat {
    /**
     * Custom color (e.g., #205081).
     */
    color?: string;
    /**
     * Comparison operator. Example: ">", "<".
     */
    comparator: string;
    customBgColor?: string;
    /**
     * Boolean indicating whether to invert color scheme.
     */
    invert?: boolean;
    /**
     * Color scheme to be used if the condition is met. One of: "redOnWhite", "whiteOnRed", "yellowOnWhite", "whiteOnYellow", "greenOnWhite", "whiteOnGreen", "grayOnWhite", "whiteOnGray", "customText", "customBg", "customImage".
     */
    palette?: string;
    /**
     * Value that is the threshold for the conditional format.
     */
    value?: string;
}

export interface ScreenBoardWidgetTileDefRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.ScreenBoardWidgetTileDefRequestLogQueryCompute;
    /**
     * When grouping = "cluster", indicates a list of tags to use for grouping.
     */
    groupBies?: outputs.ScreenBoardWidgetTileDefRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.ScreenBoardWidgetTileDefRequestLogQuerySearch;
}

export interface ScreenBoardWidgetTileDefRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: string;
}

export interface ScreenBoardWidgetTileDefRequestLogQueryGroupBy {
    facet: string;
    /**
     * Integer indicating the number of hosts to limit to.
     */
    limit?: number;
    /**
     * The method to use to sort monitors. Example: "status,asc".
     */
    sort?: outputs.ScreenBoardWidgetTileDefRequestLogQueryGroupBySort;
}

export interface ScreenBoardWidgetTileDefRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface ScreenBoardWidgetTileDefRequestLogQuerySearch {
    /**
     * The query to use in the widget.
     */
    query: string;
}

export interface ScreenBoardWidgetTileDefRequestProcessQuery {
    filterBies?: string[];
    /**
     * Integer indicating the number of hosts to limit to.
     */
    limit?: number;
    /**
     * The metric you want to use for the widget.
     */
    metric: string;
    searchBy?: string;
}

export interface ServiceLevelObjectiveQuery {
    /**
     * the sum of the `total` events
     * * Example Usage:
     */
    denominator: string;
    /**
     * the sum of all the `good` events
     */
    numerator: string;
}

export interface ServiceLevelObjectiveThreshold {
    /**
     * the objective's target `[0,100]`
     */
    target: number;
    /**
     * the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
     */
    targetDisplay?: string;
    /**
     * the time frame for the objective. The mapping from these types to the types found in the Datadog Web UI can be found in the Datadog API [documentation](https://docs.datadoghq.com/api/v1/service-level-objectives/#create-a-slo-object) page. Available options to choose from are:
     * * `7d`
     * * `30d`
     * * `90d`
     */
    timeframe: string;
    /**
     * the objective's warning value `[0,100]`. This must be `> target` value.
     */
    warning?: number;
    /**
     * the string version to specify additional digits in the case of `99` but want 3 digits like `99.000` to display.
     */
    warningDisplay?: string;
}

export interface SyntheticsTestOptions {
    /**
     * For type=ssl, true or false
     */
    acceptSelfSigned?: boolean;
    /**
     * For type=api, true or false. Allow your HTTP test go on with connection even if there is an error when validating the certificate.
     */
    allowInsecure?: boolean;
    /**
     * For type=api, true or false
     */
    followRedirects?: boolean;
    /**
     * How long the test should be in failure before alerting (integer, number of seconds, max 7200). Default is 0.
     */
    minFailureDuration?: number;
    /**
     * Threshold below which a synthetics test is allowed to fail before sending notifications
     */
    minLocationFailed?: number;
    /**
     * How often the test should run (in seconds). Current possible values are 900, 1800, 3600, 21600, 43200, 86400, 604800 plus 60 if type=api or 300 if type=browser
     */
    tickEvery: number;
}

export interface SyntheticsTestRequest {
    /**
     * Request body
     */
    body?: string;
    /**
     * host name
     */
    host?: string;
    /**
     * no-op, use GET
     */
    method?: string;
    /**
     * port number
     */
    port?: number;
    /**
     * For type=api, any value between 0 and 60 (Default = 60)
     */
    timeout?: number;
    /**
     * Any url
     */
    url?: string;
}

export interface SyntheticsTestRequestBasicauth {
    /**
     * Password for authentication
     */
    password: string;
    /**
     * Username for authentication
     */
    username: string;
}

export interface TimeBoardGraph {
    /**
     * Boolean that determines whether to autoscale graphs.
     */
    autoscale?: boolean;
    /**
     * Display a custom unit on the graph (such as 'hertz')
     */
    customUnit?: string;
    /**
     * A list of event filter strings. Note that, while supported by the Datadog API, the Datadog UI does not (currently) support multiple event filters very well, so use at your own risk.
     */
    events?: string[];
    /**
     * List of groups for hostmaps (shown as 'group by' in the UI).
     */
    groups?: string[];
    /**
     * If set to true, will display hosts on hostmap that have no reported metrics.
     */
    includeNoMetricHosts?: boolean;
    /**
     * If set to true, will display hosts without groups on hostmaps.
     */
    includeUngroupedHosts?: boolean;
    /**
     * Nested block describing lines / ranges added to graph for formatting. The structure of this block is described below. Multiple marker blocks are allowed within a graph block.
     */
    markers?: outputs.TimeBoardGraphMarker[];
    /**
     * What nodes to display in a hostmap. Can be one of 'host' (default) or 'container'.
     */
    nodeType?: string;
    /**
     * Number of digits displayed, use `*` for full precision.
     */
    precision?: string;
    /**
     * Nested block describing a graph definition request (a metric query to plot on the graph). The structure of this block is described below. Multiple request blocks are allowed within a graph block.
     */
    requests: outputs.TimeBoardGraphRequest[];
    /**
     * List of scopes for hostmaps (shown as 'filter by' in the UI).
     */
    scopes?: string[];
    /**
     * Nested block to customize the graph style.
     */
    style?: {[key: string]: any};
    /**
     * How to align text in the graph, can be one of 'left', 'center', or 'right'.
     */
    textAlign?: string;
    /**
     * The name of the graph.
     */
    title: string;
    /**
     * The type of visualization to use for the graph. Valid choices are "change", "distribution", "heatmap", "hostmap", "queryValue", timeseries", and "toplist".
     */
    viz: string;
    /**
     * Nested block describing modifications to the yaxis rendering. The structure of this block is described below.
     */
    yaxis?: {[key: string]: any};
}

export interface TimeBoardGraphMarker {
    /**
     * A label for the line or range. **Warning:** when a label is enabled but left empty through the UI, the Datadog API returns a boolean value, not a string. This makes `pulumi up` fail with a JSON decoding error.
     */
    label?: string;
    /**
     * How the marker lines will look. Possible values are {"error", "warning", "info", "ok"} {"dashed", "solid", "bold"}. Example: "error dashed".
     */
    type: string;
    /**
     * Mathematical expression describing the marker. Examples: "y > 1", "-5 < y < 0", "y = 19".
     */
    value: string;
}

export interface TimeBoardGraphRequest {
    /**
     * The aggregation method used when the number of data points outnumbers the max that can be shown.
     */
    aggregator?: string;
    /**
     * The APM query to use in the widget. The structure of this block is described below.
     */
    apmQuery?: outputs.TimeBoardGraphRequestApmQuery;
    changeType?: string;
    compareTo?: string;
    /**
     * Nested block to customize the graph style if certain conditions are met. Currently only applies to `Query Value` and `Top List` type graphs.
     */
    conditionalFormats?: outputs.TimeBoardGraphRequestConditionalFormat[];
    /**
     * If set to "present", displays current value. Can be left empty otherwise.
     */
    extraCol?: string;
    increaseGood?: boolean;
    /**
     * The log query to use in the widget. The structure of this block is described below.
     */
    logQuery?: outputs.TimeBoardGraphRequestLogQuery;
    /**
     * A JSON blob representing mapping of query expressions to alias names. Note that the query expressions in `metadataJson` will be ignored if they're not present in the query. For example:
     */
    metadataJson?: string;
    orderBy?: string;
    orderDirection?: string;
    /**
     * The process query to use in the widget. The structure of this block is described below.
     */
    processQuery?: outputs.TimeBoardGraphRequestProcessQuery;
    /**
     * The query of the request. Pro tip: Use the JSON tab inside the Datadog UI to help build you query strings.
     */
    q?: string;
    /**
     * Boolean value to determine if this is this a stacked area graph. Default: false (line chart).
     */
    stacked?: boolean;
    /**
     * Nested block describing hostmaps. The structure of this block is described below.
     */
    style?: {[key: string]: any};
    /**
     * How the marker lines will look. Possible values are {"error", "warning", "info", "ok"} {"dashed", "solid", "bold"}. Example: "error dashed".
     */
    type?: string;
}

export interface TimeBoardGraphRequestApmQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.TimeBoardGraphRequestApmQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.TimeBoardGraphRequestApmQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.TimeBoardGraphRequestApmQuerySearch;
}

export interface TimeBoardGraphRequestApmQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface TimeBoardGraphRequestApmQueryGroupBy {
    facet: string;
    limit?: number;
    /**
     * . One nested block is allowed with the following structure:
     */
    sort?: outputs.TimeBoardGraphRequestApmQueryGroupBySort;
}

export interface TimeBoardGraphRequestApmQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface TimeBoardGraphRequestApmQuerySearch {
    query: string;
}

export interface TimeBoardGraphRequestConditionalFormat {
    /**
     * Comparison operator. Example: ">", "<".
     */
    comparator: string;
    /**
     * Used when `palette` is set to `customBg`. Set the color of the background to a custom web color, such as "#205081".
     */
    customBgColor?: string;
    /**
     * Used when `palette` is set to `customText`. Set the color of the text to a custom web color, such as "#205081".
     */
    customFgColor?: string;
    /**
     * Color scheme to be used if the condition is met. For example: "redOnWhite", "whiteOnRed", "yellowOnWhite", "whiteOnYellow", "greenOnWhite", "whiteOnGreen", "grayOnWhite", "whiteOnGray", "customText", "customBg", "customImage".
     */
    palette?: string;
    /**
     * Value that is the threshold for the conditional format.
     */
    value?: string;
}

export interface TimeBoardGraphRequestLogQuery {
    /**
     * . Exactly one nested block is required with the following structure:
     */
    compute: outputs.TimeBoardGraphRequestLogQueryCompute;
    /**
     * . Multiple nested blocks are allowed with the following structure:
     */
    groupBies?: outputs.TimeBoardGraphRequestLogQueryGroupBy[];
    index: string;
    /**
     * . One nested block is allowed with the following structure:
     */
    search?: outputs.TimeBoardGraphRequestLogQuerySearch;
}

export interface TimeBoardGraphRequestLogQueryCompute {
    aggregation: string;
    facet?: string;
    interval?: number;
}

export interface TimeBoardGraphRequestLogQueryGroupBy {
    facet: string;
    limit?: number;
    /**
     * . One nested block is allowed with the following structure:
     */
    sort?: outputs.TimeBoardGraphRequestLogQueryGroupBySort;
}

export interface TimeBoardGraphRequestLogQueryGroupBySort {
    aggregation: string;
    facet?: string;
    order: string;
}

export interface TimeBoardGraphRequestLogQuerySearch {
    query: string;
}

export interface TimeBoardGraphRequestProcessQuery {
    filterBies?: string[];
    limit?: number;
    metric: string;
    searchBy?: string;
}

export interface TimeBoardTemplateVariable {
    /**
     * The default tag. Default: "\*" (match all).
     */
    default?: string;
    /**
     * The variable name. Can be referenced as \$name in `graph` `request` `q` query strings.
     */
    name: string;
    /**
     * The tag group. Default: no tag group.
     */
    prefix?: string;
}
export namespace pagerduty {
    export interface IntegrationService {
        /**
         * Your Service name associated service key in Pagerduty.
         */
        serviceKey: string;
        /**
         * Your Service name in PagerDuty.
         */
        serviceName: string;
    }
}
