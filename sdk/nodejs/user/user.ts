// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "../utilities";

/**
 * Provides a Datadog user resource. This can be used to create and manage Datadog users.
 */
export class User extends pulumi.CustomResource {
    /**
     * Get an existing User resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: UserState): User {
        return new User(name, <any>state, { id });
    }

    /**
     * Whether the user is disabled
     */
    public readonly disabled: pulumi.Output<boolean | undefined>;
    /**
     * Email address for user
     */
    public readonly email: pulumi.Output<string>;
    /**
     * The user handle, must be a valid email.
     */
    public readonly handle: pulumi.Output<string>;
    /**
     * (Optional) Whether the user is an administrator
     */
    public readonly isAdmin: pulumi.Output<boolean | undefined>;
    /**
     * Name for user
     */
    public readonly name: pulumi.Output<string>;
    /**
     * Role description for user. **Warning**: the corresponding query parameter is ignored by the Datadog API, thus the argument would always trigger an execution plan.
     */
    public readonly role: pulumi.Output<string | undefined>;
    /**
     * Returns true if Datadog user is verified
     */
    public /*out*/ readonly verified: pulumi.Output<boolean>;

    /**
     * Create a User resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: UserArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: UserArgs | UserState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: UserState = argsOrState as UserState | undefined;
            inputs["disabled"] = state ? state.disabled : undefined;
            inputs["email"] = state ? state.email : undefined;
            inputs["handle"] = state ? state.handle : undefined;
            inputs["isAdmin"] = state ? state.isAdmin : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["role"] = state ? state.role : undefined;
            inputs["verified"] = state ? state.verified : undefined;
        } else {
            const args = argsOrState as UserArgs | undefined;
            if (!args || args.email === undefined) {
                throw new Error("Missing required property 'email'");
            }
            if (!args || args.handle === undefined) {
                throw new Error("Missing required property 'handle'");
            }
            if (!args || args.name === undefined) {
                throw new Error("Missing required property 'name'");
            }
            inputs["disabled"] = args ? args.disabled : undefined;
            inputs["email"] = args ? args.email : undefined;
            inputs["handle"] = args ? args.handle : undefined;
            inputs["isAdmin"] = args ? args.isAdmin : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["role"] = args ? args.role : undefined;
            inputs["verified"] = undefined /*out*/;
        }
        super("datadog:user:User", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering User resources.
 */
export interface UserState {
    /**
     * Whether the user is disabled
     */
    readonly disabled?: pulumi.Input<boolean>;
    /**
     * Email address for user
     */
    readonly email?: pulumi.Input<string>;
    /**
     * The user handle, must be a valid email.
     */
    readonly handle?: pulumi.Input<string>;
    /**
     * (Optional) Whether the user is an administrator
     */
    readonly isAdmin?: pulumi.Input<boolean>;
    /**
     * Name for user
     */
    readonly name?: pulumi.Input<string>;
    /**
     * Role description for user. **Warning**: the corresponding query parameter is ignored by the Datadog API, thus the argument would always trigger an execution plan.
     */
    readonly role?: pulumi.Input<string>;
    /**
     * Returns true if Datadog user is verified
     */
    readonly verified?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a User resource.
 */
export interface UserArgs {
    /**
     * Whether the user is disabled
     */
    readonly disabled?: pulumi.Input<boolean>;
    /**
     * Email address for user
     */
    readonly email: pulumi.Input<string>;
    /**
     * The user handle, must be a valid email.
     */
    readonly handle: pulumi.Input<string>;
    /**
     * (Optional) Whether the user is an administrator
     */
    readonly isAdmin?: pulumi.Input<boolean>;
    /**
     * Name for user
     */
    readonly name: pulumi.Input<string>;
    /**
     * Role description for user. **Warning**: the corresponding query parameter is ignored by the Datadog API, thus the argument would always trigger an execution plan.
     */
    readonly role?: pulumi.Input<string>;
}
