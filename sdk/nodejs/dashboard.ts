// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-datadog/blob/master/website/docs/r/dashboard.html.markdown.
 */
export class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard {
        return new Dashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/dashboard:Dashboard';

    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }

    /**
     * The description of the dashboard.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether this dashboard is read-only.
     */
    public readonly isReadOnly!: pulumi.Output<boolean | undefined>;
    /**
     * The layout type of the dashboard, either 'free' or 'ordered'.
     */
    public readonly layoutType!: pulumi.Output<string>;
    /**
     * The list of handles of users to notify when changes are made to this dashboard.
     */
    public readonly notifyLists!: pulumi.Output<string[] | undefined>;
    /**
     * The list of template variables for this dashboard.
     */
    public readonly templateVariables!: pulumi.Output<outputs.DashboardTemplateVariable[] | undefined>;
    /**
     * The title of the dashboard.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * The list of widgets to display on the dashboard.
     */
    public readonly widgets!: pulumi.Output<outputs.DashboardWidget[]>;

    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardArgs | DashboardState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as DashboardState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["isReadOnly"] = state ? state.isReadOnly : undefined;
            inputs["layoutType"] = state ? state.layoutType : undefined;
            inputs["notifyLists"] = state ? state.notifyLists : undefined;
            inputs["templateVariables"] = state ? state.templateVariables : undefined;
            inputs["title"] = state ? state.title : undefined;
            inputs["widgets"] = state ? state.widgets : undefined;
        } else {
            const args = argsOrState as DashboardArgs | undefined;
            if (!args || args.layoutType === undefined) {
                throw new Error("Missing required property 'layoutType'");
            }
            if (!args || args.title === undefined) {
                throw new Error("Missing required property 'title'");
            }
            if (!args || args.widgets === undefined) {
                throw new Error("Missing required property 'widgets'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["isReadOnly"] = args ? args.isReadOnly : undefined;
            inputs["layoutType"] = args ? args.layoutType : undefined;
            inputs["notifyLists"] = args ? args.notifyLists : undefined;
            inputs["templateVariables"] = args ? args.templateVariables : undefined;
            inputs["title"] = args ? args.title : undefined;
            inputs["widgets"] = args ? args.widgets : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Dashboard.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    /**
     * The description of the dashboard.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Whether this dashboard is read-only.
     */
    readonly isReadOnly?: pulumi.Input<boolean>;
    /**
     * The layout type of the dashboard, either 'free' or 'ordered'.
     */
    readonly layoutType?: pulumi.Input<string>;
    /**
     * The list of handles of users to notify when changes are made to this dashboard.
     */
    readonly notifyLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of template variables for this dashboard.
     */
    readonly templateVariables?: pulumi.Input<pulumi.Input<inputs.DashboardTemplateVariable>[]>;
    /**
     * The title of the dashboard.
     */
    readonly title?: pulumi.Input<string>;
    /**
     * The list of widgets to display on the dashboard.
     */
    readonly widgets?: pulumi.Input<pulumi.Input<inputs.DashboardWidget>[]>;
}

/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    /**
     * The description of the dashboard.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Whether this dashboard is read-only.
     */
    readonly isReadOnly?: pulumi.Input<boolean>;
    /**
     * The layout type of the dashboard, either 'free' or 'ordered'.
     */
    readonly layoutType: pulumi.Input<string>;
    /**
     * The list of handles of users to notify when changes are made to this dashboard.
     */
    readonly notifyLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of template variables for this dashboard.
     */
    readonly templateVariables?: pulumi.Input<pulumi.Input<inputs.DashboardTemplateVariable>[]>;
    /**
     * The title of the dashboard.
     */
    readonly title: pulumi.Input<string>;
    /**
     * The list of widgets to display on the dashboard.
     */
    readonly widgets: pulumi.Input<pulumi.Input<inputs.DashboardWidget>[]>;
}
