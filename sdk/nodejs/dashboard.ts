// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * > This content is derived from https://github.com/terraform-providers/terraform-provider-datadog/blob/master/website/docs/r/dashboard.html.markdown.
 */
export class Dashboard extends pulumi.CustomResource {
    /**
     * Get an existing Dashboard resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DashboardState, opts?: pulumi.CustomResourceOptions): Dashboard {
        return new Dashboard(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'datadog:index/dashboard:Dashboard';

    /**
     * Returns true if the given object is an instance of Dashboard.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Dashboard {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Dashboard.__pulumiType;
    }

    /**
     * The description of the dashboard.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Whether this dashboard is read-only.
     */
    public readonly isReadOnly!: pulumi.Output<boolean | undefined>;
    /**
     * The layout type of the dashboard, either 'free' or 'ordered'.
     */
    public readonly layoutType!: pulumi.Output<string>;
    /**
     * The list of handles of users to notify when changes are made to this dashboard.
     */
    public readonly notifyLists!: pulumi.Output<string[] | undefined>;
    /**
     * The list of template variables for this dashboard.
     */
    public readonly templateVariables!: pulumi.Output<{ default?: string, name: string, prefix?: string }[] | undefined>;
    /**
     * The title of the dashboard.
     */
    public readonly title!: pulumi.Output<string>;
    /**
     * The list of widgets to display on the dashboard.
     */
    public readonly widgets!: pulumi.Output<{ alertGraphDefinition?: { alertId: string, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string, vizType: string }, alertValueDefinition?: { alertId: string, precision?: number, textAlign?: string, title?: string, titleAlign?: string, titleSize?: string, unit?: string }, changeDefinition?: { requests?: { apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, changeType?: string, compareTo?: string, increaseGood?: boolean, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, orderBy?: string, orderDir?: string, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string, showPresent?: boolean }[], time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, checkStatusDefinition?: { check: string, group?: string, groupBies?: string[], grouping: string, tags?: string[], time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, distributionDefinition?: { requests?: { apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string, style?: { palette?: string } }[], time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, eventStreamDefinition?: { eventSize?: string, query: string, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, eventTimelineDefinition?: { query: string, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, freeTextDefinition?: { color?: string, fontSize?: string, text: string, textAlign?: string }, groupDefinition?: { layoutType: string, title?: string, widgets: { alertGraphDefinition?: { alertId: string, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string, vizType: string }, alertValueDefinition?: { alertId: string, precision?: number, textAlign?: string, title?: string, titleAlign?: string, titleSize?: string, unit?: string }, changeDefinition?: { requests?: { apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, changeType?: string, compareTo?: string, increaseGood?: boolean, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, orderBy?: string, orderDir?: string, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string, showPresent?: boolean }[], time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, checkStatusDefinition?: { check: string, group?: string, groupBies?: string[], grouping: string, tags?: string[], time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, distributionDefinition?: { requests?: { apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string, style?: { palette?: string } }[], time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, eventStreamDefinition?: { eventSize?: string, query: string, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, eventTimelineDefinition?: { query: string, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, freeTextDefinition?: { color?: string, fontSize?: string, text: string, textAlign?: string }, heatmapDefinition?: { requests?: { apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string, style?: { palette?: string } }[], time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string, yaxis?: { includeZero?: boolean, label?: string, max?: string, min?: string, scale?: string } }, hostmapDefinition?: { groups?: string[], noGroupHosts?: boolean, noMetricHosts?: boolean, nodeType?: string, request?: { fills?: { apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string }[], sizes?: { apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string }[] }, scopes?: string[], style?: { fillMax?: string, fillMin?: string, palette?: string, paletteFlip?: boolean }, title?: string, titleAlign?: string, titleSize?: string }, iframeDefinition?: { url: string }, imageDefinition?: { margin?: string, sizing?: string, url: string }, layout?: { height: number, width: number, x: number, y: number }, logStreamDefinition?: { columns?: string[], logset: string, query?: string, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, manageStatusDefinition?: { colorPreference?: string, count?: number, displayFormat?: string, hideZeroCounts?: boolean, query: string, sort?: string, start?: number, title?: string, titleAlign?: string, titleSize?: string }, noteDefinition?: { backgroundColor?: string, content: string, fontSize?: string, showTick?: boolean, textAlign?: string, tickEdge?: string, tickPos?: string }, queryValueDefinition?: { autoscale?: boolean, customUnit?: string, precision?: number, requests?: { aggregator?: string, apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, conditionalFormats?: { comparator: string, customBgColor?: string, customFgColor?: string, hideValue?: boolean, imageUrl?: string, palette: string, timeframe?: string, value: number }[], logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string }[], textAlign?: string, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, scatterplotDefinition?: { colorByGroups?: string[], request?: { xes?: { aggregator?: string, apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string }[], ys?: { aggregator?: string, apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string }[] }, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string, xaxis?: { includeZero?: boolean, label?: string, max?: string, min?: string, scale?: string }, yaxis?: { includeZero?: boolean, label?: string, max?: string, min?: string, scale?: string } }, timeseriesDefinition?: { legendSize?: string, markers?: { displayType?: string, label?: string, value: string }[], requests?: { apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, displayType?: string, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, metadatas?: { aliasName?: string, expression: string }[], processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string, style?: { lineType?: string, lineWidth?: string, palette?: string } }[], showLegend?: boolean, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, toplistDefinition?: { requests?: { apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, conditionalFormats?: { comparator: string, customBgColor?: string, customFgColor?: string, hideValue?: boolean, imageUrl?: string, palette: string, timeframe?: string, value: number }[], logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string, style?: { palette?: string } }[], time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, traceServiceDefinition?: { displayFormat?: string, env: string, service: string, showBreakdown?: boolean, showDistribution?: boolean, showErrors?: boolean, showHits?: boolean, showLatency?: boolean, showResourceList?: boolean, sizeFormat?: string, spanName: string, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string } }[] }, heatmapDefinition?: { requests?: { apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string, style?: { palette?: string } }[], time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string, yaxis?: { includeZero?: boolean, label?: string, max?: string, min?: string, scale?: string } }, hostmapDefinition?: { groups?: string[], noGroupHosts?: boolean, noMetricHosts?: boolean, nodeType?: string, request?: { fills?: { apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string }[], sizes?: { apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string }[] }, scopes?: string[], style?: { fillMax?: string, fillMin?: string, palette?: string, paletteFlip?: boolean }, title?: string, titleAlign?: string, titleSize?: string }, iframeDefinition?: { url: string }, imageDefinition?: { margin?: string, sizing?: string, url: string }, layout?: { height: number, width: number, x: number, y: number }, logStreamDefinition?: { columns?: string[], logset: string, query?: string, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, manageStatusDefinition?: { colorPreference?: string, count?: number, displayFormat?: string, hideZeroCounts?: boolean, query: string, sort?: string, start?: number, title?: string, titleAlign?: string, titleSize?: string }, noteDefinition?: { backgroundColor?: string, content: string, fontSize?: string, showTick?: boolean, textAlign?: string, tickEdge?: string, tickPos?: string }, queryValueDefinition?: { autoscale?: boolean, customUnit?: string, precision?: number, requests?: { aggregator?: string, apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, conditionalFormats?: { comparator: string, customBgColor?: string, customFgColor?: string, hideValue?: boolean, imageUrl?: string, palette: string, timeframe?: string, value: number }[], logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string }[], textAlign?: string, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, scatterplotDefinition?: { colorByGroups?: string[], request?: { xes?: { aggregator?: string, apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string }[], ys?: { aggregator?: string, apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string }[] }, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string, xaxis?: { includeZero?: boolean, label?: string, max?: string, min?: string, scale?: string }, yaxis?: { includeZero?: boolean, label?: string, max?: string, min?: string, scale?: string } }, timeseriesDefinition?: { legendSize?: string, markers?: { displayType?: string, label?: string, value: string }[], requests?: { apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, displayType?: string, logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, metadatas?: { aliasName?: string, expression: string }[], processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string, style?: { lineType?: string, lineWidth?: string, palette?: string } }[], showLegend?: boolean, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, toplistDefinition?: { requests?: { apmQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, conditionalFormats?: { comparator: string, customBgColor?: string, customFgColor?: string, hideValue?: boolean, imageUrl?: string, palette: string, timeframe?: string, value: number }[], logQuery?: { compute: { aggregation: string, facet?: string, interval?: number }, groupBies?: { facet: string, limit?: number, sort?: { aggregation: string, facet?: string, order: string } }[], index: string, search?: { query: string } }, processQuery?: { filterBies?: string[], limit?: number, metric: string, searchBy?: string }, q?: string, style?: { palette?: string } }[], time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string }, traceServiceDefinition?: { displayFormat?: string, env: string, service: string, showBreakdown?: boolean, showDistribution?: boolean, showErrors?: boolean, showHits?: boolean, showLatency?: boolean, showResourceList?: boolean, sizeFormat?: string, spanName: string, time?: { liveSpan?: string }, title?: string, titleAlign?: string, titleSize?: string } }[]>;

    /**
     * Create a Dashboard resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DashboardArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DashboardArgs | DashboardState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as DashboardState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["isReadOnly"] = state ? state.isReadOnly : undefined;
            inputs["layoutType"] = state ? state.layoutType : undefined;
            inputs["notifyLists"] = state ? state.notifyLists : undefined;
            inputs["templateVariables"] = state ? state.templateVariables : undefined;
            inputs["title"] = state ? state.title : undefined;
            inputs["widgets"] = state ? state.widgets : undefined;
        } else {
            const args = argsOrState as DashboardArgs | undefined;
            if (!args || args.layoutType === undefined) {
                throw new Error("Missing required property 'layoutType'");
            }
            if (!args || args.title === undefined) {
                throw new Error("Missing required property 'title'");
            }
            if (!args || args.widgets === undefined) {
                throw new Error("Missing required property 'widgets'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["isReadOnly"] = args ? args.isReadOnly : undefined;
            inputs["layoutType"] = args ? args.layoutType : undefined;
            inputs["notifyLists"] = args ? args.notifyLists : undefined;
            inputs["templateVariables"] = args ? args.templateVariables : undefined;
            inputs["title"] = args ? args.title : undefined;
            inputs["widgets"] = args ? args.widgets : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(Dashboard.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Dashboard resources.
 */
export interface DashboardState {
    /**
     * The description of the dashboard.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Whether this dashboard is read-only.
     */
    readonly isReadOnly?: pulumi.Input<boolean>;
    /**
     * The layout type of the dashboard, either 'free' or 'ordered'.
     */
    readonly layoutType?: pulumi.Input<string>;
    /**
     * The list of handles of users to notify when changes are made to this dashboard.
     */
    readonly notifyLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of template variables for this dashboard.
     */
    readonly templateVariables?: pulumi.Input<pulumi.Input<{ default?: pulumi.Input<string>, name: pulumi.Input<string>, prefix?: pulumi.Input<string> }>[]>;
    /**
     * The title of the dashboard.
     */
    readonly title?: pulumi.Input<string>;
    /**
     * The list of widgets to display on the dashboard.
     */
    readonly widgets?: pulumi.Input<pulumi.Input<{ alertGraphDefinition?: pulumi.Input<{ alertId: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, vizType: pulumi.Input<string> }>, alertValueDefinition?: pulumi.Input<{ alertId: pulumi.Input<string>, precision?: pulumi.Input<number>, textAlign?: pulumi.Input<string>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, unit?: pulumi.Input<string> }>, changeDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, changeType?: pulumi.Input<string>, compareTo?: pulumi.Input<string>, increaseGood?: pulumi.Input<boolean>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, orderBy?: pulumi.Input<string>, orderDir?: pulumi.Input<string>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, showPresent?: pulumi.Input<boolean> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, checkStatusDefinition?: pulumi.Input<{ check: pulumi.Input<string>, group?: pulumi.Input<string>, groupBies?: pulumi.Input<pulumi.Input<string>[]>, grouping: pulumi.Input<string>, tags?: pulumi.Input<pulumi.Input<string>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, distributionDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ palette?: pulumi.Input<string> }> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, eventStreamDefinition?: pulumi.Input<{ eventSize?: pulumi.Input<string>, query: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, eventTimelineDefinition?: pulumi.Input<{ query: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, freeTextDefinition?: pulumi.Input<{ color?: pulumi.Input<string>, fontSize?: pulumi.Input<string>, text: pulumi.Input<string>, textAlign?: pulumi.Input<string> }>, groupDefinition?: pulumi.Input<{ layoutType: pulumi.Input<string>, title?: pulumi.Input<string>, widgets: pulumi.Input<pulumi.Input<{ alertGraphDefinition?: pulumi.Input<{ alertId: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, vizType: pulumi.Input<string> }>, alertValueDefinition?: pulumi.Input<{ alertId: pulumi.Input<string>, precision?: pulumi.Input<number>, textAlign?: pulumi.Input<string>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, unit?: pulumi.Input<string> }>, changeDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, changeType?: pulumi.Input<string>, compareTo?: pulumi.Input<string>, increaseGood?: pulumi.Input<boolean>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, orderBy?: pulumi.Input<string>, orderDir?: pulumi.Input<string>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, showPresent?: pulumi.Input<boolean> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, checkStatusDefinition?: pulumi.Input<{ check: pulumi.Input<string>, group?: pulumi.Input<string>, groupBies?: pulumi.Input<pulumi.Input<string>[]>, grouping: pulumi.Input<string>, tags?: pulumi.Input<pulumi.Input<string>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, distributionDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ palette?: pulumi.Input<string> }> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, eventStreamDefinition?: pulumi.Input<{ eventSize?: pulumi.Input<string>, query: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, eventTimelineDefinition?: pulumi.Input<{ query: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, freeTextDefinition?: pulumi.Input<{ color?: pulumi.Input<string>, fontSize?: pulumi.Input<string>, text: pulumi.Input<string>, textAlign?: pulumi.Input<string> }>, heatmapDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ palette?: pulumi.Input<string> }> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, yaxis?: pulumi.Input<{ includeZero?: pulumi.Input<boolean>, label?: pulumi.Input<string>, max?: pulumi.Input<string>, min?: pulumi.Input<string>, scale?: pulumi.Input<string> }> }>, hostmapDefinition?: pulumi.Input<{ groups?: pulumi.Input<pulumi.Input<string>[]>, noGroupHosts?: pulumi.Input<boolean>, noMetricHosts?: pulumi.Input<boolean>, nodeType?: pulumi.Input<string>, request?: pulumi.Input<{ fills?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]>, sizes?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]> }>, scopes?: pulumi.Input<pulumi.Input<string>[]>, style?: pulumi.Input<{ fillMax?: pulumi.Input<string>, fillMin?: pulumi.Input<string>, palette?: pulumi.Input<string>, paletteFlip?: pulumi.Input<boolean> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, iframeDefinition?: pulumi.Input<{ url: pulumi.Input<string> }>, imageDefinition?: pulumi.Input<{ margin?: pulumi.Input<string>, sizing?: pulumi.Input<string>, url: pulumi.Input<string> }>, layout?: pulumi.Input<{ height: pulumi.Input<number>, width: pulumi.Input<number>, x: pulumi.Input<number>, y: pulumi.Input<number> }>, logStreamDefinition?: pulumi.Input<{ columns?: pulumi.Input<pulumi.Input<string>[]>, logset: pulumi.Input<string>, query?: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, manageStatusDefinition?: pulumi.Input<{ colorPreference?: pulumi.Input<string>, count?: pulumi.Input<number>, displayFormat?: pulumi.Input<string>, hideZeroCounts?: pulumi.Input<boolean>, query: pulumi.Input<string>, sort?: pulumi.Input<string>, start?: pulumi.Input<number>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, noteDefinition?: pulumi.Input<{ backgroundColor?: pulumi.Input<string>, content: pulumi.Input<string>, fontSize?: pulumi.Input<string>, showTick?: pulumi.Input<boolean>, textAlign?: pulumi.Input<string>, tickEdge?: pulumi.Input<string>, tickPos?: pulumi.Input<string> }>, queryValueDefinition?: pulumi.Input<{ autoscale?: pulumi.Input<boolean>, customUnit?: pulumi.Input<string>, precision?: pulumi.Input<number>, requests?: pulumi.Input<pulumi.Input<{ aggregator?: pulumi.Input<string>, apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, conditionalFormats?: pulumi.Input<pulumi.Input<{ comparator: pulumi.Input<string>, customBgColor?: pulumi.Input<string>, customFgColor?: pulumi.Input<string>, hideValue?: pulumi.Input<boolean>, imageUrl?: pulumi.Input<string>, palette: pulumi.Input<string>, timeframe?: pulumi.Input<string>, value: pulumi.Input<number> }>[]>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]>, textAlign?: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, scatterplotDefinition?: pulumi.Input<{ colorByGroups?: pulumi.Input<pulumi.Input<string>[]>, request?: pulumi.Input<{ xes?: pulumi.Input<pulumi.Input<{ aggregator?: pulumi.Input<string>, apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]>, ys?: pulumi.Input<pulumi.Input<{ aggregator?: pulumi.Input<string>, apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]> }>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, xaxis?: pulumi.Input<{ includeZero?: pulumi.Input<boolean>, label?: pulumi.Input<string>, max?: pulumi.Input<string>, min?: pulumi.Input<string>, scale?: pulumi.Input<string> }>, yaxis?: pulumi.Input<{ includeZero?: pulumi.Input<boolean>, label?: pulumi.Input<string>, max?: pulumi.Input<string>, min?: pulumi.Input<string>, scale?: pulumi.Input<string> }> }>, timeseriesDefinition?: pulumi.Input<{ legendSize?: pulumi.Input<string>, markers?: pulumi.Input<pulumi.Input<{ displayType?: pulumi.Input<string>, label?: pulumi.Input<string>, value: pulumi.Input<string> }>[]>, requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, displayType?: pulumi.Input<string>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, metadatas?: pulumi.Input<pulumi.Input<{ aliasName?: pulumi.Input<string>, expression: pulumi.Input<string> }>[]>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ lineType?: pulumi.Input<string>, lineWidth?: pulumi.Input<string>, palette?: pulumi.Input<string> }> }>[]>, showLegend?: pulumi.Input<boolean>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, toplistDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, conditionalFormats?: pulumi.Input<pulumi.Input<{ comparator: pulumi.Input<string>, customBgColor?: pulumi.Input<string>, customFgColor?: pulumi.Input<string>, hideValue?: pulumi.Input<boolean>, imageUrl?: pulumi.Input<string>, palette: pulumi.Input<string>, timeframe?: pulumi.Input<string>, value: pulumi.Input<number> }>[]>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ palette?: pulumi.Input<string> }> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, traceServiceDefinition?: pulumi.Input<{ displayFormat?: pulumi.Input<string>, env: pulumi.Input<string>, service: pulumi.Input<string>, showBreakdown?: pulumi.Input<boolean>, showDistribution?: pulumi.Input<boolean>, showErrors?: pulumi.Input<boolean>, showHits?: pulumi.Input<boolean>, showLatency?: pulumi.Input<boolean>, showResourceList?: pulumi.Input<boolean>, sizeFormat?: pulumi.Input<string>, spanName: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }> }>[]> }>, heatmapDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ palette?: pulumi.Input<string> }> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, yaxis?: pulumi.Input<{ includeZero?: pulumi.Input<boolean>, label?: pulumi.Input<string>, max?: pulumi.Input<string>, min?: pulumi.Input<string>, scale?: pulumi.Input<string> }> }>, hostmapDefinition?: pulumi.Input<{ groups?: pulumi.Input<pulumi.Input<string>[]>, noGroupHosts?: pulumi.Input<boolean>, noMetricHosts?: pulumi.Input<boolean>, nodeType?: pulumi.Input<string>, request?: pulumi.Input<{ fills?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]>, sizes?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]> }>, scopes?: pulumi.Input<pulumi.Input<string>[]>, style?: pulumi.Input<{ fillMax?: pulumi.Input<string>, fillMin?: pulumi.Input<string>, palette?: pulumi.Input<string>, paletteFlip?: pulumi.Input<boolean> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, iframeDefinition?: pulumi.Input<{ url: pulumi.Input<string> }>, imageDefinition?: pulumi.Input<{ margin?: pulumi.Input<string>, sizing?: pulumi.Input<string>, url: pulumi.Input<string> }>, layout?: pulumi.Input<{ height: pulumi.Input<number>, width: pulumi.Input<number>, x: pulumi.Input<number>, y: pulumi.Input<number> }>, logStreamDefinition?: pulumi.Input<{ columns?: pulumi.Input<pulumi.Input<string>[]>, logset: pulumi.Input<string>, query?: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, manageStatusDefinition?: pulumi.Input<{ colorPreference?: pulumi.Input<string>, count?: pulumi.Input<number>, displayFormat?: pulumi.Input<string>, hideZeroCounts?: pulumi.Input<boolean>, query: pulumi.Input<string>, sort?: pulumi.Input<string>, start?: pulumi.Input<number>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, noteDefinition?: pulumi.Input<{ backgroundColor?: pulumi.Input<string>, content: pulumi.Input<string>, fontSize?: pulumi.Input<string>, showTick?: pulumi.Input<boolean>, textAlign?: pulumi.Input<string>, tickEdge?: pulumi.Input<string>, tickPos?: pulumi.Input<string> }>, queryValueDefinition?: pulumi.Input<{ autoscale?: pulumi.Input<boolean>, customUnit?: pulumi.Input<string>, precision?: pulumi.Input<number>, requests?: pulumi.Input<pulumi.Input<{ aggregator?: pulumi.Input<string>, apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, conditionalFormats?: pulumi.Input<pulumi.Input<{ comparator: pulumi.Input<string>, customBgColor?: pulumi.Input<string>, customFgColor?: pulumi.Input<string>, hideValue?: pulumi.Input<boolean>, imageUrl?: pulumi.Input<string>, palette: pulumi.Input<string>, timeframe?: pulumi.Input<string>, value: pulumi.Input<number> }>[]>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]>, textAlign?: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, scatterplotDefinition?: pulumi.Input<{ colorByGroups?: pulumi.Input<pulumi.Input<string>[]>, request?: pulumi.Input<{ xes?: pulumi.Input<pulumi.Input<{ aggregator?: pulumi.Input<string>, apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]>, ys?: pulumi.Input<pulumi.Input<{ aggregator?: pulumi.Input<string>, apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]> }>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, xaxis?: pulumi.Input<{ includeZero?: pulumi.Input<boolean>, label?: pulumi.Input<string>, max?: pulumi.Input<string>, min?: pulumi.Input<string>, scale?: pulumi.Input<string> }>, yaxis?: pulumi.Input<{ includeZero?: pulumi.Input<boolean>, label?: pulumi.Input<string>, max?: pulumi.Input<string>, min?: pulumi.Input<string>, scale?: pulumi.Input<string> }> }>, timeseriesDefinition?: pulumi.Input<{ legendSize?: pulumi.Input<string>, markers?: pulumi.Input<pulumi.Input<{ displayType?: pulumi.Input<string>, label?: pulumi.Input<string>, value: pulumi.Input<string> }>[]>, requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, displayType?: pulumi.Input<string>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, metadatas?: pulumi.Input<pulumi.Input<{ aliasName?: pulumi.Input<string>, expression: pulumi.Input<string> }>[]>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ lineType?: pulumi.Input<string>, lineWidth?: pulumi.Input<string>, palette?: pulumi.Input<string> }> }>[]>, showLegend?: pulumi.Input<boolean>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, toplistDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, conditionalFormats?: pulumi.Input<pulumi.Input<{ comparator: pulumi.Input<string>, customBgColor?: pulumi.Input<string>, customFgColor?: pulumi.Input<string>, hideValue?: pulumi.Input<boolean>, imageUrl?: pulumi.Input<string>, palette: pulumi.Input<string>, timeframe?: pulumi.Input<string>, value: pulumi.Input<number> }>[]>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ palette?: pulumi.Input<string> }> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, traceServiceDefinition?: pulumi.Input<{ displayFormat?: pulumi.Input<string>, env: pulumi.Input<string>, service: pulumi.Input<string>, showBreakdown?: pulumi.Input<boolean>, showDistribution?: pulumi.Input<boolean>, showErrors?: pulumi.Input<boolean>, showHits?: pulumi.Input<boolean>, showLatency?: pulumi.Input<boolean>, showResourceList?: pulumi.Input<boolean>, sizeFormat?: pulumi.Input<string>, spanName: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }> }>[]>;
}

/**
 * The set of arguments for constructing a Dashboard resource.
 */
export interface DashboardArgs {
    /**
     * The description of the dashboard.
     */
    readonly description?: pulumi.Input<string>;
    /**
     * Whether this dashboard is read-only.
     */
    readonly isReadOnly?: pulumi.Input<boolean>;
    /**
     * The layout type of the dashboard, either 'free' or 'ordered'.
     */
    readonly layoutType: pulumi.Input<string>;
    /**
     * The list of handles of users to notify when changes are made to this dashboard.
     */
    readonly notifyLists?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The list of template variables for this dashboard.
     */
    readonly templateVariables?: pulumi.Input<pulumi.Input<{ default?: pulumi.Input<string>, name: pulumi.Input<string>, prefix?: pulumi.Input<string> }>[]>;
    /**
     * The title of the dashboard.
     */
    readonly title: pulumi.Input<string>;
    /**
     * The list of widgets to display on the dashboard.
     */
    readonly widgets: pulumi.Input<pulumi.Input<{ alertGraphDefinition?: pulumi.Input<{ alertId: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, vizType: pulumi.Input<string> }>, alertValueDefinition?: pulumi.Input<{ alertId: pulumi.Input<string>, precision?: pulumi.Input<number>, textAlign?: pulumi.Input<string>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, unit?: pulumi.Input<string> }>, changeDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, changeType?: pulumi.Input<string>, compareTo?: pulumi.Input<string>, increaseGood?: pulumi.Input<boolean>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, orderBy?: pulumi.Input<string>, orderDir?: pulumi.Input<string>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, showPresent?: pulumi.Input<boolean> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, checkStatusDefinition?: pulumi.Input<{ check: pulumi.Input<string>, group?: pulumi.Input<string>, groupBies?: pulumi.Input<pulumi.Input<string>[]>, grouping: pulumi.Input<string>, tags?: pulumi.Input<pulumi.Input<string>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, distributionDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ palette?: pulumi.Input<string> }> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, eventStreamDefinition?: pulumi.Input<{ eventSize?: pulumi.Input<string>, query: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, eventTimelineDefinition?: pulumi.Input<{ query: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, freeTextDefinition?: pulumi.Input<{ color?: pulumi.Input<string>, fontSize?: pulumi.Input<string>, text: pulumi.Input<string>, textAlign?: pulumi.Input<string> }>, groupDefinition?: pulumi.Input<{ layoutType: pulumi.Input<string>, title?: pulumi.Input<string>, widgets: pulumi.Input<pulumi.Input<{ alertGraphDefinition?: pulumi.Input<{ alertId: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, vizType: pulumi.Input<string> }>, alertValueDefinition?: pulumi.Input<{ alertId: pulumi.Input<string>, precision?: pulumi.Input<number>, textAlign?: pulumi.Input<string>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, unit?: pulumi.Input<string> }>, changeDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, changeType?: pulumi.Input<string>, compareTo?: pulumi.Input<string>, increaseGood?: pulumi.Input<boolean>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, orderBy?: pulumi.Input<string>, orderDir?: pulumi.Input<string>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, showPresent?: pulumi.Input<boolean> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, checkStatusDefinition?: pulumi.Input<{ check: pulumi.Input<string>, group?: pulumi.Input<string>, groupBies?: pulumi.Input<pulumi.Input<string>[]>, grouping: pulumi.Input<string>, tags?: pulumi.Input<pulumi.Input<string>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, distributionDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ palette?: pulumi.Input<string> }> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, eventStreamDefinition?: pulumi.Input<{ eventSize?: pulumi.Input<string>, query: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, eventTimelineDefinition?: pulumi.Input<{ query: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, freeTextDefinition?: pulumi.Input<{ color?: pulumi.Input<string>, fontSize?: pulumi.Input<string>, text: pulumi.Input<string>, textAlign?: pulumi.Input<string> }>, heatmapDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ palette?: pulumi.Input<string> }> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, yaxis?: pulumi.Input<{ includeZero?: pulumi.Input<boolean>, label?: pulumi.Input<string>, max?: pulumi.Input<string>, min?: pulumi.Input<string>, scale?: pulumi.Input<string> }> }>, hostmapDefinition?: pulumi.Input<{ groups?: pulumi.Input<pulumi.Input<string>[]>, noGroupHosts?: pulumi.Input<boolean>, noMetricHosts?: pulumi.Input<boolean>, nodeType?: pulumi.Input<string>, request?: pulumi.Input<{ fills?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]>, sizes?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]> }>, scopes?: pulumi.Input<pulumi.Input<string>[]>, style?: pulumi.Input<{ fillMax?: pulumi.Input<string>, fillMin?: pulumi.Input<string>, palette?: pulumi.Input<string>, paletteFlip?: pulumi.Input<boolean> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, iframeDefinition?: pulumi.Input<{ url: pulumi.Input<string> }>, imageDefinition?: pulumi.Input<{ margin?: pulumi.Input<string>, sizing?: pulumi.Input<string>, url: pulumi.Input<string> }>, layout?: pulumi.Input<{ height: pulumi.Input<number>, width: pulumi.Input<number>, x: pulumi.Input<number>, y: pulumi.Input<number> }>, logStreamDefinition?: pulumi.Input<{ columns?: pulumi.Input<pulumi.Input<string>[]>, logset: pulumi.Input<string>, query?: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, manageStatusDefinition?: pulumi.Input<{ colorPreference?: pulumi.Input<string>, count?: pulumi.Input<number>, displayFormat?: pulumi.Input<string>, hideZeroCounts?: pulumi.Input<boolean>, query: pulumi.Input<string>, sort?: pulumi.Input<string>, start?: pulumi.Input<number>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, noteDefinition?: pulumi.Input<{ backgroundColor?: pulumi.Input<string>, content: pulumi.Input<string>, fontSize?: pulumi.Input<string>, showTick?: pulumi.Input<boolean>, textAlign?: pulumi.Input<string>, tickEdge?: pulumi.Input<string>, tickPos?: pulumi.Input<string> }>, queryValueDefinition?: pulumi.Input<{ autoscale?: pulumi.Input<boolean>, customUnit?: pulumi.Input<string>, precision?: pulumi.Input<number>, requests?: pulumi.Input<pulumi.Input<{ aggregator?: pulumi.Input<string>, apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, conditionalFormats?: pulumi.Input<pulumi.Input<{ comparator: pulumi.Input<string>, customBgColor?: pulumi.Input<string>, customFgColor?: pulumi.Input<string>, hideValue?: pulumi.Input<boolean>, imageUrl?: pulumi.Input<string>, palette: pulumi.Input<string>, timeframe?: pulumi.Input<string>, value: pulumi.Input<number> }>[]>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]>, textAlign?: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, scatterplotDefinition?: pulumi.Input<{ colorByGroups?: pulumi.Input<pulumi.Input<string>[]>, request?: pulumi.Input<{ xes?: pulumi.Input<pulumi.Input<{ aggregator?: pulumi.Input<string>, apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]>, ys?: pulumi.Input<pulumi.Input<{ aggregator?: pulumi.Input<string>, apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]> }>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, xaxis?: pulumi.Input<{ includeZero?: pulumi.Input<boolean>, label?: pulumi.Input<string>, max?: pulumi.Input<string>, min?: pulumi.Input<string>, scale?: pulumi.Input<string> }>, yaxis?: pulumi.Input<{ includeZero?: pulumi.Input<boolean>, label?: pulumi.Input<string>, max?: pulumi.Input<string>, min?: pulumi.Input<string>, scale?: pulumi.Input<string> }> }>, timeseriesDefinition?: pulumi.Input<{ legendSize?: pulumi.Input<string>, markers?: pulumi.Input<pulumi.Input<{ displayType?: pulumi.Input<string>, label?: pulumi.Input<string>, value: pulumi.Input<string> }>[]>, requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, displayType?: pulumi.Input<string>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, metadatas?: pulumi.Input<pulumi.Input<{ aliasName?: pulumi.Input<string>, expression: pulumi.Input<string> }>[]>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ lineType?: pulumi.Input<string>, lineWidth?: pulumi.Input<string>, palette?: pulumi.Input<string> }> }>[]>, showLegend?: pulumi.Input<boolean>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, toplistDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, conditionalFormats?: pulumi.Input<pulumi.Input<{ comparator: pulumi.Input<string>, customBgColor?: pulumi.Input<string>, customFgColor?: pulumi.Input<string>, hideValue?: pulumi.Input<boolean>, imageUrl?: pulumi.Input<string>, palette: pulumi.Input<string>, timeframe?: pulumi.Input<string>, value: pulumi.Input<number> }>[]>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ palette?: pulumi.Input<string> }> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, traceServiceDefinition?: pulumi.Input<{ displayFormat?: pulumi.Input<string>, env: pulumi.Input<string>, service: pulumi.Input<string>, showBreakdown?: pulumi.Input<boolean>, showDistribution?: pulumi.Input<boolean>, showErrors?: pulumi.Input<boolean>, showHits?: pulumi.Input<boolean>, showLatency?: pulumi.Input<boolean>, showResourceList?: pulumi.Input<boolean>, sizeFormat?: pulumi.Input<string>, spanName: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }> }>[]> }>, heatmapDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ palette?: pulumi.Input<string> }> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, yaxis?: pulumi.Input<{ includeZero?: pulumi.Input<boolean>, label?: pulumi.Input<string>, max?: pulumi.Input<string>, min?: pulumi.Input<string>, scale?: pulumi.Input<string> }> }>, hostmapDefinition?: pulumi.Input<{ groups?: pulumi.Input<pulumi.Input<string>[]>, noGroupHosts?: pulumi.Input<boolean>, noMetricHosts?: pulumi.Input<boolean>, nodeType?: pulumi.Input<string>, request?: pulumi.Input<{ fills?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]>, sizes?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]> }>, scopes?: pulumi.Input<pulumi.Input<string>[]>, style?: pulumi.Input<{ fillMax?: pulumi.Input<string>, fillMin?: pulumi.Input<string>, palette?: pulumi.Input<string>, paletteFlip?: pulumi.Input<boolean> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, iframeDefinition?: pulumi.Input<{ url: pulumi.Input<string> }>, imageDefinition?: pulumi.Input<{ margin?: pulumi.Input<string>, sizing?: pulumi.Input<string>, url: pulumi.Input<string> }>, layout?: pulumi.Input<{ height: pulumi.Input<number>, width: pulumi.Input<number>, x: pulumi.Input<number>, y: pulumi.Input<number> }>, logStreamDefinition?: pulumi.Input<{ columns?: pulumi.Input<pulumi.Input<string>[]>, logset: pulumi.Input<string>, query?: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, manageStatusDefinition?: pulumi.Input<{ colorPreference?: pulumi.Input<string>, count?: pulumi.Input<number>, displayFormat?: pulumi.Input<string>, hideZeroCounts?: pulumi.Input<boolean>, query: pulumi.Input<string>, sort?: pulumi.Input<string>, start?: pulumi.Input<number>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, noteDefinition?: pulumi.Input<{ backgroundColor?: pulumi.Input<string>, content: pulumi.Input<string>, fontSize?: pulumi.Input<string>, showTick?: pulumi.Input<boolean>, textAlign?: pulumi.Input<string>, tickEdge?: pulumi.Input<string>, tickPos?: pulumi.Input<string> }>, queryValueDefinition?: pulumi.Input<{ autoscale?: pulumi.Input<boolean>, customUnit?: pulumi.Input<string>, precision?: pulumi.Input<number>, requests?: pulumi.Input<pulumi.Input<{ aggregator?: pulumi.Input<string>, apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, conditionalFormats?: pulumi.Input<pulumi.Input<{ comparator: pulumi.Input<string>, customBgColor?: pulumi.Input<string>, customFgColor?: pulumi.Input<string>, hideValue?: pulumi.Input<boolean>, imageUrl?: pulumi.Input<string>, palette: pulumi.Input<string>, timeframe?: pulumi.Input<string>, value: pulumi.Input<number> }>[]>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]>, textAlign?: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, scatterplotDefinition?: pulumi.Input<{ colorByGroups?: pulumi.Input<pulumi.Input<string>[]>, request?: pulumi.Input<{ xes?: pulumi.Input<pulumi.Input<{ aggregator?: pulumi.Input<string>, apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]>, ys?: pulumi.Input<pulumi.Input<{ aggregator?: pulumi.Input<string>, apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string> }>[]> }>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string>, xaxis?: pulumi.Input<{ includeZero?: pulumi.Input<boolean>, label?: pulumi.Input<string>, max?: pulumi.Input<string>, min?: pulumi.Input<string>, scale?: pulumi.Input<string> }>, yaxis?: pulumi.Input<{ includeZero?: pulumi.Input<boolean>, label?: pulumi.Input<string>, max?: pulumi.Input<string>, min?: pulumi.Input<string>, scale?: pulumi.Input<string> }> }>, timeseriesDefinition?: pulumi.Input<{ legendSize?: pulumi.Input<string>, markers?: pulumi.Input<pulumi.Input<{ displayType?: pulumi.Input<string>, label?: pulumi.Input<string>, value: pulumi.Input<string> }>[]>, requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, displayType?: pulumi.Input<string>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, metadatas?: pulumi.Input<pulumi.Input<{ aliasName?: pulumi.Input<string>, expression: pulumi.Input<string> }>[]>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ lineType?: pulumi.Input<string>, lineWidth?: pulumi.Input<string>, palette?: pulumi.Input<string> }> }>[]>, showLegend?: pulumi.Input<boolean>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, toplistDefinition?: pulumi.Input<{ requests?: pulumi.Input<pulumi.Input<{ apmQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, conditionalFormats?: pulumi.Input<pulumi.Input<{ comparator: pulumi.Input<string>, customBgColor?: pulumi.Input<string>, customFgColor?: pulumi.Input<string>, hideValue?: pulumi.Input<boolean>, imageUrl?: pulumi.Input<string>, palette: pulumi.Input<string>, timeframe?: pulumi.Input<string>, value: pulumi.Input<number> }>[]>, logQuery?: pulumi.Input<{ compute: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, interval?: pulumi.Input<number> }>, groupBies?: pulumi.Input<pulumi.Input<{ facet: pulumi.Input<string>, limit?: pulumi.Input<number>, sort?: pulumi.Input<{ aggregation: pulumi.Input<string>, facet?: pulumi.Input<string>, order: pulumi.Input<string> }> }>[]>, index: pulumi.Input<string>, search?: pulumi.Input<{ query: pulumi.Input<string> }> }>, processQuery?: pulumi.Input<{ filterBies?: pulumi.Input<pulumi.Input<string>[]>, limit?: pulumi.Input<number>, metric: pulumi.Input<string>, searchBy?: pulumi.Input<string> }>, q?: pulumi.Input<string>, style?: pulumi.Input<{ palette?: pulumi.Input<string> }> }>[]>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }>, traceServiceDefinition?: pulumi.Input<{ displayFormat?: pulumi.Input<string>, env: pulumi.Input<string>, service: pulumi.Input<string>, showBreakdown?: pulumi.Input<boolean>, showDistribution?: pulumi.Input<boolean>, showErrors?: pulumi.Input<boolean>, showHits?: pulumi.Input<boolean>, showLatency?: pulumi.Input<boolean>, showResourceList?: pulumi.Input<boolean>, sizeFormat?: pulumi.Input<string>, spanName: pulumi.Input<string>, time?: pulumi.Input<{ liveSpan?: pulumi.Input<string> }>, title?: pulumi.Input<string>, titleAlign?: pulumi.Input<string>, titleSize?: pulumi.Input<string> }> }>[]>;
}
