// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat;
import com.pulumi.datadog.outputs.DashboardWidgetQueryValueDefinitionRequestFormulaLimit;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class DashboardWidgetQueryValueDefinitionRequestFormula {
    private @Nullable String alias;
    private @Nullable String cellDisplayMode;
    private @Nullable List<DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat> conditionalFormats;
    private String formulaExpression;
    private @Nullable DashboardWidgetQueryValueDefinitionRequestFormulaLimit limit;

    private DashboardWidgetQueryValueDefinitionRequestFormula() {}
    public Optional<String> alias() {
        return Optional.ofNullable(this.alias);
    }
    public Optional<String> cellDisplayMode() {
        return Optional.ofNullable(this.cellDisplayMode);
    }
    public List<DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat> conditionalFormats() {
        return this.conditionalFormats == null ? List.of() : this.conditionalFormats;
    }
    public String formulaExpression() {
        return this.formulaExpression;
    }
    public Optional<DashboardWidgetQueryValueDefinitionRequestFormulaLimit> limit() {
        return Optional.ofNullable(this.limit);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(DashboardWidgetQueryValueDefinitionRequestFormula defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String alias;
        private @Nullable String cellDisplayMode;
        private @Nullable List<DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat> conditionalFormats;
        private String formulaExpression;
        private @Nullable DashboardWidgetQueryValueDefinitionRequestFormulaLimit limit;
        public Builder() {}
        public Builder(DashboardWidgetQueryValueDefinitionRequestFormula defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.alias = defaults.alias;
    	      this.cellDisplayMode = defaults.cellDisplayMode;
    	      this.conditionalFormats = defaults.conditionalFormats;
    	      this.formulaExpression = defaults.formulaExpression;
    	      this.limit = defaults.limit;
        }

        @CustomType.Setter
        public Builder alias(@Nullable String alias) {
            this.alias = alias;
            return this;
        }
        @CustomType.Setter
        public Builder cellDisplayMode(@Nullable String cellDisplayMode) {
            this.cellDisplayMode = cellDisplayMode;
            return this;
        }
        @CustomType.Setter
        public Builder conditionalFormats(@Nullable List<DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat> conditionalFormats) {
            this.conditionalFormats = conditionalFormats;
            return this;
        }
        public Builder conditionalFormats(DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormat... conditionalFormats) {
            return conditionalFormats(List.of(conditionalFormats));
        }
        @CustomType.Setter
        public Builder formulaExpression(String formulaExpression) {
            this.formulaExpression = Objects.requireNonNull(formulaExpression);
            return this;
        }
        @CustomType.Setter
        public Builder limit(@Nullable DashboardWidgetQueryValueDefinitionRequestFormulaLimit limit) {
            this.limit = limit;
            return this;
        }
        public DashboardWidgetQueryValueDefinitionRequestFormula build() {
            final var o = new DashboardWidgetQueryValueDefinitionRequestFormula();
            o.alias = alias;
            o.cellDisplayMode = cellDisplayMode;
            o.conditionalFormats = conditionalFormats;
            o.formulaExpression = formulaExpression;
            o.limit = limit;
            return o;
        }
    }
}
