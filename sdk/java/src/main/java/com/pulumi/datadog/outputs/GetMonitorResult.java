// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.datadog.outputs.GetMonitorMonitorThreshold;
import com.pulumi.datadog.outputs.GetMonitorMonitorThresholdWindow;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetMonitorResult {
    private Boolean enableLogsSample;
    private String escalationMessage;
    private Integer evaluationDelay;
    private String groupRetentionDuration;
    private Boolean groupbySimpleMonitor;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private Boolean includeTags;
    private Boolean locked;
    private String message;
    private @Nullable List<String> monitorTagsFilters;
    private List<GetMonitorMonitorThresholdWindow> monitorThresholdWindows;
    private List<GetMonitorMonitorThreshold> monitorThresholds;
    private String name;
    private @Nullable String nameFilter;
    private Integer newGroupDelay;
    private Integer newHostDelay;
    private Integer noDataTimeframe;
    private Boolean notifyAudit;
    private Boolean notifyNoData;
    private String onMissingData;
    private String query;
    private Integer renotifyInterval;
    private Integer renotifyOccurrences;
    private List<String> renotifyStatuses;
    private Boolean requireFullWindow;
    private List<String> restrictedRoles;
    private List<String> tags;
    private @Nullable List<String> tagsFilters;
    private Integer timeoutH;
    private String type;

    private GetMonitorResult() {}
    public Boolean enableLogsSample() {
        return this.enableLogsSample;
    }
    public String escalationMessage() {
        return this.escalationMessage;
    }
    public Integer evaluationDelay() {
        return this.evaluationDelay;
    }
    public String groupRetentionDuration() {
        return this.groupRetentionDuration;
    }
    public Boolean groupbySimpleMonitor() {
        return this.groupbySimpleMonitor;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public Boolean includeTags() {
        return this.includeTags;
    }
    public Boolean locked() {
        return this.locked;
    }
    public String message() {
        return this.message;
    }
    public List<String> monitorTagsFilters() {
        return this.monitorTagsFilters == null ? List.of() : this.monitorTagsFilters;
    }
    public List<GetMonitorMonitorThresholdWindow> monitorThresholdWindows() {
        return this.monitorThresholdWindows;
    }
    public List<GetMonitorMonitorThreshold> monitorThresholds() {
        return this.monitorThresholds;
    }
    public String name() {
        return this.name;
    }
    public Optional<String> nameFilter() {
        return Optional.ofNullable(this.nameFilter);
    }
    public Integer newGroupDelay() {
        return this.newGroupDelay;
    }
    public Integer newHostDelay() {
        return this.newHostDelay;
    }
    public Integer noDataTimeframe() {
        return this.noDataTimeframe;
    }
    public Boolean notifyAudit() {
        return this.notifyAudit;
    }
    public Boolean notifyNoData() {
        return this.notifyNoData;
    }
    public String onMissingData() {
        return this.onMissingData;
    }
    public String query() {
        return this.query;
    }
    public Integer renotifyInterval() {
        return this.renotifyInterval;
    }
    public Integer renotifyOccurrences() {
        return this.renotifyOccurrences;
    }
    public List<String> renotifyStatuses() {
        return this.renotifyStatuses;
    }
    public Boolean requireFullWindow() {
        return this.requireFullWindow;
    }
    public List<String> restrictedRoles() {
        return this.restrictedRoles;
    }
    public List<String> tags() {
        return this.tags;
    }
    public List<String> tagsFilters() {
        return this.tagsFilters == null ? List.of() : this.tagsFilters;
    }
    public Integer timeoutH() {
        return this.timeoutH;
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetMonitorResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean enableLogsSample;
        private String escalationMessage;
        private Integer evaluationDelay;
        private String groupRetentionDuration;
        private Boolean groupbySimpleMonitor;
        private String id;
        private Boolean includeTags;
        private Boolean locked;
        private String message;
        private @Nullable List<String> monitorTagsFilters;
        private List<GetMonitorMonitorThresholdWindow> monitorThresholdWindows;
        private List<GetMonitorMonitorThreshold> monitorThresholds;
        private String name;
        private @Nullable String nameFilter;
        private Integer newGroupDelay;
        private Integer newHostDelay;
        private Integer noDataTimeframe;
        private Boolean notifyAudit;
        private Boolean notifyNoData;
        private String onMissingData;
        private String query;
        private Integer renotifyInterval;
        private Integer renotifyOccurrences;
        private List<String> renotifyStatuses;
        private Boolean requireFullWindow;
        private List<String> restrictedRoles;
        private List<String> tags;
        private @Nullable List<String> tagsFilters;
        private Integer timeoutH;
        private String type;
        public Builder() {}
        public Builder(GetMonitorResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.enableLogsSample = defaults.enableLogsSample;
    	      this.escalationMessage = defaults.escalationMessage;
    	      this.evaluationDelay = defaults.evaluationDelay;
    	      this.groupRetentionDuration = defaults.groupRetentionDuration;
    	      this.groupbySimpleMonitor = defaults.groupbySimpleMonitor;
    	      this.id = defaults.id;
    	      this.includeTags = defaults.includeTags;
    	      this.locked = defaults.locked;
    	      this.message = defaults.message;
    	      this.monitorTagsFilters = defaults.monitorTagsFilters;
    	      this.monitorThresholdWindows = defaults.monitorThresholdWindows;
    	      this.monitorThresholds = defaults.monitorThresholds;
    	      this.name = defaults.name;
    	      this.nameFilter = defaults.nameFilter;
    	      this.newGroupDelay = defaults.newGroupDelay;
    	      this.newHostDelay = defaults.newHostDelay;
    	      this.noDataTimeframe = defaults.noDataTimeframe;
    	      this.notifyAudit = defaults.notifyAudit;
    	      this.notifyNoData = defaults.notifyNoData;
    	      this.onMissingData = defaults.onMissingData;
    	      this.query = defaults.query;
    	      this.renotifyInterval = defaults.renotifyInterval;
    	      this.renotifyOccurrences = defaults.renotifyOccurrences;
    	      this.renotifyStatuses = defaults.renotifyStatuses;
    	      this.requireFullWindow = defaults.requireFullWindow;
    	      this.restrictedRoles = defaults.restrictedRoles;
    	      this.tags = defaults.tags;
    	      this.tagsFilters = defaults.tagsFilters;
    	      this.timeoutH = defaults.timeoutH;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder enableLogsSample(Boolean enableLogsSample) {
            this.enableLogsSample = Objects.requireNonNull(enableLogsSample);
            return this;
        }
        @CustomType.Setter
        public Builder escalationMessage(String escalationMessage) {
            this.escalationMessage = Objects.requireNonNull(escalationMessage);
            return this;
        }
        @CustomType.Setter
        public Builder evaluationDelay(Integer evaluationDelay) {
            this.evaluationDelay = Objects.requireNonNull(evaluationDelay);
            return this;
        }
        @CustomType.Setter
        public Builder groupRetentionDuration(String groupRetentionDuration) {
            this.groupRetentionDuration = Objects.requireNonNull(groupRetentionDuration);
            return this;
        }
        @CustomType.Setter
        public Builder groupbySimpleMonitor(Boolean groupbySimpleMonitor) {
            this.groupbySimpleMonitor = Objects.requireNonNull(groupbySimpleMonitor);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder includeTags(Boolean includeTags) {
            this.includeTags = Objects.requireNonNull(includeTags);
            return this;
        }
        @CustomType.Setter
        public Builder locked(Boolean locked) {
            this.locked = Objects.requireNonNull(locked);
            return this;
        }
        @CustomType.Setter
        public Builder message(String message) {
            this.message = Objects.requireNonNull(message);
            return this;
        }
        @CustomType.Setter
        public Builder monitorTagsFilters(@Nullable List<String> monitorTagsFilters) {
            this.monitorTagsFilters = monitorTagsFilters;
            return this;
        }
        public Builder monitorTagsFilters(String... monitorTagsFilters) {
            return monitorTagsFilters(List.of(monitorTagsFilters));
        }
        @CustomType.Setter
        public Builder monitorThresholdWindows(List<GetMonitorMonitorThresholdWindow> monitorThresholdWindows) {
            this.monitorThresholdWindows = Objects.requireNonNull(monitorThresholdWindows);
            return this;
        }
        public Builder monitorThresholdWindows(GetMonitorMonitorThresholdWindow... monitorThresholdWindows) {
            return monitorThresholdWindows(List.of(monitorThresholdWindows));
        }
        @CustomType.Setter
        public Builder monitorThresholds(List<GetMonitorMonitorThreshold> monitorThresholds) {
            this.monitorThresholds = Objects.requireNonNull(monitorThresholds);
            return this;
        }
        public Builder monitorThresholds(GetMonitorMonitorThreshold... monitorThresholds) {
            return monitorThresholds(List.of(monitorThresholds));
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder nameFilter(@Nullable String nameFilter) {
            this.nameFilter = nameFilter;
            return this;
        }
        @CustomType.Setter
        public Builder newGroupDelay(Integer newGroupDelay) {
            this.newGroupDelay = Objects.requireNonNull(newGroupDelay);
            return this;
        }
        @CustomType.Setter
        public Builder newHostDelay(Integer newHostDelay) {
            this.newHostDelay = Objects.requireNonNull(newHostDelay);
            return this;
        }
        @CustomType.Setter
        public Builder noDataTimeframe(Integer noDataTimeframe) {
            this.noDataTimeframe = Objects.requireNonNull(noDataTimeframe);
            return this;
        }
        @CustomType.Setter
        public Builder notifyAudit(Boolean notifyAudit) {
            this.notifyAudit = Objects.requireNonNull(notifyAudit);
            return this;
        }
        @CustomType.Setter
        public Builder notifyNoData(Boolean notifyNoData) {
            this.notifyNoData = Objects.requireNonNull(notifyNoData);
            return this;
        }
        @CustomType.Setter
        public Builder onMissingData(String onMissingData) {
            this.onMissingData = Objects.requireNonNull(onMissingData);
            return this;
        }
        @CustomType.Setter
        public Builder query(String query) {
            this.query = Objects.requireNonNull(query);
            return this;
        }
        @CustomType.Setter
        public Builder renotifyInterval(Integer renotifyInterval) {
            this.renotifyInterval = Objects.requireNonNull(renotifyInterval);
            return this;
        }
        @CustomType.Setter
        public Builder renotifyOccurrences(Integer renotifyOccurrences) {
            this.renotifyOccurrences = Objects.requireNonNull(renotifyOccurrences);
            return this;
        }
        @CustomType.Setter
        public Builder renotifyStatuses(List<String> renotifyStatuses) {
            this.renotifyStatuses = Objects.requireNonNull(renotifyStatuses);
            return this;
        }
        public Builder renotifyStatuses(String... renotifyStatuses) {
            return renotifyStatuses(List.of(renotifyStatuses));
        }
        @CustomType.Setter
        public Builder requireFullWindow(Boolean requireFullWindow) {
            this.requireFullWindow = Objects.requireNonNull(requireFullWindow);
            return this;
        }
        @CustomType.Setter
        public Builder restrictedRoles(List<String> restrictedRoles) {
            this.restrictedRoles = Objects.requireNonNull(restrictedRoles);
            return this;
        }
        public Builder restrictedRoles(String... restrictedRoles) {
            return restrictedRoles(List.of(restrictedRoles));
        }
        @CustomType.Setter
        public Builder tags(List<String> tags) {
            this.tags = Objects.requireNonNull(tags);
            return this;
        }
        public Builder tags(String... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder tagsFilters(@Nullable List<String> tagsFilters) {
            this.tagsFilters = tagsFilters;
            return this;
        }
        public Builder tagsFilters(String... tagsFilters) {
            return tagsFilters(List.of(tagsFilters));
        }
        @CustomType.Setter
        public Builder timeoutH(Integer timeoutH) {
            this.timeoutH = Objects.requireNonNull(timeoutH);
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            this.type = Objects.requireNonNull(type);
            return this;
        }
        public GetMonitorResult build() {
            final var o = new GetMonitorResult();
            o.enableLogsSample = enableLogsSample;
            o.escalationMessage = escalationMessage;
            o.evaluationDelay = evaluationDelay;
            o.groupRetentionDuration = groupRetentionDuration;
            o.groupbySimpleMonitor = groupbySimpleMonitor;
            o.id = id;
            o.includeTags = includeTags;
            o.locked = locked;
            o.message = message;
            o.monitorTagsFilters = monitorTagsFilters;
            o.monitorThresholdWindows = monitorThresholdWindows;
            o.monitorThresholds = monitorThresholds;
            o.name = name;
            o.nameFilter = nameFilter;
            o.newGroupDelay = newGroupDelay;
            o.newHostDelay = newHostDelay;
            o.noDataTimeframe = noDataTimeframe;
            o.notifyAudit = notifyAudit;
            o.notifyNoData = notifyNoData;
            o.onMissingData = onMissingData;
            o.query = query;
            o.renotifyInterval = renotifyInterval;
            o.renotifyOccurrences = renotifyOccurrences;
            o.renotifyStatuses = renotifyStatuses;
            o.requireFullWindow = requireFullWindow;
            o.restrictedRoles = restrictedRoles;
            o.tags = tags;
            o.tagsFilters = tagsFilters;
            o.timeoutH = timeoutH;
            o.type = type;
            return o;
        }
    }
}
