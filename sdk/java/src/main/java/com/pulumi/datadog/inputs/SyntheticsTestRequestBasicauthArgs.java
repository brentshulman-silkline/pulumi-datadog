// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticsTestRequestBasicauthArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticsTestRequestBasicauthArgs Empty = new SyntheticsTestRequestBasicauthArgs();

    @Import(name="accessKey")
    private @Nullable Output<String> accessKey;

    public Optional<Output<String>> accessKey() {
        return Optional.ofNullable(this.accessKey);
    }

    @Import(name="domain")
    private @Nullable Output<String> domain;

    public Optional<Output<String>> domain() {
        return Optional.ofNullable(this.domain);
    }

    @Import(name="password")
    private @Nullable Output<String> password;

    public Optional<Output<String>> password() {
        return Optional.ofNullable(this.password);
    }

    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    @Import(name="secretKey")
    private @Nullable Output<String> secretKey;

    public Optional<Output<String>> secretKey() {
        return Optional.ofNullable(this.secretKey);
    }

    @Import(name="serviceName")
    private @Nullable Output<String> serviceName;

    public Optional<Output<String>> serviceName() {
        return Optional.ofNullable(this.serviceName);
    }

    @Import(name="sessionToken")
    private @Nullable Output<String> sessionToken;

    public Optional<Output<String>> sessionToken() {
        return Optional.ofNullable(this.sessionToken);
    }

    @Import(name="type")
    private @Nullable Output<String> type;

    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    @Import(name="username")
    private @Nullable Output<String> username;

    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    @Import(name="workstation")
    private @Nullable Output<String> workstation;

    public Optional<Output<String>> workstation() {
        return Optional.ofNullable(this.workstation);
    }

    private SyntheticsTestRequestBasicauthArgs() {}

    private SyntheticsTestRequestBasicauthArgs(SyntheticsTestRequestBasicauthArgs $) {
        this.accessKey = $.accessKey;
        this.domain = $.domain;
        this.password = $.password;
        this.region = $.region;
        this.secretKey = $.secretKey;
        this.serviceName = $.serviceName;
        this.sessionToken = $.sessionToken;
        this.type = $.type;
        this.username = $.username;
        this.workstation = $.workstation;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticsTestRequestBasicauthArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticsTestRequestBasicauthArgs $;

        public Builder() {
            $ = new SyntheticsTestRequestBasicauthArgs();
        }

        public Builder(SyntheticsTestRequestBasicauthArgs defaults) {
            $ = new SyntheticsTestRequestBasicauthArgs(Objects.requireNonNull(defaults));
        }

        public Builder accessKey(@Nullable Output<String> accessKey) {
            $.accessKey = accessKey;
            return this;
        }

        public Builder accessKey(String accessKey) {
            return accessKey(Output.of(accessKey));
        }

        public Builder domain(@Nullable Output<String> domain) {
            $.domain = domain;
            return this;
        }

        public Builder domain(String domain) {
            return domain(Output.of(domain));
        }

        public Builder password(@Nullable Output<String> password) {
            $.password = password;
            return this;
        }

        public Builder password(String password) {
            return password(Output.of(password));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder secretKey(@Nullable Output<String> secretKey) {
            $.secretKey = secretKey;
            return this;
        }

        public Builder secretKey(String secretKey) {
            return secretKey(Output.of(secretKey));
        }

        public Builder serviceName(@Nullable Output<String> serviceName) {
            $.serviceName = serviceName;
            return this;
        }

        public Builder serviceName(String serviceName) {
            return serviceName(Output.of(serviceName));
        }

        public Builder sessionToken(@Nullable Output<String> sessionToken) {
            $.sessionToken = sessionToken;
            return this;
        }

        public Builder sessionToken(String sessionToken) {
            return sessionToken(Output.of(sessionToken));
        }

        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        public Builder username(String username) {
            return username(Output.of(username));
        }

        public Builder workstation(@Nullable Output<String> workstation) {
            $.workstation = workstation;
            return this;
        }

        public Builder workstation(String workstation) {
            return workstation(Output.of(workstation));
        }

        public SyntheticsTestRequestBasicauthArgs build() {
            return $;
        }
    }

}
