// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.SecurityMonitoringRuleOptionsImpossibleTravelOptionsArgs;
import com.pulumi.datadog.inputs.SecurityMonitoringRuleOptionsNewValueOptionsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SecurityMonitoringRuleOptionsArgs extends com.pulumi.resources.ResourceArgs {

    public static final SecurityMonitoringRuleOptionsArgs Empty = new SecurityMonitoringRuleOptionsArgs();

    @Import(name="decreaseCriticalityBasedOnEnv")
    private @Nullable Output<Boolean> decreaseCriticalityBasedOnEnv;

    public Optional<Output<Boolean>> decreaseCriticalityBasedOnEnv() {
        return Optional.ofNullable(this.decreaseCriticalityBasedOnEnv);
    }

    @Import(name="detectionMethod")
    private @Nullable Output<String> detectionMethod;

    public Optional<Output<String>> detectionMethod() {
        return Optional.ofNullable(this.detectionMethod);
    }

    @Import(name="evaluationWindow")
    private @Nullable Output<Integer> evaluationWindow;

    public Optional<Output<Integer>> evaluationWindow() {
        return Optional.ofNullable(this.evaluationWindow);
    }

    @Import(name="impossibleTravelOptions")
    private @Nullable Output<SecurityMonitoringRuleOptionsImpossibleTravelOptionsArgs> impossibleTravelOptions;

    public Optional<Output<SecurityMonitoringRuleOptionsImpossibleTravelOptionsArgs>> impossibleTravelOptions() {
        return Optional.ofNullable(this.impossibleTravelOptions);
    }

    @Import(name="keepAlive", required=true)
    private Output<Integer> keepAlive;

    public Output<Integer> keepAlive() {
        return this.keepAlive;
    }

    @Import(name="maxSignalDuration", required=true)
    private Output<Integer> maxSignalDuration;

    public Output<Integer> maxSignalDuration() {
        return this.maxSignalDuration;
    }

    @Import(name="newValueOptions")
    private @Nullable Output<SecurityMonitoringRuleOptionsNewValueOptionsArgs> newValueOptions;

    public Optional<Output<SecurityMonitoringRuleOptionsNewValueOptionsArgs>> newValueOptions() {
        return Optional.ofNullable(this.newValueOptions);
    }

    private SecurityMonitoringRuleOptionsArgs() {}

    private SecurityMonitoringRuleOptionsArgs(SecurityMonitoringRuleOptionsArgs $) {
        this.decreaseCriticalityBasedOnEnv = $.decreaseCriticalityBasedOnEnv;
        this.detectionMethod = $.detectionMethod;
        this.evaluationWindow = $.evaluationWindow;
        this.impossibleTravelOptions = $.impossibleTravelOptions;
        this.keepAlive = $.keepAlive;
        this.maxSignalDuration = $.maxSignalDuration;
        this.newValueOptions = $.newValueOptions;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SecurityMonitoringRuleOptionsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SecurityMonitoringRuleOptionsArgs $;

        public Builder() {
            $ = new SecurityMonitoringRuleOptionsArgs();
        }

        public Builder(SecurityMonitoringRuleOptionsArgs defaults) {
            $ = new SecurityMonitoringRuleOptionsArgs(Objects.requireNonNull(defaults));
        }

        public Builder decreaseCriticalityBasedOnEnv(@Nullable Output<Boolean> decreaseCriticalityBasedOnEnv) {
            $.decreaseCriticalityBasedOnEnv = decreaseCriticalityBasedOnEnv;
            return this;
        }

        public Builder decreaseCriticalityBasedOnEnv(Boolean decreaseCriticalityBasedOnEnv) {
            return decreaseCriticalityBasedOnEnv(Output.of(decreaseCriticalityBasedOnEnv));
        }

        public Builder detectionMethod(@Nullable Output<String> detectionMethod) {
            $.detectionMethod = detectionMethod;
            return this;
        }

        public Builder detectionMethod(String detectionMethod) {
            return detectionMethod(Output.of(detectionMethod));
        }

        public Builder evaluationWindow(@Nullable Output<Integer> evaluationWindow) {
            $.evaluationWindow = evaluationWindow;
            return this;
        }

        public Builder evaluationWindow(Integer evaluationWindow) {
            return evaluationWindow(Output.of(evaluationWindow));
        }

        public Builder impossibleTravelOptions(@Nullable Output<SecurityMonitoringRuleOptionsImpossibleTravelOptionsArgs> impossibleTravelOptions) {
            $.impossibleTravelOptions = impossibleTravelOptions;
            return this;
        }

        public Builder impossibleTravelOptions(SecurityMonitoringRuleOptionsImpossibleTravelOptionsArgs impossibleTravelOptions) {
            return impossibleTravelOptions(Output.of(impossibleTravelOptions));
        }

        public Builder keepAlive(Output<Integer> keepAlive) {
            $.keepAlive = keepAlive;
            return this;
        }

        public Builder keepAlive(Integer keepAlive) {
            return keepAlive(Output.of(keepAlive));
        }

        public Builder maxSignalDuration(Output<Integer> maxSignalDuration) {
            $.maxSignalDuration = maxSignalDuration;
            return this;
        }

        public Builder maxSignalDuration(Integer maxSignalDuration) {
            return maxSignalDuration(Output.of(maxSignalDuration));
        }

        public Builder newValueOptions(@Nullable Output<SecurityMonitoringRuleOptionsNewValueOptionsArgs> newValueOptions) {
            $.newValueOptions = newValueOptions;
            return this;
        }

        public Builder newValueOptions(SecurityMonitoringRuleOptionsNewValueOptionsArgs newValueOptions) {
            return newValueOptions(Output.of(newValueOptions));
        }

        public SecurityMonitoringRuleOptionsArgs build() {
            $.keepAlive = Objects.requireNonNull($.keepAlive, "expected parameter 'keepAlive' to be non-null");
            $.maxSignalDuration = Objects.requireNonNull($.maxSignalDuration, "expected parameter 'maxSignalDuration' to be non-null");
            return $;
        }
    }

}
