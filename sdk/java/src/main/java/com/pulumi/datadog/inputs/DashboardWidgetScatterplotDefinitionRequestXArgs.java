// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs;
import com.pulumi.datadog.inputs.DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetScatterplotDefinitionRequestXArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetScatterplotDefinitionRequestXArgs Empty = new DashboardWidgetScatterplotDefinitionRequestXArgs();

    @Import(name="aggregator")
    private @Nullable Output<String> aggregator;

    public Optional<Output<String>> aggregator() {
        return Optional.ofNullable(this.aggregator);
    }

    @Import(name="apmQuery")
    private @Nullable Output<DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs> apmQuery;

    public Optional<Output<DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs>> apmQuery() {
        return Optional.ofNullable(this.apmQuery);
    }

    @Import(name="logQuery")
    private @Nullable Output<DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs> logQuery;

    public Optional<Output<DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs>> logQuery() {
        return Optional.ofNullable(this.logQuery);
    }

    @Import(name="processQuery")
    private @Nullable Output<DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs> processQuery;

    public Optional<Output<DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs>> processQuery() {
        return Optional.ofNullable(this.processQuery);
    }

    @Import(name="q")
    private @Nullable Output<String> q;

    public Optional<Output<String>> q() {
        return Optional.ofNullable(this.q);
    }

    @Import(name="rumQuery")
    private @Nullable Output<DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs> rumQuery;

    public Optional<Output<DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs>> rumQuery() {
        return Optional.ofNullable(this.rumQuery);
    }

    @Import(name="securityQuery")
    private @Nullable Output<DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs> securityQuery;

    public Optional<Output<DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs>> securityQuery() {
        return Optional.ofNullable(this.securityQuery);
    }

    private DashboardWidgetScatterplotDefinitionRequestXArgs() {}

    private DashboardWidgetScatterplotDefinitionRequestXArgs(DashboardWidgetScatterplotDefinitionRequestXArgs $) {
        this.aggregator = $.aggregator;
        this.apmQuery = $.apmQuery;
        this.logQuery = $.logQuery;
        this.processQuery = $.processQuery;
        this.q = $.q;
        this.rumQuery = $.rumQuery;
        this.securityQuery = $.securityQuery;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetScatterplotDefinitionRequestXArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetScatterplotDefinitionRequestXArgs $;

        public Builder() {
            $ = new DashboardWidgetScatterplotDefinitionRequestXArgs();
        }

        public Builder(DashboardWidgetScatterplotDefinitionRequestXArgs defaults) {
            $ = new DashboardWidgetScatterplotDefinitionRequestXArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregator(@Nullable Output<String> aggregator) {
            $.aggregator = aggregator;
            return this;
        }

        public Builder aggregator(String aggregator) {
            return aggregator(Output.of(aggregator));
        }

        public Builder apmQuery(@Nullable Output<DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs> apmQuery) {
            $.apmQuery = apmQuery;
            return this;
        }

        public Builder apmQuery(DashboardWidgetScatterplotDefinitionRequestXApmQueryArgs apmQuery) {
            return apmQuery(Output.of(apmQuery));
        }

        public Builder logQuery(@Nullable Output<DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs> logQuery) {
            $.logQuery = logQuery;
            return this;
        }

        public Builder logQuery(DashboardWidgetScatterplotDefinitionRequestXLogQueryArgs logQuery) {
            return logQuery(Output.of(logQuery));
        }

        public Builder processQuery(@Nullable Output<DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs> processQuery) {
            $.processQuery = processQuery;
            return this;
        }

        public Builder processQuery(DashboardWidgetScatterplotDefinitionRequestXProcessQueryArgs processQuery) {
            return processQuery(Output.of(processQuery));
        }

        public Builder q(@Nullable Output<String> q) {
            $.q = q;
            return this;
        }

        public Builder q(String q) {
            return q(Output.of(q));
        }

        public Builder rumQuery(@Nullable Output<DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs> rumQuery) {
            $.rumQuery = rumQuery;
            return this;
        }

        public Builder rumQuery(DashboardWidgetScatterplotDefinitionRequestXRumQueryArgs rumQuery) {
            return rumQuery(Output.of(rumQuery));
        }

        public Builder securityQuery(@Nullable Output<DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs> securityQuery) {
            $.securityQuery = securityQuery;
            return this;
        }

        public Builder securityQuery(DashboardWidgetScatterplotDefinitionRequestXSecurityQueryArgs securityQuery) {
            return securityQuery(Output.of(securityQuery));
        }

        public DashboardWidgetScatterplotDefinitionRequestXArgs build() {
            return $;
        }
    }

}
