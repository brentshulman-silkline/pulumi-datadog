// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs Empty = new DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs();

    @Import(name="comparator", required=true)
    private Output<String> comparator;

    public Output<String> comparator() {
        return this.comparator;
    }

    @Import(name="customBgColor")
    private @Nullable Output<String> customBgColor;

    public Optional<Output<String>> customBgColor() {
        return Optional.ofNullable(this.customBgColor);
    }

    @Import(name="customFgColor")
    private @Nullable Output<String> customFgColor;

    public Optional<Output<String>> customFgColor() {
        return Optional.ofNullable(this.customFgColor);
    }

    @Import(name="hideValue")
    private @Nullable Output<Boolean> hideValue;

    public Optional<Output<Boolean>> hideValue() {
        return Optional.ofNullable(this.hideValue);
    }

    @Import(name="imageUrl")
    private @Nullable Output<String> imageUrl;

    public Optional<Output<String>> imageUrl() {
        return Optional.ofNullable(this.imageUrl);
    }

    @Import(name="metric")
    private @Nullable Output<String> metric;

    public Optional<Output<String>> metric() {
        return Optional.ofNullable(this.metric);
    }

    @Import(name="palette", required=true)
    private Output<String> palette;

    public Output<String> palette() {
        return this.palette;
    }

    @Import(name="timeframe")
    private @Nullable Output<String> timeframe;

    public Optional<Output<String>> timeframe() {
        return Optional.ofNullable(this.timeframe);
    }

    @Import(name="value", required=true)
    private Output<Double> value;

    public Output<Double> value() {
        return this.value;
    }

    private DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs() {}

    private DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs(DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs $) {
        this.comparator = $.comparator;
        this.customBgColor = $.customBgColor;
        this.customFgColor = $.customFgColor;
        this.hideValue = $.hideValue;
        this.imageUrl = $.imageUrl;
        this.metric = $.metric;
        this.palette = $.palette;
        this.timeframe = $.timeframe;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs $;

        public Builder() {
            $ = new DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs();
        }

        public Builder(DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs defaults) {
            $ = new DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs(Objects.requireNonNull(defaults));
        }

        public Builder comparator(Output<String> comparator) {
            $.comparator = comparator;
            return this;
        }

        public Builder comparator(String comparator) {
            return comparator(Output.of(comparator));
        }

        public Builder customBgColor(@Nullable Output<String> customBgColor) {
            $.customBgColor = customBgColor;
            return this;
        }

        public Builder customBgColor(String customBgColor) {
            return customBgColor(Output.of(customBgColor));
        }

        public Builder customFgColor(@Nullable Output<String> customFgColor) {
            $.customFgColor = customFgColor;
            return this;
        }

        public Builder customFgColor(String customFgColor) {
            return customFgColor(Output.of(customFgColor));
        }

        public Builder hideValue(@Nullable Output<Boolean> hideValue) {
            $.hideValue = hideValue;
            return this;
        }

        public Builder hideValue(Boolean hideValue) {
            return hideValue(Output.of(hideValue));
        }

        public Builder imageUrl(@Nullable Output<String> imageUrl) {
            $.imageUrl = imageUrl;
            return this;
        }

        public Builder imageUrl(String imageUrl) {
            return imageUrl(Output.of(imageUrl));
        }

        public Builder metric(@Nullable Output<String> metric) {
            $.metric = metric;
            return this;
        }

        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        public Builder palette(Output<String> palette) {
            $.palette = palette;
            return this;
        }

        public Builder palette(String palette) {
            return palette(Output.of(palette));
        }

        public Builder timeframe(@Nullable Output<String> timeframe) {
            $.timeframe = timeframe;
            return this;
        }

        public Builder timeframe(String timeframe) {
            return timeframe(Output.of(timeframe));
        }

        public Builder value(Output<Double> value) {
            $.value = value;
            return this;
        }

        public Builder value(Double value) {
            return value(Output.of(value));
        }

        public DashboardWidgetQueryValueDefinitionRequestFormulaConditionalFormatArgs build() {
            $.comparator = Objects.requireNonNull($.comparator, "expected parameter 'comparator' to be non-null");
            $.palette = Objects.requireNonNull($.palette, "expected parameter 'palette' to be non-null");
            $.value = Objects.requireNonNull($.value, "expected parameter 'value' to be non-null");
            return $;
        }
    }

}
