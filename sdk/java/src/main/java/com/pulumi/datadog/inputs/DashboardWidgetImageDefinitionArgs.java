// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetImageDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetImageDefinitionArgs Empty = new DashboardWidgetImageDefinitionArgs();

    @Import(name="hasBackground")
    private @Nullable Output<Boolean> hasBackground;

    public Optional<Output<Boolean>> hasBackground() {
        return Optional.ofNullable(this.hasBackground);
    }

    @Import(name="hasBorder")
    private @Nullable Output<Boolean> hasBorder;

    public Optional<Output<Boolean>> hasBorder() {
        return Optional.ofNullable(this.hasBorder);
    }

    @Import(name="horizontalAlign")
    private @Nullable Output<String> horizontalAlign;

    public Optional<Output<String>> horizontalAlign() {
        return Optional.ofNullable(this.horizontalAlign);
    }

    @Import(name="margin")
    private @Nullable Output<String> margin;

    public Optional<Output<String>> margin() {
        return Optional.ofNullable(this.margin);
    }

    @Import(name="sizing")
    private @Nullable Output<String> sizing;

    public Optional<Output<String>> sizing() {
        return Optional.ofNullable(this.sizing);
    }

    /**
     * The URL of the dashboard.
     * 
     */
    @Import(name="url", required=true)
    private Output<String> url;

    /**
     * @return The URL of the dashboard.
     * 
     */
    public Output<String> url() {
        return this.url;
    }

    @Import(name="urlDarkTheme")
    private @Nullable Output<String> urlDarkTheme;

    public Optional<Output<String>> urlDarkTheme() {
        return Optional.ofNullable(this.urlDarkTheme);
    }

    @Import(name="verticalAlign")
    private @Nullable Output<String> verticalAlign;

    public Optional<Output<String>> verticalAlign() {
        return Optional.ofNullable(this.verticalAlign);
    }

    private DashboardWidgetImageDefinitionArgs() {}

    private DashboardWidgetImageDefinitionArgs(DashboardWidgetImageDefinitionArgs $) {
        this.hasBackground = $.hasBackground;
        this.hasBorder = $.hasBorder;
        this.horizontalAlign = $.horizontalAlign;
        this.margin = $.margin;
        this.sizing = $.sizing;
        this.url = $.url;
        this.urlDarkTheme = $.urlDarkTheme;
        this.verticalAlign = $.verticalAlign;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetImageDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetImageDefinitionArgs $;

        public Builder() {
            $ = new DashboardWidgetImageDefinitionArgs();
        }

        public Builder(DashboardWidgetImageDefinitionArgs defaults) {
            $ = new DashboardWidgetImageDefinitionArgs(Objects.requireNonNull(defaults));
        }

        public Builder hasBackground(@Nullable Output<Boolean> hasBackground) {
            $.hasBackground = hasBackground;
            return this;
        }

        public Builder hasBackground(Boolean hasBackground) {
            return hasBackground(Output.of(hasBackground));
        }

        public Builder hasBorder(@Nullable Output<Boolean> hasBorder) {
            $.hasBorder = hasBorder;
            return this;
        }

        public Builder hasBorder(Boolean hasBorder) {
            return hasBorder(Output.of(hasBorder));
        }

        public Builder horizontalAlign(@Nullable Output<String> horizontalAlign) {
            $.horizontalAlign = horizontalAlign;
            return this;
        }

        public Builder horizontalAlign(String horizontalAlign) {
            return horizontalAlign(Output.of(horizontalAlign));
        }

        public Builder margin(@Nullable Output<String> margin) {
            $.margin = margin;
            return this;
        }

        public Builder margin(String margin) {
            return margin(Output.of(margin));
        }

        public Builder sizing(@Nullable Output<String> sizing) {
            $.sizing = sizing;
            return this;
        }

        public Builder sizing(String sizing) {
            return sizing(Output.of(sizing));
        }

        /**
         * @param url The URL of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder url(Output<String> url) {
            $.url = url;
            return this;
        }

        /**
         * @param url The URL of the dashboard.
         * 
         * @return builder
         * 
         */
        public Builder url(String url) {
            return url(Output.of(url));
        }

        public Builder urlDarkTheme(@Nullable Output<String> urlDarkTheme) {
            $.urlDarkTheme = urlDarkTheme;
            return this;
        }

        public Builder urlDarkTheme(String urlDarkTheme) {
            return urlDarkTheme(Output.of(urlDarkTheme));
        }

        public Builder verticalAlign(@Nullable Output<String> verticalAlign) {
            $.verticalAlign = verticalAlign;
            return this;
        }

        public Builder verticalAlign(String verticalAlign) {
            return verticalAlign(Output.of(verticalAlign));
        }

        public DashboardWidgetImageDefinitionArgs build() {
            $.url = Objects.requireNonNull($.url, "expected parameter 'url' to be non-null");
            return $;
        }
    }

}
