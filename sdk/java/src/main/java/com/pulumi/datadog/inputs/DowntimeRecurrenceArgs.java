// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DowntimeRecurrenceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DowntimeRecurrenceArgs Empty = new DowntimeRecurrenceArgs();

    @Import(name="period")
    private @Nullable Output<Integer> period;

    public Optional<Output<Integer>> period() {
        return Optional.ofNullable(this.period);
    }

    @Import(name="rrule")
    private @Nullable Output<String> rrule;

    public Optional<Output<String>> rrule() {
        return Optional.ofNullable(this.rrule);
    }

    @Import(name="type", required=true)
    private Output<String> type;

    public Output<String> type() {
        return this.type;
    }

    @Import(name="untilDate")
    private @Nullable Output<Integer> untilDate;

    public Optional<Output<Integer>> untilDate() {
        return Optional.ofNullable(this.untilDate);
    }

    @Import(name="untilOccurrences")
    private @Nullable Output<Integer> untilOccurrences;

    public Optional<Output<Integer>> untilOccurrences() {
        return Optional.ofNullable(this.untilOccurrences);
    }

    @Import(name="weekDays")
    private @Nullable Output<List<String>> weekDays;

    public Optional<Output<List<String>>> weekDays() {
        return Optional.ofNullable(this.weekDays);
    }

    private DowntimeRecurrenceArgs() {}

    private DowntimeRecurrenceArgs(DowntimeRecurrenceArgs $) {
        this.period = $.period;
        this.rrule = $.rrule;
        this.type = $.type;
        this.untilDate = $.untilDate;
        this.untilOccurrences = $.untilOccurrences;
        this.weekDays = $.weekDays;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DowntimeRecurrenceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DowntimeRecurrenceArgs $;

        public Builder() {
            $ = new DowntimeRecurrenceArgs();
        }

        public Builder(DowntimeRecurrenceArgs defaults) {
            $ = new DowntimeRecurrenceArgs(Objects.requireNonNull(defaults));
        }

        public Builder period(@Nullable Output<Integer> period) {
            $.period = period;
            return this;
        }

        public Builder period(Integer period) {
            return period(Output.of(period));
        }

        public Builder rrule(@Nullable Output<String> rrule) {
            $.rrule = rrule;
            return this;
        }

        public Builder rrule(String rrule) {
            return rrule(Output.of(rrule));
        }

        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        public Builder type(String type) {
            return type(Output.of(type));
        }

        public Builder untilDate(@Nullable Output<Integer> untilDate) {
            $.untilDate = untilDate;
            return this;
        }

        public Builder untilDate(Integer untilDate) {
            return untilDate(Output.of(untilDate));
        }

        public Builder untilOccurrences(@Nullable Output<Integer> untilOccurrences) {
            $.untilOccurrences = untilOccurrences;
            return this;
        }

        public Builder untilOccurrences(Integer untilOccurrences) {
            return untilOccurrences(Output.of(untilOccurrences));
        }

        public Builder weekDays(@Nullable Output<List<String>> weekDays) {
            $.weekDays = weekDays;
            return this;
        }

        public Builder weekDays(List<String> weekDays) {
            return weekDays(Output.of(weekDays));
        }

        public Builder weekDays(String... weekDays) {
            return weekDays(List.of(weekDays));
        }

        public DowntimeRecurrenceArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
