// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LogsArchiveAzureArchiveArgs extends com.pulumi.resources.ResourceArgs {

    public static final LogsArchiveAzureArchiveArgs Empty = new LogsArchiveAzureArchiveArgs();

    @Import(name="clientId", required=true)
    private Output<String> clientId;

    public Output<String> clientId() {
        return this.clientId;
    }

    @Import(name="container", required=true)
    private Output<String> container;

    public Output<String> container() {
        return this.container;
    }

    @Import(name="path")
    private @Nullable Output<String> path;

    public Optional<Output<String>> path() {
        return Optional.ofNullable(this.path);
    }

    @Import(name="storageAccount", required=true)
    private Output<String> storageAccount;

    public Output<String> storageAccount() {
        return this.storageAccount;
    }

    @Import(name="tenantId", required=true)
    private Output<String> tenantId;

    public Output<String> tenantId() {
        return this.tenantId;
    }

    private LogsArchiveAzureArchiveArgs() {}

    private LogsArchiveAzureArchiveArgs(LogsArchiveAzureArchiveArgs $) {
        this.clientId = $.clientId;
        this.container = $.container;
        this.path = $.path;
        this.storageAccount = $.storageAccount;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LogsArchiveAzureArchiveArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LogsArchiveAzureArchiveArgs $;

        public Builder() {
            $ = new LogsArchiveAzureArchiveArgs();
        }

        public Builder(LogsArchiveAzureArchiveArgs defaults) {
            $ = new LogsArchiveAzureArchiveArgs(Objects.requireNonNull(defaults));
        }

        public Builder clientId(Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        public Builder container(Output<String> container) {
            $.container = container;
            return this;
        }

        public Builder container(String container) {
            return container(Output.of(container));
        }

        public Builder path(@Nullable Output<String> path) {
            $.path = path;
            return this;
        }

        public Builder path(String path) {
            return path(Output.of(path));
        }

        public Builder storageAccount(Output<String> storageAccount) {
            $.storageAccount = storageAccount;
            return this;
        }

        public Builder storageAccount(String storageAccount) {
            return storageAccount(Output.of(storageAccount));
        }

        public Builder tenantId(Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public LogsArchiveAzureArchiveArgs build() {
            $.clientId = Objects.requireNonNull($.clientId, "expected parameter 'clientId' to be non-null");
            $.container = Objects.requireNonNull($.container, "expected parameter 'container' to be non-null");
            $.storageAccount = Objects.requireNonNull($.storageAccount, "expected parameter 'storageAccount' to be non-null");
            $.tenantId = Objects.requireNonNull($.tenantId, "expected parameter 'tenantId' to be non-null");
            return $;
        }
    }

}
