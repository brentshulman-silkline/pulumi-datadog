// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetNoteDefinitionArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetNoteDefinitionArgs Empty = new DashboardWidgetNoteDefinitionArgs();

    @Import(name="backgroundColor")
    private @Nullable Output<String> backgroundColor;

    public Optional<Output<String>> backgroundColor() {
        return Optional.ofNullable(this.backgroundColor);
    }

    @Import(name="content", required=true)
    private Output<String> content;

    public Output<String> content() {
        return this.content;
    }

    @Import(name="fontSize")
    private @Nullable Output<String> fontSize;

    public Optional<Output<String>> fontSize() {
        return Optional.ofNullable(this.fontSize);
    }

    @Import(name="hasPadding")
    private @Nullable Output<Boolean> hasPadding;

    public Optional<Output<Boolean>> hasPadding() {
        return Optional.ofNullable(this.hasPadding);
    }

    @Import(name="showTick")
    private @Nullable Output<Boolean> showTick;

    public Optional<Output<Boolean>> showTick() {
        return Optional.ofNullable(this.showTick);
    }

    @Import(name="textAlign")
    private @Nullable Output<String> textAlign;

    public Optional<Output<String>> textAlign() {
        return Optional.ofNullable(this.textAlign);
    }

    @Import(name="tickEdge")
    private @Nullable Output<String> tickEdge;

    public Optional<Output<String>> tickEdge() {
        return Optional.ofNullable(this.tickEdge);
    }

    @Import(name="tickPos")
    private @Nullable Output<String> tickPos;

    public Optional<Output<String>> tickPos() {
        return Optional.ofNullable(this.tickPos);
    }

    @Import(name="verticalAlign")
    private @Nullable Output<String> verticalAlign;

    public Optional<Output<String>> verticalAlign() {
        return Optional.ofNullable(this.verticalAlign);
    }

    private DashboardWidgetNoteDefinitionArgs() {}

    private DashboardWidgetNoteDefinitionArgs(DashboardWidgetNoteDefinitionArgs $) {
        this.backgroundColor = $.backgroundColor;
        this.content = $.content;
        this.fontSize = $.fontSize;
        this.hasPadding = $.hasPadding;
        this.showTick = $.showTick;
        this.textAlign = $.textAlign;
        this.tickEdge = $.tickEdge;
        this.tickPos = $.tickPos;
        this.verticalAlign = $.verticalAlign;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetNoteDefinitionArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetNoteDefinitionArgs $;

        public Builder() {
            $ = new DashboardWidgetNoteDefinitionArgs();
        }

        public Builder(DashboardWidgetNoteDefinitionArgs defaults) {
            $ = new DashboardWidgetNoteDefinitionArgs(Objects.requireNonNull(defaults));
        }

        public Builder backgroundColor(@Nullable Output<String> backgroundColor) {
            $.backgroundColor = backgroundColor;
            return this;
        }

        public Builder backgroundColor(String backgroundColor) {
            return backgroundColor(Output.of(backgroundColor));
        }

        public Builder content(Output<String> content) {
            $.content = content;
            return this;
        }

        public Builder content(String content) {
            return content(Output.of(content));
        }

        public Builder fontSize(@Nullable Output<String> fontSize) {
            $.fontSize = fontSize;
            return this;
        }

        public Builder fontSize(String fontSize) {
            return fontSize(Output.of(fontSize));
        }

        public Builder hasPadding(@Nullable Output<Boolean> hasPadding) {
            $.hasPadding = hasPadding;
            return this;
        }

        public Builder hasPadding(Boolean hasPadding) {
            return hasPadding(Output.of(hasPadding));
        }

        public Builder showTick(@Nullable Output<Boolean> showTick) {
            $.showTick = showTick;
            return this;
        }

        public Builder showTick(Boolean showTick) {
            return showTick(Output.of(showTick));
        }

        public Builder textAlign(@Nullable Output<String> textAlign) {
            $.textAlign = textAlign;
            return this;
        }

        public Builder textAlign(String textAlign) {
            return textAlign(Output.of(textAlign));
        }

        public Builder tickEdge(@Nullable Output<String> tickEdge) {
            $.tickEdge = tickEdge;
            return this;
        }

        public Builder tickEdge(String tickEdge) {
            return tickEdge(Output.of(tickEdge));
        }

        public Builder tickPos(@Nullable Output<String> tickPos) {
            $.tickPos = tickPos;
            return this;
        }

        public Builder tickPos(String tickPos) {
            return tickPos(Output.of(tickPos));
        }

        public Builder verticalAlign(@Nullable Output<String> verticalAlign) {
            $.verticalAlign = verticalAlign;
            return this;
        }

        public Builder verticalAlign(String verticalAlign) {
            return verticalAlign(Output.of(verticalAlign));
        }

        public DashboardWidgetNoteDefinitionArgs build() {
            $.content = Objects.requireNonNull($.content, "expected parameter 'content' to be non-null");
            return $;
        }
    }

}
