// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.datadog.inputs.SyntheticsTestOptionsListCiArgs;
import com.pulumi.datadog.inputs.SyntheticsTestOptionsListMonitorOptionsArgs;
import com.pulumi.datadog.inputs.SyntheticsTestOptionsListRetryArgs;
import com.pulumi.datadog.inputs.SyntheticsTestOptionsListRumSettingsArgs;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class SyntheticsTestOptionsListArgs extends com.pulumi.resources.ResourceArgs {

    public static final SyntheticsTestOptionsListArgs Empty = new SyntheticsTestOptionsListArgs();

    @Import(name="acceptSelfSigned")
    private @Nullable Output<Boolean> acceptSelfSigned;

    public Optional<Output<Boolean>> acceptSelfSigned() {
        return Optional.ofNullable(this.acceptSelfSigned);
    }

    @Import(name="allowInsecure")
    private @Nullable Output<Boolean> allowInsecure;

    public Optional<Output<Boolean>> allowInsecure() {
        return Optional.ofNullable(this.allowInsecure);
    }

    @Import(name="checkCertificateRevocation")
    private @Nullable Output<Boolean> checkCertificateRevocation;

    public Optional<Output<Boolean>> checkCertificateRevocation() {
        return Optional.ofNullable(this.checkCertificateRevocation);
    }

    @Import(name="ci")
    private @Nullable Output<SyntheticsTestOptionsListCiArgs> ci;

    public Optional<Output<SyntheticsTestOptionsListCiArgs>> ci() {
        return Optional.ofNullable(this.ci);
    }

    @Import(name="disableCsp")
    private @Nullable Output<Boolean> disableCsp;

    public Optional<Output<Boolean>> disableCsp() {
        return Optional.ofNullable(this.disableCsp);
    }

    @Import(name="followRedirects")
    private @Nullable Output<Boolean> followRedirects;

    public Optional<Output<Boolean>> followRedirects() {
        return Optional.ofNullable(this.followRedirects);
    }

    @Import(name="ignoreServerCertificateError")
    private @Nullable Output<Boolean> ignoreServerCertificateError;

    public Optional<Output<Boolean>> ignoreServerCertificateError() {
        return Optional.ofNullable(this.ignoreServerCertificateError);
    }

    @Import(name="initialNavigationTimeout")
    private @Nullable Output<Integer> initialNavigationTimeout;

    public Optional<Output<Integer>> initialNavigationTimeout() {
        return Optional.ofNullable(this.initialNavigationTimeout);
    }

    @Import(name="minFailureDuration")
    private @Nullable Output<Integer> minFailureDuration;

    public Optional<Output<Integer>> minFailureDuration() {
        return Optional.ofNullable(this.minFailureDuration);
    }

    @Import(name="minLocationFailed")
    private @Nullable Output<Integer> minLocationFailed;

    public Optional<Output<Integer>> minLocationFailed() {
        return Optional.ofNullable(this.minLocationFailed);
    }

    @Import(name="monitorName")
    private @Nullable Output<String> monitorName;

    public Optional<Output<String>> monitorName() {
        return Optional.ofNullable(this.monitorName);
    }

    @Import(name="monitorOptions")
    private @Nullable Output<SyntheticsTestOptionsListMonitorOptionsArgs> monitorOptions;

    public Optional<Output<SyntheticsTestOptionsListMonitorOptionsArgs>> monitorOptions() {
        return Optional.ofNullable(this.monitorOptions);
    }

    @Import(name="monitorPriority")
    private @Nullable Output<Integer> monitorPriority;

    public Optional<Output<Integer>> monitorPriority() {
        return Optional.ofNullable(this.monitorPriority);
    }

    @Import(name="noScreenshot")
    private @Nullable Output<Boolean> noScreenshot;

    public Optional<Output<Boolean>> noScreenshot() {
        return Optional.ofNullable(this.noScreenshot);
    }

    @Import(name="restrictedRoles")
    private @Nullable Output<List<String>> restrictedRoles;

    public Optional<Output<List<String>>> restrictedRoles() {
        return Optional.ofNullable(this.restrictedRoles);
    }

    @Import(name="retry")
    private @Nullable Output<SyntheticsTestOptionsListRetryArgs> retry;

    public Optional<Output<SyntheticsTestOptionsListRetryArgs>> retry() {
        return Optional.ofNullable(this.retry);
    }

    @Import(name="rumSettings")
    private @Nullable Output<SyntheticsTestOptionsListRumSettingsArgs> rumSettings;

    public Optional<Output<SyntheticsTestOptionsListRumSettingsArgs>> rumSettings() {
        return Optional.ofNullable(this.rumSettings);
    }

    @Import(name="tickEvery", required=true)
    private Output<Integer> tickEvery;

    public Output<Integer> tickEvery() {
        return this.tickEvery;
    }

    private SyntheticsTestOptionsListArgs() {}

    private SyntheticsTestOptionsListArgs(SyntheticsTestOptionsListArgs $) {
        this.acceptSelfSigned = $.acceptSelfSigned;
        this.allowInsecure = $.allowInsecure;
        this.checkCertificateRevocation = $.checkCertificateRevocation;
        this.ci = $.ci;
        this.disableCsp = $.disableCsp;
        this.followRedirects = $.followRedirects;
        this.ignoreServerCertificateError = $.ignoreServerCertificateError;
        this.initialNavigationTimeout = $.initialNavigationTimeout;
        this.minFailureDuration = $.minFailureDuration;
        this.minLocationFailed = $.minLocationFailed;
        this.monitorName = $.monitorName;
        this.monitorOptions = $.monitorOptions;
        this.monitorPriority = $.monitorPriority;
        this.noScreenshot = $.noScreenshot;
        this.restrictedRoles = $.restrictedRoles;
        this.retry = $.retry;
        this.rumSettings = $.rumSettings;
        this.tickEvery = $.tickEvery;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SyntheticsTestOptionsListArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SyntheticsTestOptionsListArgs $;

        public Builder() {
            $ = new SyntheticsTestOptionsListArgs();
        }

        public Builder(SyntheticsTestOptionsListArgs defaults) {
            $ = new SyntheticsTestOptionsListArgs(Objects.requireNonNull(defaults));
        }

        public Builder acceptSelfSigned(@Nullable Output<Boolean> acceptSelfSigned) {
            $.acceptSelfSigned = acceptSelfSigned;
            return this;
        }

        public Builder acceptSelfSigned(Boolean acceptSelfSigned) {
            return acceptSelfSigned(Output.of(acceptSelfSigned));
        }

        public Builder allowInsecure(@Nullable Output<Boolean> allowInsecure) {
            $.allowInsecure = allowInsecure;
            return this;
        }

        public Builder allowInsecure(Boolean allowInsecure) {
            return allowInsecure(Output.of(allowInsecure));
        }

        public Builder checkCertificateRevocation(@Nullable Output<Boolean> checkCertificateRevocation) {
            $.checkCertificateRevocation = checkCertificateRevocation;
            return this;
        }

        public Builder checkCertificateRevocation(Boolean checkCertificateRevocation) {
            return checkCertificateRevocation(Output.of(checkCertificateRevocation));
        }

        public Builder ci(@Nullable Output<SyntheticsTestOptionsListCiArgs> ci) {
            $.ci = ci;
            return this;
        }

        public Builder ci(SyntheticsTestOptionsListCiArgs ci) {
            return ci(Output.of(ci));
        }

        public Builder disableCsp(@Nullable Output<Boolean> disableCsp) {
            $.disableCsp = disableCsp;
            return this;
        }

        public Builder disableCsp(Boolean disableCsp) {
            return disableCsp(Output.of(disableCsp));
        }

        public Builder followRedirects(@Nullable Output<Boolean> followRedirects) {
            $.followRedirects = followRedirects;
            return this;
        }

        public Builder followRedirects(Boolean followRedirects) {
            return followRedirects(Output.of(followRedirects));
        }

        public Builder ignoreServerCertificateError(@Nullable Output<Boolean> ignoreServerCertificateError) {
            $.ignoreServerCertificateError = ignoreServerCertificateError;
            return this;
        }

        public Builder ignoreServerCertificateError(Boolean ignoreServerCertificateError) {
            return ignoreServerCertificateError(Output.of(ignoreServerCertificateError));
        }

        public Builder initialNavigationTimeout(@Nullable Output<Integer> initialNavigationTimeout) {
            $.initialNavigationTimeout = initialNavigationTimeout;
            return this;
        }

        public Builder initialNavigationTimeout(Integer initialNavigationTimeout) {
            return initialNavigationTimeout(Output.of(initialNavigationTimeout));
        }

        public Builder minFailureDuration(@Nullable Output<Integer> minFailureDuration) {
            $.minFailureDuration = minFailureDuration;
            return this;
        }

        public Builder minFailureDuration(Integer minFailureDuration) {
            return minFailureDuration(Output.of(minFailureDuration));
        }

        public Builder minLocationFailed(@Nullable Output<Integer> minLocationFailed) {
            $.minLocationFailed = minLocationFailed;
            return this;
        }

        public Builder minLocationFailed(Integer minLocationFailed) {
            return minLocationFailed(Output.of(minLocationFailed));
        }

        public Builder monitorName(@Nullable Output<String> monitorName) {
            $.monitorName = monitorName;
            return this;
        }

        public Builder monitorName(String monitorName) {
            return monitorName(Output.of(monitorName));
        }

        public Builder monitorOptions(@Nullable Output<SyntheticsTestOptionsListMonitorOptionsArgs> monitorOptions) {
            $.monitorOptions = monitorOptions;
            return this;
        }

        public Builder monitorOptions(SyntheticsTestOptionsListMonitorOptionsArgs monitorOptions) {
            return monitorOptions(Output.of(monitorOptions));
        }

        public Builder monitorPriority(@Nullable Output<Integer> monitorPriority) {
            $.monitorPriority = monitorPriority;
            return this;
        }

        public Builder monitorPriority(Integer monitorPriority) {
            return monitorPriority(Output.of(monitorPriority));
        }

        public Builder noScreenshot(@Nullable Output<Boolean> noScreenshot) {
            $.noScreenshot = noScreenshot;
            return this;
        }

        public Builder noScreenshot(Boolean noScreenshot) {
            return noScreenshot(Output.of(noScreenshot));
        }

        public Builder restrictedRoles(@Nullable Output<List<String>> restrictedRoles) {
            $.restrictedRoles = restrictedRoles;
            return this;
        }

        public Builder restrictedRoles(List<String> restrictedRoles) {
            return restrictedRoles(Output.of(restrictedRoles));
        }

        public Builder restrictedRoles(String... restrictedRoles) {
            return restrictedRoles(List.of(restrictedRoles));
        }

        public Builder retry(@Nullable Output<SyntheticsTestOptionsListRetryArgs> retry) {
            $.retry = retry;
            return this;
        }

        public Builder retry(SyntheticsTestOptionsListRetryArgs retry) {
            return retry(Output.of(retry));
        }

        public Builder rumSettings(@Nullable Output<SyntheticsTestOptionsListRumSettingsArgs> rumSettings) {
            $.rumSettings = rumSettings;
            return this;
        }

        public Builder rumSettings(SyntheticsTestOptionsListRumSettingsArgs rumSettings) {
            return rumSettings(Output.of(rumSettings));
        }

        public Builder tickEvery(Output<Integer> tickEvery) {
            $.tickEvery = tickEvery;
            return this;
        }

        public Builder tickEvery(Integer tickEvery) {
            return tickEvery(Output.of(tickEvery));
        }

        public SyntheticsTestOptionsListArgs build() {
            $.tickEvery = Objects.requireNonNull($.tickEvery, "expected parameter 'tickEvery' to be non-null");
            return $;
        }
    }

}
