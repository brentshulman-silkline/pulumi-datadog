// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs extends com.pulumi.resources.ResourceArgs {

    public static final DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs Empty = new DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs();

    @Import(name="aggregator")
    private @Nullable Output<String> aggregator;

    public Optional<Output<String>> aggregator() {
        return Optional.ofNullable(this.aggregator);
    }

    @Import(name="dataSource", required=true)
    private Output<String> dataSource;

    public Output<String> dataSource() {
        return this.dataSource;
    }

    @Import(name="isNormalizedCpu")
    private @Nullable Output<Boolean> isNormalizedCpu;

    public Optional<Output<Boolean>> isNormalizedCpu() {
        return Optional.ofNullable(this.isNormalizedCpu);
    }

    @Import(name="limit")
    private @Nullable Output<Integer> limit;

    public Optional<Output<Integer>> limit() {
        return Optional.ofNullable(this.limit);
    }

    @Import(name="metric", required=true)
    private Output<String> metric;

    public Output<String> metric() {
        return this.metric;
    }

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="sort")
    private @Nullable Output<String> sort;

    public Optional<Output<String>> sort() {
        return Optional.ofNullable(this.sort);
    }

    @Import(name="tagFilters")
    private @Nullable Output<List<String>> tagFilters;

    public Optional<Output<List<String>>> tagFilters() {
        return Optional.ofNullable(this.tagFilters);
    }

    @Import(name="textFilter")
    private @Nullable Output<String> textFilter;

    public Optional<Output<String>> textFilter() {
        return Optional.ofNullable(this.textFilter);
    }

    private DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs() {}

    private DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs(DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs $) {
        this.aggregator = $.aggregator;
        this.dataSource = $.dataSource;
        this.isNormalizedCpu = $.isNormalizedCpu;
        this.limit = $.limit;
        this.metric = $.metric;
        this.name = $.name;
        this.sort = $.sort;
        this.tagFilters = $.tagFilters;
        this.textFilter = $.textFilter;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs $;

        public Builder() {
            $ = new DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs();
        }

        public Builder(DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs defaults) {
            $ = new DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs(Objects.requireNonNull(defaults));
        }

        public Builder aggregator(@Nullable Output<String> aggregator) {
            $.aggregator = aggregator;
            return this;
        }

        public Builder aggregator(String aggregator) {
            return aggregator(Output.of(aggregator));
        }

        public Builder dataSource(Output<String> dataSource) {
            $.dataSource = dataSource;
            return this;
        }

        public Builder dataSource(String dataSource) {
            return dataSource(Output.of(dataSource));
        }

        public Builder isNormalizedCpu(@Nullable Output<Boolean> isNormalizedCpu) {
            $.isNormalizedCpu = isNormalizedCpu;
            return this;
        }

        public Builder isNormalizedCpu(Boolean isNormalizedCpu) {
            return isNormalizedCpu(Output.of(isNormalizedCpu));
        }

        public Builder limit(@Nullable Output<Integer> limit) {
            $.limit = limit;
            return this;
        }

        public Builder limit(Integer limit) {
            return limit(Output.of(limit));
        }

        public Builder metric(Output<String> metric) {
            $.metric = metric;
            return this;
        }

        public Builder metric(String metric) {
            return metric(Output.of(metric));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder sort(@Nullable Output<String> sort) {
            $.sort = sort;
            return this;
        }

        public Builder sort(String sort) {
            return sort(Output.of(sort));
        }

        public Builder tagFilters(@Nullable Output<List<String>> tagFilters) {
            $.tagFilters = tagFilters;
            return this;
        }

        public Builder tagFilters(List<String> tagFilters) {
            return tagFilters(Output.of(tagFilters));
        }

        public Builder tagFilters(String... tagFilters) {
            return tagFilters(List.of(tagFilters));
        }

        public Builder textFilter(@Nullable Output<String> textFilter) {
            $.textFilter = textFilter;
            return this;
        }

        public Builder textFilter(String textFilter) {
            return textFilter(Output.of(textFilter));
        }

        public DashboardWidgetGroupDefinitionWidgetGeomapDefinitionRequestQueryProcessQueryArgs build() {
            $.dataSource = Objects.requireNonNull($.dataSource, "expected parameter 'dataSource' to be non-null");
            $.metric = Objects.requireNonNull($.metric, "expected parameter 'metric' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            return $;
        }
    }

}
