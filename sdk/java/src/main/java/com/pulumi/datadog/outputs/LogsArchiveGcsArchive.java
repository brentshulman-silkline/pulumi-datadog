// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.datadog.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class LogsArchiveGcsArchive {
    private String bucket;
    private String clientEmail;
    private String path;
    private String projectId;

    private LogsArchiveGcsArchive() {}
    public String bucket() {
        return this.bucket;
    }
    public String clientEmail() {
        return this.clientEmail;
    }
    public String path() {
        return this.path;
    }
    public String projectId() {
        return this.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LogsArchiveGcsArchive defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucket;
        private String clientEmail;
        private String path;
        private String projectId;
        public Builder() {}
        public Builder(LogsArchiveGcsArchive defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucket = defaults.bucket;
    	      this.clientEmail = defaults.clientEmail;
    	      this.path = defaults.path;
    	      this.projectId = defaults.projectId;
        }

        @CustomType.Setter
        public Builder bucket(String bucket) {
            this.bucket = Objects.requireNonNull(bucket);
            return this;
        }
        @CustomType.Setter
        public Builder clientEmail(String clientEmail) {
            this.clientEmail = Objects.requireNonNull(clientEmail);
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            this.path = Objects.requireNonNull(path);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        public LogsArchiveGcsArchive build() {
            final var o = new LogsArchiveGcsArchive();
            o.bucket = bucket;
            o.clientEmail = clientEmail;
            o.path = path;
            o.projectId = projectId;
            return o;
        }
    }
}
